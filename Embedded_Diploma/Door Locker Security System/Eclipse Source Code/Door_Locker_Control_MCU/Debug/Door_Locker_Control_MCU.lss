
Door_Locker_Control_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000032bc  00003350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080008c  0080008c  0000337c  2**0
                  ALLOC
  3 .stab         000039cc  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d2f  00000000  00000000  00006d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b85b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__vector_3>
      10:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__vector_8>
      24:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 06 	call	0xc7a	; 0xc7a <main>
      8a:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
/*
 * Description:
 * This function will initialize the buzzer by making the pin connected to it output
 */
void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*	Set the buzzer pin as output pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID ,BUZZER_PIN_ID ,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 04 0b 	call	0x1608	; 0x1608 <GPIO_setupPinDirection>

	/*	Turn it OFF at beginning	*/
	GPIO_writePin(BUZZER_PORT_ID ,BUZZER_PIN_ID ,LOGIC_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_ON>:
/*
 * Description:
 * Turing on the buzzer by writing Logic High on the Buzzer Pin
 */
void BUZZER_ON(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID ,BUZZER_PIN_ID ,LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_OFF>:
/*
 * Description:
 * Turing on the buzzer by writing Logic Low on the Buzzer Pin
 */
void BUZZER_OFF(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID ,BUZZER_PIN_ID ,LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DC_MOTOR_init>:
 *	Description:
 *	It initialize the DC Motor by making it's INT pin as output pins in MCU
 *	and setting the Motor OFF at the beginning.
 */
void DC_MOTOR_init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID , DC_MOTOR_IN1_PIN,PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 04 0b 	call	0x1608	; 0x1608 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID , DC_MOTOR_IN2_PIN,PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 04 0b 	call	0x1608	; 0x1608 <GPIO_setupPinDirection>
	 * Set the Motor OFF at the beginning.
	 * To Turn Off Motor :
	 * DC MOTOR IN1 BIT : 0
	 * DC MOTOR IN2 BIT : 0
	 */
	GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN1_PIN,LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN2_PIN,LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>

}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DC_MOTOR_setMotorState>:
 *	cycle input from the user by setting a PWM signal to the enable of H bride.
 *	If the caller entered a duty cycle out of range [0 100] the function won't
 *	supply the enable to H bridge.
 */
void DC_MOTOR_setMotorState(MotorState a_state ,uint8 a_speed)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DC_MOTOR_setMotorState+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DC_MOTOR_setMotorState+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02

	if( (a_speed < 0) || (a_speed > 100) )
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	85 36       	cpi	r24, 0x65	; 101
     be2:	18 f4       	brcc	.+6      	; 0xbea <DC_MOTOR_setMotorState+0x1c>
 		 */
	}
	else
	{
		/*	Set the speed of the Motor according to duty cycle/ speed of the motor	*/
		Timer0_PWM_Init(a_speed);
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	0e 94 8a 13 	call	0x2714	; 0x2714 <Timer0_PWM_Init>


	/*	Clear all bits except first two bit to check them and set mode according to
	 *  these two bit value.
	 */
	a_state &= CLEAR_ALL_BITS_EXCEPT_FIRST_TWO_BITS_MUSK;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	83 70       	andi	r24, 0x03	; 3
     bee:	89 83       	std	Y+1, r24	; 0x01

	switch(a_state)
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	3c 83       	std	Y+4, r19	; 0x04
     bf8:	2b 83       	std	Y+3, r18	; 0x03
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	91 05       	cpc	r25, r1
     c02:	f9 f0       	breq	.+62     	; 0xc42 <DC_MOTOR_setMotorState+0x74>
     c04:	2b 81       	ldd	r18, Y+3	; 0x03
     c06:	3c 81       	ldd	r19, Y+4	; 0x04
     c08:	22 30       	cpi	r18, 0x02	; 2
     c0a:	31 05       	cpc	r19, r1
     c0c:	79 f0       	breq	.+30     	; 0xc2c <DC_MOTOR_setMotorState+0x5e>
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	09 f5       	brne	.+66     	; 0xc58 <DC_MOTOR_setMotorState+0x8a>
			/*
			 * To Turn Off Motor :
			 * DC MOTOR IN1 BIT : 0
			 * DC MOTOR IN2 BIT : 0
			 */
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN1_PIN,LOGIC_LOW);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN2_PIN,LOGIC_LOW);
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
     c2a:	20 c0       	rjmp	.+64     	; 0xc6c <DC_MOTOR_setMotorState+0x9e>
			 * To Turn Off Motor :
			 * DC MOTOR IN1 BIT : 0
			 * DC MOTOR IN2 BIT : 1
			 */

			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN1_PIN,LOGIC_LOW);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN2_PIN,LOGIC_HIGH);
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
     c40:	15 c0       	rjmp	.+42     	; 0xc6c <DC_MOTOR_setMotorState+0x9e>
			/*
			 * To Turn Off Motor :
			 * DC MOTOR IN1 BIT : 1
			 * DC MOTOR IN2 BIT : 0
			 */
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN1_PIN,LOGIC_HIGH);
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN2_PIN,LOGIC_LOW);
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
     c56:	0a c0       	rjmp	.+20     	; 0xc6c <DC_MOTOR_setMotorState+0x9e>
		default:
			/*
			 * If the input is any value rather than the Three states of Motor it will be
			 *set to OFF mode
			 */
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN1_PIN,LOGIC_LOW);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_PORT_ID , DC_MOTOR_IN2_PIN,LOGIC_LOW);
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
			break;
	}
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <main>:

/*******************************************************************************
 *                          	Main Function			                       *
 *******************************************************************************/
int main(void)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	6b 97       	sbiw	r28, 0x1b	; 27
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
	char L_optionResult;  /* used to save the option selected in step 2 : '+','-' */
	uint8 L_stepStatus;	/* Used to know the status to take the decision to reset or not*/

	/*	Enable the Global interrupt Flag */
	SREG |= (1<<7);
     c8e:	af e5       	ldi	r26, 0x5F	; 95
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ef e5       	ldi	r30, 0x5F	; 95
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	8c 93       	st	X, r24

	/* Dynamic configurations of Drivers*/
	DynamicConfiguration_UART L_config_UART = {DISABLE_PARITY , _8_DATA_BIT , _1_STOP_BIT , 9600 };
     c9c:	ce 01       	movw	r24, r28
     c9e:	03 96       	adiw	r24, 0x03	; 3
     ca0:	9b 8b       	std	Y+19, r25	; 0x13
     ca2:	8a 8b       	std	Y+18, r24	; 0x12
     ca4:	e0 e7       	ldi	r30, 0x70	; 112
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	fd 8b       	std	Y+21, r31	; 0x15
     caa:	ec 8b       	std	Y+20, r30	; 0x14
     cac:	f7 e0       	ldi	r31, 0x07	; 7
     cae:	fe 8b       	std	Y+22, r31	; 0x16
     cb0:	ec 89       	ldd	r30, Y+20	; 0x14
     cb2:	fd 89       	ldd	r31, Y+21	; 0x15
     cb4:	00 80       	ld	r0, Z
     cb6:	8c 89       	ldd	r24, Y+20	; 0x14
     cb8:	9d 89       	ldd	r25, Y+21	; 0x15
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9d 8b       	std	Y+21, r25	; 0x15
     cbe:	8c 8b       	std	Y+20, r24	; 0x14
     cc0:	ea 89       	ldd	r30, Y+18	; 0x12
     cc2:	fb 89       	ldd	r31, Y+19	; 0x13
     cc4:	00 82       	st	Z, r0
     cc6:	8a 89       	ldd	r24, Y+18	; 0x12
     cc8:	9b 89       	ldd	r25, Y+19	; 0x13
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	9b 8b       	std	Y+19, r25	; 0x13
     cce:	8a 8b       	std	Y+18, r24	; 0x12
     cd0:	9e 89       	ldd	r25, Y+22	; 0x16
     cd2:	91 50       	subi	r25, 0x01	; 1
     cd4:	9e 8b       	std	Y+22, r25	; 0x16
     cd6:	ee 89       	ldd	r30, Y+22	; 0x16
     cd8:	ee 23       	and	r30, r30
     cda:	51 f7       	brne	.-44     	; 0xcb0 <main+0x36>
	DynamicConfiguration_TWI  L_config_TWI = {400000,100};  /* Bit rate 400 KHZ , MCU address = 100*/
     cdc:	ce 01       	movw	r24, r28
     cde:	0a 96       	adiw	r24, 0x0a	; 10
     ce0:	98 8f       	std	Y+24, r25	; 0x18
     ce2:	8f 8b       	std	Y+23, r24	; 0x17
     ce4:	e8 e6       	ldi	r30, 0x68	; 104
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	fa 8f       	std	Y+26, r31	; 0x1a
     cea:	e9 8f       	std	Y+25, r30	; 0x19
     cec:	f8 e0       	ldi	r31, 0x08	; 8
     cee:	fb 8f       	std	Y+27, r31	; 0x1b
     cf0:	e9 8d       	ldd	r30, Y+25	; 0x19
     cf2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     cf4:	00 80       	ld	r0, Z
     cf6:	89 8d       	ldd	r24, Y+25	; 0x19
     cf8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	9a 8f       	std	Y+26, r25	; 0x1a
     cfe:	89 8f       	std	Y+25, r24	; 0x19
     d00:	ef 89       	ldd	r30, Y+23	; 0x17
     d02:	f8 8d       	ldd	r31, Y+24	; 0x18
     d04:	00 82       	st	Z, r0
     d06:	8f 89       	ldd	r24, Y+23	; 0x17
     d08:	98 8d       	ldd	r25, Y+24	; 0x18
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	98 8f       	std	Y+24, r25	; 0x18
     d0e:	8f 8b       	std	Y+23, r24	; 0x17
     d10:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	9b 8f       	std	Y+27, r25	; 0x1b
     d16:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d18:	ee 23       	and	r30, r30
     d1a:	51 f7       	brne	.-44     	; 0xcf0 <main+0x76>

	/*	Initialization of needed Modules	*/
	UART_init(&L_config_UART);
     d1c:	ce 01       	movw	r24, r28
     d1e:	03 96       	adiw	r24, 0x03	; 3
     d20:	0e 94 77 17 	call	0x2eee	; 0x2eee <UART_init>
	TWI_init(&L_config_TWI);
     d24:	ce 01       	movw	r24, r28
     d26:	0a 96       	adiw	r24, 0x0a	; 10
     d28:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <TWI_init>
	LCD_init();
     d2c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_init>
	DC_MOTOR_init();
     d30:	0e 94 cc 05 	call	0xb98	; 0xb98 <DC_MOTOR_init>
	BUZZER_init();
     d34:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	/*	Super Loop	*/
	while(1)
	{
		/*********** STEP 1 ************/
		/* create Password 	*/
		APP_CreatePassword_CTRL_MCU();
     d38:	0e 94 bd 06 	call	0xd7a	; 0xd7a <APP_CreatePassword_CTRL_MCU>

		/* Store the Password Stored in EEPROM in global Variable as it will be
		 * used Multiple times
		 */
		EXTERNAL_EEPROM_readArrayOfBytes(ADDRESS_OF_PASSWORD_IN_EEPROM, g_readPasswordFromEEPROM, PASSWORD_SIZE);
     d3c:	2c e8       	ldi	r18, 0x8C	; 140
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e1       	ldi	r24, 0x11	; 17
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	b9 01       	movw	r22, r18
     d46:	45 e0       	ldi	r20, 0x05	; 5
     d48:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <EXTERNAL_EEPROM_readArrayOfBytes>
		/*	Always Execute Step 2 until Resets happens  */
		do
		{
			/*********** STEP 2 ************/
			/*	Control MCU is now ready to receive the option selected at HMI_MCU  */
			UART_sendData(I_AM_READY);
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
			L_optionResult = UART_receiveData();
     d52:	0e 94 0b 18 	call	0x3016	; 0x3016 <UART_receiveData>
     d56:	89 83       	std	Y+1, r24	; 0x01


			if(L_optionResult == '+') /*	User Choose to Open Door 	*/
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	8b 32       	cpi	r24, 0x2B	; 43
     d5c:	19 f4       	brne	.+6      	; 0xd64 <main+0xea>
			{
				/*********** STEP 3 ************/
				/*	Do all requirements when user Choose to Open Door */
				APP_optionOpenDoorIsSelected_CTRL_MCU();
     d5e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <APP_optionOpenDoorIsSelected_CTRL_MCU>
     d62:	f4 cf       	rjmp	.-24     	; 0xd4c <main+0xd2>

			}
			else if( L_optionResult == '-') /*	User Choose to Reset Password  */
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	8d 32       	cpi	r24, 0x2D	; 45
     d68:	89 f7       	brne	.-30     	; 0xd4c <main+0xd2>
			{
				/*********** STEP 4 ************/
				/*	Do all requirements when user Choose to Reset Password */
				APP_optionResetPasswordIsSelected_CTRL_MCU(&L_stepStatus);
     d6a:	ce 01       	movw	r24, r28
     d6c:	02 96       	adiw	r24, 0x02	; 2
     d6e:	0e 94 b3 08 	call	0x1166	; 0x1166 <APP_optionResetPasswordIsSelected_CTRL_MCU>
				if(L_stepStatus == RESET)
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	88 23       	and	r24, r24
     d76:	01 f3       	breq	.-64     	; 0xd38 <main+0xbe>
     d78:	e9 cf       	rjmp	.-46     	; 0xd4c <main+0xd2>

00000d7a <APP_CreatePassword_CTRL_MCU>:
 *  HMI MCU that password matches and it is created and saved in EEPROM , if the
 *  password doesn't match it also tell HMI MCU that password was mismatch and
 *  will loop until a match happens.
 */
void APP_CreatePassword_CTRL_MCU(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	6b 97       	sbiw	r28, 0x1b	; 27
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
	PasswordStatus L_compareResult ;

	/*	This is the array where we will save the Password Created */
	uint8 L_password  [PASSWORD_SIZE + 1] = {0};
     d8e:	86 e0       	ldi	r24, 0x06	; 6
     d90:	fe 01       	movw	r30, r28
     d92:	70 96       	adiw	r30, 0x10	; 16
     d94:	df 01       	movw	r26, r30
     d96:	98 2f       	mov	r25, r24
     d98:	1d 92       	st	X+, r1
     d9a:	9a 95       	dec	r25
     d9c:	e9 f7       	brne	.-6      	; 0xd98 <APP_CreatePassword_CTRL_MCU+0x1e>

	/*	This is the array where we will save the Reentered Password  */
	uint8 L_repeadtedPassword[PASSWORD_SIZE + 1] = {0};
     d9e:	86 e0       	ldi	r24, 0x06	; 6
     da0:	fe 01       	movw	r30, r28
     da2:	76 96       	adiw	r30, 0x16	; 22
     da4:	df 01       	movw	r26, r30
     da6:	98 2f       	mov	r25, r24
     da8:	1d 92       	st	X+, r1
     daa:	9a 95       	dec	r25
     dac:	e9 f7       	brne	.-6      	; 0xda8 <APP_CreatePassword_CTRL_MCU+0x2e>

	do
	{
		/*	Tell HMI_MCU that CTRL_MCU is ready to receive the Password Created */
		UART_sendData(I_AM_READY);
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
		UART_receiveString(L_password);
     db4:	ce 01       	movw	r24, r28
     db6:	40 96       	adiw	r24, 0x10	; 16
     db8:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <UART_receiveString>


		/*	Tell HMI_MCU that CTRL_MCU is ready to receive the Reentered Password */
		UART_sendData(I_AM_READY);
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
		UART_receiveString(L_repeadtedPassword);
     dc2:	ce 01       	movw	r24, r28
     dc4:	46 96       	adiw	r24, 0x16	; 22
     dc6:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <UART_receiveString>


		/*	Compare Two Passwords */
		L_compareResult = APP_compareTwoPasswords(L_password ,L_repeadtedPassword) ;
     dca:	ce 01       	movw	r24, r28
     dcc:	40 96       	adiw	r24, 0x10	; 16
     dce:	9e 01       	movw	r18, r28
     dd0:	2a 5e       	subi	r18, 0xEA	; 234
     dd2:	3f 4f       	sbci	r19, 0xFF	; 255
     dd4:	b9 01       	movw	r22, r18
     dd6:	0e 94 81 07 	call	0xf02	; 0xf02 <APP_compareTwoPasswords>
     dda:	8f 87       	std	Y+15, r24	; 0x0f

		if( L_compareResult == PASSWORD_MATCH )
     ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dde:	88 23       	and	r24, r24
     de0:	09 f0       	breq	.+2      	; 0xde4 <APP_CreatePassword_CTRL_MCU+0x6a>
     de2:	7f c0       	rjmp	.+254    	; 0xee2 <APP_CreatePassword_CTRL_MCU+0x168>
		{
			/*	If they match Then save The password inside External EEPROM */
			EXTERNAL_EEPROM_writeArrayOfBytes(ADDRESS_OF_PASSWORD_IN_EEPROM, L_password, PASSWORD_SIZE);
     de4:	9e 01       	movw	r18, r28
     de6:	20 5f       	subi	r18, 0xF0	; 240
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	81 e1       	ldi	r24, 0x11	; 17
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	b9 01       	movw	r22, r18
     df0:	45 e0       	ldi	r20, 0x05	; 5
     df2:	0e 94 0e 0a 	call	0x141c	; 0x141c <EXTERNAL_EEPROM_writeArrayOfBytes>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	a0 e2       	ldi	r26, 0x20	; 32
     dfc:	b1 e4       	ldi	r27, 0x41	; 65
     dfe:	8b 87       	std	Y+11, r24	; 0x0b
     e00:	9c 87       	std	Y+12, r25	; 0x0c
     e02:	ad 87       	std	Y+13, r26	; 0x0d
     e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e06:	6b 85       	ldd	r22, Y+11	; 0x0b
     e08:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	4a ef       	ldi	r20, 0xFA	; 250
     e14:	54 e4       	ldi	r21, 0x44	; 68
     e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	8f 83       	std	Y+7, r24	; 0x07
     e20:	98 87       	std	Y+8, r25	; 0x08
     e22:	a9 87       	std	Y+9, r26	; 0x09
     e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e26:	6f 81       	ldd	r22, Y+7	; 0x07
     e28:	78 85       	ldd	r23, Y+8	; 0x08
     e2a:	89 85       	ldd	r24, Y+9	; 0x09
     e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e8       	ldi	r20, 0x80	; 128
     e34:	5f e3       	ldi	r21, 0x3F	; 63
     e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3a:	88 23       	and	r24, r24
     e3c:	2c f4       	brge	.+10     	; 0xe48 <APP_CreatePassword_CTRL_MCU+0xce>
		__ticks = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	3f c0       	rjmp	.+126    	; 0xec6 <APP_CreatePassword_CTRL_MCU+0x14c>
	else if (__tmp > 65535)
     e48:	6f 81       	ldd	r22, Y+7	; 0x07
     e4a:	78 85       	ldd	r23, Y+8	; 0x08
     e4c:	89 85       	ldd	r24, Y+9	; 0x09
     e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	57 e4       	ldi	r21, 0x47	; 71
     e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e5c:	18 16       	cp	r1, r24
     e5e:	4c f5       	brge	.+82     	; 0xeb2 <APP_CreatePassword_CTRL_MCU+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e60:	6b 85       	ldd	r22, Y+11	; 0x0b
     e62:	7c 85       	ldd	r23, Y+12	; 0x0c
     e64:	8d 85       	ldd	r24, Y+13	; 0x0d
     e66:	9e 85       	ldd	r25, Y+14	; 0x0e
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e2       	ldi	r20, 0x20	; 32
     e6e:	51 e4       	ldi	r21, 0x41	; 65
     e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	0f c0       	rjmp	.+30     	; 0xea8 <APP_CreatePassword_CTRL_MCU+0x12e>
     e8a:	88 ec       	ldi	r24, 0xC8	; 200
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9c 83       	std	Y+4, r25	; 0x04
     e90:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <APP_CreatePassword_CTRL_MCU+0x11c>
     e9a:	9c 83       	std	Y+4, r25	; 0x04
     e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	69 f7       	brne	.-38     	; 0xe8a <APP_CreatePassword_CTRL_MCU+0x110>
     eb0:	14 c0       	rjmp	.+40     	; 0xeda <APP_CreatePassword_CTRL_MCU+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <APP_CreatePassword_CTRL_MCU+0x158>
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);

			/*	Tell HMI_MCU that the Compare Result is Match */
			UART_sendData(PASSWORD_MATCH);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <APP_CreatePassword_CTRL_MCU+0x16e>
		}
		else
		{
			/*	Tell HMI_MCU that the Compare Result is Mismatch */
			UART_sendData(PASSWORD_MISMASTCH);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
		}

		/*	If the compare result was mismatch then we will start from the
		 *  beginning , It will breaks only if the result was Match
		 */
	}while( L_compareResult == PASSWORD_MISMASTCH);
     ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	09 f4       	brne	.+2      	; 0xef0 <APP_CreatePassword_CTRL_MCU+0x176>
     eee:	5f cf       	rjmp	.-322    	; 0xdae <APP_CreatePassword_CTRL_MCU+0x34>

}
     ef0:	6b 96       	adiw	r28, 0x1b	; 27
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <APP_compareTwoPasswords>:
/*
 * Description :
 * This function compare the two Passwords , and return the result.
 */
PasswordStatus APP_compareTwoPasswords(uint8 *a_password , uint8 *a_repeatedPassword)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <APP_compareTwoPasswords+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <APP_compareTwoPasswords+0x8>
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <APP_compareTwoPasswords+0xa>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9b 83       	std	Y+3, r25	; 0x03
     f12:	8a 83       	std	Y+2, r24	; 0x02
     f14:	7d 83       	std	Y+5, r23	; 0x05
     f16:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i ;

	/*	Loop with password array and compare the two passwords */
	for(i = 0 ; i < PASSWORD_SIZE ;i++)
     f18:	19 82       	std	Y+1, r1	; 0x01
     f1a:	1a c0       	rjmp	.+52     	; 0xf50 <APP_compareTwoPasswords+0x4e>
	{
		/*	If one number is not the same so Password Mismatch */
		if( a_password[i]  != a_repeatedPassword[i])
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	9b 81       	ldd	r25, Y+3	; 0x03
     f26:	fc 01       	movw	r30, r24
     f28:	e2 0f       	add	r30, r18
     f2a:	f3 1f       	adc	r31, r19
     f2c:	40 81       	ld	r20, Z
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	fc 01       	movw	r30, r24
     f3a:	e2 0f       	add	r30, r18
     f3c:	f3 1f       	adc	r31, r19
     f3e:	80 81       	ld	r24, Z
     f40:	48 17       	cp	r20, r24
     f42:	19 f0       	breq	.+6      	; 0xf4a <APP_compareTwoPasswords+0x48>
		{
			return PASSWORD_MISMASTCH;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	8e 83       	std	Y+6, r24	; 0x06
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <APP_compareTwoPasswords+0x56>
PasswordStatus APP_compareTwoPasswords(uint8 *a_password , uint8 *a_repeatedPassword)
{
	uint8 i ;

	/*	Loop with password array and compare the two passwords */
	for(i = 0 ; i < PASSWORD_SIZE ;i++)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	85 30       	cpi	r24, 0x05	; 5
     f54:	18 f3       	brcs	.-58     	; 0xf1c <APP_compareTwoPasswords+0x1a>
			return PASSWORD_MISMASTCH;
		}
	}

	/*	reaching here means that the two Passwords matched */
	return PASSWORD_MATCH;
     f56:	1e 82       	std	Y+6, r1	; 0x06
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
}
     f5a:	26 96       	adiw	r28, 0x06	; 6
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <APP_optionOpenDoorIsSelected_CTRL_MCU>:
/*
 * Description:
 * This function do all the requirements needed when user select to open Door
 */
void APP_optionOpenDoorIsSelected_CTRL_MCU(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	27 97       	sbiw	r28, 0x07	; 7
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
	PasswordStatus L_compareResult ;

	do
	{
		uint8 L_passwordTobeChecked [PASSWORD_SIZE + 1] = {0};
     f80:	86 e0       	ldi	r24, 0x06	; 6
     f82:	fe 01       	movw	r30, r28
     f84:	32 96       	adiw	r30, 0x02	; 2
     f86:	df 01       	movw	r26, r30
     f88:	98 2f       	mov	r25, r24
     f8a:	1d 92       	st	X+, r1
     f8c:	9a 95       	dec	r25
     f8e:	e9 f7       	brne	.-6      	; 0xf8a <APP_optionOpenDoorIsSelected_CTRL_MCU+0x1e>

		/*	Tell HMI_MCU that CTRL_MCU is ready to receive the Password to Check
		 *  if it is right or wrong
		 */
		UART_sendData(I_AM_READY);
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
		UART_receiveString(L_passwordTobeChecked);
     f96:	ce 01       	movw	r24, r28
     f98:	02 96       	adiw	r24, 0x02	; 2
     f9a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <UART_receiveString>

		/*	Compare Two Passwords */
		L_compareResult = APP_compareTwoPasswords(L_passwordTobeChecked , g_readPasswordFromEEPROM);
     f9e:	ce 01       	movw	r24, r28
     fa0:	02 96       	adiw	r24, 0x02	; 2
     fa2:	2c e8       	ldi	r18, 0x8C	; 140
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	b9 01       	movw	r22, r18
     fa8:	0e 94 81 07 	call	0xf02	; 0xf02 <APP_compareTwoPasswords>
     fac:	89 83       	std	Y+1, r24	; 0x01

		if( L_compareResult == PASSWORD_MATCH )
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 23       	and	r24, r24
     fb2:	31 f4       	brne	.+12     	; 0xfc0 <APP_optionOpenDoorIsSelected_CTRL_MCU+0x54>
		{
			/*	Tell HMI_MCU that the Compare Result is Match */
			UART_sendData(PASSWORD_MATCH);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>

			APP_openDoorOptionProcessing_CTRL_MCU();
     fba:	0e 94 f7 07 	call	0xfee	; 0xfee <APP_openDoorOptionProcessing_CTRL_MCU>
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <APP_optionOpenDoorIsSelected_CTRL_MCU+0x5e>
		}
		else
		{
			/*	Tell HMI_MCU that the Compare Result is Mismatch */
			UART_sendData(PASSWORD_MISMASTCH);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>

			/* if Password was Mismatch give him another 2 Trials only */
			APP_passwordMismatchHandling_CTRL_MCU();
     fc6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <APP_passwordMismatchHandling_CTRL_MCU>
		}

	/*	We loop if the Password entered is wrong , We give 3 Trials more than
	*  An Alarm Goes ON
	*/
	}while( (L_compareResult == PASSWORD_MISMASTCH) && (g_mismatch < MAX_NUM_OF_MISMATCH));
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	21 f4       	brne	.+8      	; 0xfd8 <APP_optionOpenDoorIsSelected_CTRL_MCU+0x6c>
     fd0:	80 91 95 00 	lds	r24, 0x0095
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	a0 f2       	brcs	.-88     	; 0xf80 <APP_optionOpenDoorIsSelected_CTRL_MCU+0x14>

	/*	Reaching here means that it enters the password Right or he has consumed
	 *  Three trials and in both cases the counter is reseted to start again from
	 *  the start
	 */
	g_mismatch = 0;
     fd8:	10 92 95 00 	sts	0x0095, r1
}
     fdc:	27 96       	adiw	r28, 0x07	; 7
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <APP_openDoorOptionProcessing_CTRL_MCU>:
 * 1) Rotate DC Motor Clockwise            For 15 seconds
 * 2) Hold DC Motor                        For 3  seconds
 * 3) Rotate DC Motor Anti-Clockwise       For 15 seconds
 */
void APP_openDoorOptionProcessing_CTRL_MCU(void)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	68 97       	sbiw	r28, 0x18	; 24
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
	/*	Timer1 Dynamic configurations to count 3 , 15 seconds */

	/*	3 seconds, Only one Compare match is enough */
	DynamicConfiguration_TIMER L_timerConfig3sec = {TIMER1 , T1_CTC_MODE ,F_CPU_DIV_BY_1024,0, 23438};
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	98 8b       	std	Y+16, r25	; 0x10
    1008:	8f 87       	std	Y+15, r24	; 0x0f
    100a:	ee e7       	ldi	r30, 0x7E	; 126
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	fa 8b       	std	Y+18, r31	; 0x12
    1010:	e9 8b       	std	Y+17, r30	; 0x11
    1012:	f7 e0       	ldi	r31, 0x07	; 7
    1014:	fb 8b       	std	Y+19, r31	; 0x13
    1016:	e9 89       	ldd	r30, Y+17	; 0x11
    1018:	fa 89       	ldd	r31, Y+18	; 0x12
    101a:	00 80       	ld	r0, Z
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	9a 89       	ldd	r25, Y+18	; 0x12
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	9a 8b       	std	Y+18, r25	; 0x12
    1024:	89 8b       	std	Y+17, r24	; 0x11
    1026:	ef 85       	ldd	r30, Y+15	; 0x0f
    1028:	f8 89       	ldd	r31, Y+16	; 0x10
    102a:	00 82       	st	Z, r0
    102c:	8f 85       	ldd	r24, Y+15	; 0x0f
    102e:	98 89       	ldd	r25, Y+16	; 0x10
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	98 8b       	std	Y+16, r25	; 0x10
    1034:	8f 87       	std	Y+15, r24	; 0x0f
    1036:	9b 89       	ldd	r25, Y+19	; 0x13
    1038:	91 50       	subi	r25, 0x01	; 1
    103a:	9b 8b       	std	Y+19, r25	; 0x13
    103c:	eb 89       	ldd	r30, Y+19	; 0x13
    103e:	ee 23       	and	r30, r30
    1040:	51 f7       	brne	.-44     	; 0x1016 <APP_openDoorOptionProcessing_CTRL_MCU+0x28>
	/*	15 seconds, Two Compare match is needed which mean two interrupts */
	DynamicConfiguration_TIMER L_timerConfig15sec = {TIMER1 , T1_CTC_MODE ,F_CPU_DIV_BY_1024,0, 58594};
    1042:	ce 01       	movw	r24, r28
    1044:	08 96       	adiw	r24, 0x08	; 8
    1046:	9d 8b       	std	Y+21, r25	; 0x15
    1048:	8c 8b       	std	Y+20, r24	; 0x14
    104a:	e7 e7       	ldi	r30, 0x77	; 119
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ff 8b       	std	Y+23, r31	; 0x17
    1050:	ee 8b       	std	Y+22, r30	; 0x16
    1052:	f7 e0       	ldi	r31, 0x07	; 7
    1054:	f8 8f       	std	Y+24, r31	; 0x18
    1056:	ee 89       	ldd	r30, Y+22	; 0x16
    1058:	ff 89       	ldd	r31, Y+23	; 0x17
    105a:	00 80       	ld	r0, Z
    105c:	8e 89       	ldd	r24, Y+22	; 0x16
    105e:	9f 89       	ldd	r25, Y+23	; 0x17
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	9f 8b       	std	Y+23, r25	; 0x17
    1064:	8e 8b       	std	Y+22, r24	; 0x16
    1066:	ec 89       	ldd	r30, Y+20	; 0x14
    1068:	fd 89       	ldd	r31, Y+21	; 0x15
    106a:	00 82       	st	Z, r0
    106c:	8c 89       	ldd	r24, Y+20	; 0x14
    106e:	9d 89       	ldd	r25, Y+21	; 0x15
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	9d 8b       	std	Y+21, r25	; 0x15
    1074:	8c 8b       	std	Y+20, r24	; 0x14
    1076:	98 8d       	ldd	r25, Y+24	; 0x18
    1078:	91 50       	subi	r25, 0x01	; 1
    107a:	98 8f       	std	Y+24, r25	; 0x18
    107c:	e8 8d       	ldd	r30, Y+24	; 0x18
    107e:	ee 23       	and	r30, r30
    1080:	51 f7       	brne	.-44     	; 0x1056 <APP_openDoorOptionProcessing_CTRL_MCU+0x68>


	/*	Before Timer initialization we must clear the flag to know the effect of
	 *  Call back function
	 */
	g_timerHasFinishedCounting15seconds = FALSE ;
    1082:	10 92 92 00 	sts	0x0092, r1
	/*	Set the Call back Function */
	TIMER_setCallBackFunction(TIMER1 , APP_timer1_15sec_CallBackFunction_CTRL_MCU);
    1086:	27 e9       	ldi	r18, 0x97	; 151
    1088:	38 e0       	ldi	r19, 0x08	; 8
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <TIMER_setCallBackFunction>
	/* (1) Rotate DC Motor Clockwise  For 15 seconds */
	DC_MOTOR_setMotorState(ROTATE_CLOCKWISE , 100);
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	64 e6       	ldi	r22, 0x64	; 100
    1096:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_MOTOR_setMotorState>
	/*	Timer1 ON */
	TIMER_init(&L_timerConfig15sec);
    109a:	ce 01       	movw	r24, r28
    109c:	08 96       	adiw	r24, 0x08	; 8
    109e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TIMER_init>
	/*	Wait until 15 seconds passes */
	while(!g_timerHasFinishedCounting15seconds);
    10a2:	80 91 92 00 	lds	r24, 0x0092
    10a6:	88 23       	and	r24, r24
    10a8:	e1 f3       	breq	.-8      	; 0x10a2 <APP_openDoorOptionProcessing_CTRL_MCU+0xb4>


	/*	Before Timer initialization we must clear the flag to know the effect of
	 *  Call back function
	 */
	g_timerHasFinishedCounting3seconds = FALSE ;
    10aa:	10 92 91 00 	sts	0x0091, r1
	/*	Set the Call back Function */
	TIMER_setCallBackFunction(TIMER1 , APP_timer1_3sec_CallBackFunction_CTRL_MCU);
    10ae:	26 e8       	ldi	r18, 0x86	; 134
    10b0:	38 e0       	ldi	r19, 0x08	; 8
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	b9 01       	movw	r22, r18
    10b6:	0e 94 38 16 	call	0x2c70	; 0x2c70 <TIMER_setCallBackFunction>
	/* (2) Hold DC Motor    For 3  seconds */
	DC_MOTOR_setMotorState(OFF , 0);
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_MOTOR_setMotorState>
	/*	Timer1 ON */
	TIMER_init(&L_timerConfig3sec);
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TIMER_init>
	/*	Wait until 3 seconds passes */
	while(!g_timerHasFinishedCounting3seconds);
    10ca:	80 91 91 00 	lds	r24, 0x0091
    10ce:	88 23       	and	r24, r24
    10d0:	e1 f3       	breq	.-8      	; 0x10ca <APP_openDoorOptionProcessing_CTRL_MCU+0xdc>


	/*	Before Timer initialization we must clear the flag to know the effect of
	 *  Call back function
	 */
	g_timerHasFinishedCounting15seconds = FALSE ;
    10d2:	10 92 92 00 	sts	0x0092, r1
	/*	Set the Call back Function */
	TIMER_setCallBackFunction(TIMER1 , APP_timer1_15sec_CallBackFunction_CTRL_MCU);
    10d6:	27 e9       	ldi	r18, 0x97	; 151
    10d8:	38 e0       	ldi	r19, 0x08	; 8
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	b9 01       	movw	r22, r18
    10de:	0e 94 38 16 	call	0x2c70	; 0x2c70 <TIMER_setCallBackFunction>
	/* (3) Rotate DC Motor Anti-Clockwise     For 15 seconds */
	DC_MOTOR_setMotorState(ROTATE_ANTICLOCKWISE , 100);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	64 e6       	ldi	r22, 0x64	; 100
    10e6:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_MOTOR_setMotorState>
	/*	Timer1 ON */
	TIMER_init(&L_timerConfig15sec);
    10ea:	ce 01       	movw	r24, r28
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TIMER_init>
	/*	Wait until 15 seconds passes */
	while(!g_timerHasFinishedCounting15seconds);
    10f2:	80 91 92 00 	lds	r24, 0x0092
    10f6:	88 23       	and	r24, r24
    10f8:	e1 f3       	breq	.-8      	; 0x10f2 <APP_openDoorOptionProcessing_CTRL_MCU+0x104>

}
    10fa:	68 96       	adiw	r28, 0x18	; 24
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <APP_timer1_3sec_CallBackFunction_CTRL_MCU>:
 * Description :
 * This function is Called when Timer1 trigger interrupt. when timer is set to
 * count 3 seconds.
 */
void APP_timer1_3sec_CallBackFunction_CTRL_MCU(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	g_timerHasFinishedCounting3seconds = TRUE;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 91 00 	sts	0x0091, r24

	/*	Turn OFF Timer 1*/
	TIMER_deInit(TIMER1);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <TIMER_deInit>

	/*	Turn OFF Motor */
	DC_MOTOR_setMotorState(OFF,0);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_MOTOR_setMotorState>
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <APP_timer1_15sec_CallBackFunction_CTRL_MCU>:
 * Description :
 * This function is Called when Timer1 trigger interrupt. used when the timer
 * is set to count 15 seconds.
 */
void APP_timer1_15sec_CallBackFunction_CTRL_MCU(void)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	/*	Increment The Global which count the number of Interrupts */
	g_tick++;
    1136:	80 91 94 00 	lds	r24, 0x0094
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	80 93 94 00 	sts	0x0094, r24

	if(g_tick == NUMBER_OF_INTERRUPTS_TO_COUNT_15_SEC)
    1140:	80 91 94 00 	lds	r24, 0x0094
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	61 f4       	brne	.+24     	; 0x1160 <APP_timer1_15sec_CallBackFunction_CTRL_MCU+0x32>
	{
		g_timerHasFinishedCounting15seconds = TRUE;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 92 00 	sts	0x0092, r24

		/*	Turn OFF Timer 1*/
		TIMER_deInit(TIMER1);
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <TIMER_deInit>
		/*	Turn OFF Motor */
		DC_MOTOR_setMotorState(OFF,0);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	0e 94 e7 05 	call	0xbce	; 0xbce <DC_MOTOR_setMotorState>
		/*	Clear the number of Interrupts */
		g_tick = 0;
    115c:	10 92 94 00 	sts	0x0094, r1
	}

}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <APP_optionResetPasswordIsSelected_CTRL_MCU>:
/*
 * Description:
 * This function do all the requirements needed when user select Reset Password
 */
void APP_optionResetPasswordIsSelected_CTRL_MCU(uint8 *a_stepStatus)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	29 97       	sbiw	r28, 0x09	; 9
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	99 87       	std	Y+9, r25	; 0x09
    117c:	88 87       	std	Y+8, r24	; 0x08
	PasswordStatus L_compareResult ;

	do
	{
		uint8 L_passwordTobeChecked [PASSWORD_SIZE + 1] = {0};
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	fe 01       	movw	r30, r28
    1182:	32 96       	adiw	r30, 0x02	; 2
    1184:	df 01       	movw	r26, r30
    1186:	98 2f       	mov	r25, r24
    1188:	1d 92       	st	X+, r1
    118a:	9a 95       	dec	r25
    118c:	e9 f7       	brne	.-6      	; 0x1188 <APP_optionResetPasswordIsSelected_CTRL_MCU+0x22>

		/*	Tell HMI_MCU that CTRL_MCU is ready to receive the Password to Check
		 *  if it is right or wrong
		 */
		UART_sendData(I_AM_READY);
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
		UART_receiveString(L_passwordTobeChecked);
    1194:	ce 01       	movw	r24, r28
    1196:	02 96       	adiw	r24, 0x02	; 2
    1198:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <UART_receiveString>

		/*	Compare Two Passwords */
		L_compareResult = APP_compareTwoPasswords(L_passwordTobeChecked , g_readPasswordFromEEPROM);
    119c:	ce 01       	movw	r24, r28
    119e:	02 96       	adiw	r24, 0x02	; 2
    11a0:	2c e8       	ldi	r18, 0x8C	; 140
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	b9 01       	movw	r22, r18
    11a6:	0e 94 81 07 	call	0xf02	; 0xf02 <APP_compareTwoPasswords>
    11aa:	89 83       	std	Y+1, r24	; 0x01

		if( L_compareResult == PASSWORD_MATCH )
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	88 23       	and	r24, r24
    11b0:	39 f4       	brne	.+14     	; 0x11c0 <APP_optionResetPasswordIsSelected_CTRL_MCU+0x5a>
		{
			/*	Tell HMI_MCU that the Compare Result is Match */
			UART_sendData(PASSWORD_MATCH);
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>

			/*	Return RESET value so that we can break out of the loop in main */
			*a_stepStatus = RESET;
    11b8:	e8 85       	ldd	r30, Y+8	; 0x08
    11ba:	f9 85       	ldd	r31, Y+9	; 0x09
    11bc:	10 82       	st	Z, r1
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <APP_optionResetPasswordIsSelected_CTRL_MCU+0x6c>
		}
		else
		{
			/*	Tell HMI_MCU that the Compare Result is Mismatch */
			UART_sendData(PASSWORD_MISMASTCH);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>

			*a_stepStatus = NORESET; /*	No reset as Password Mismatch*/
    11c6:	e8 85       	ldd	r30, Y+8	; 0x08
    11c8:	f9 85       	ldd	r31, Y+9	; 0x09
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 83       	st	Z, r24

			/* if Password was Mismatch give him another 2 Trials only */
			APP_passwordMismatchHandling_CTRL_MCU();
    11ce:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <APP_passwordMismatchHandling_CTRL_MCU>
		}

	/*	We loop if the Password entered is wrong , We give 3 Trials more than
	*  An Alarm Goes ON
	*/
	}while( (L_compareResult == PASSWORD_MISMASTCH) && (g_mismatch < MAX_NUM_OF_MISMATCH));
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	21 f4       	brne	.+8      	; 0x11e0 <APP_optionResetPasswordIsSelected_CTRL_MCU+0x7a>
    11d8:	80 91 95 00 	lds	r24, 0x0095
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	78 f2       	brcs	.-98     	; 0x117e <APP_optionResetPasswordIsSelected_CTRL_MCU+0x18>

	/*	Reaching here means that it enters the password Right or he has consumed
	 *  Three trials and in both cases the counter is reseted to start again from
	 *  the start
	 */
	g_mismatch = 0;
    11e0:	10 92 95 00 	sts	0x0095, r1
}
    11e4:	29 96       	adiw	r28, 0x09	; 9
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <APP_passwordMismatchHandling_CTRL_MCU>:
 * Description:
 * This function handles the case where the user enters Wrong password until
 * 3 trials in which it turn on the Buzzer for 1 minute
 */
void APP_passwordMismatchHandling_CTRL_MCU(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
	/*	60 seconds, 8 Compare match is needed which mean 8 interrupts */
	DynamicConfiguration_TIMER L_timerConfig60sec = {TIMER1 , T1_CTC_MODE ,F_CPU_DIV_BY_1024,0, 58594};
    120a:	ce 01       	movw	r24, r28
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	99 87       	std	Y+9, r25	; 0x09
    1210:	88 87       	std	Y+8, r24	; 0x08
    1212:	e5 e8       	ldi	r30, 0x85	; 133
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	fb 87       	std	Y+11, r31	; 0x0b
    1218:	ea 87       	std	Y+10, r30	; 0x0a
    121a:	f7 e0       	ldi	r31, 0x07	; 7
    121c:	fc 87       	std	Y+12, r31	; 0x0c
    121e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1220:	fb 85       	ldd	r31, Y+11	; 0x0b
    1222:	00 80       	ld	r0, Z
    1224:	8a 85       	ldd	r24, Y+10	; 0x0a
    1226:	9b 85       	ldd	r25, Y+11	; 0x0b
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	9b 87       	std	Y+11, r25	; 0x0b
    122c:	8a 87       	std	Y+10, r24	; 0x0a
    122e:	e8 85       	ldd	r30, Y+8	; 0x08
    1230:	f9 85       	ldd	r31, Y+9	; 0x09
    1232:	00 82       	st	Z, r0
    1234:	88 85       	ldd	r24, Y+8	; 0x08
    1236:	99 85       	ldd	r25, Y+9	; 0x09
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	99 87       	std	Y+9, r25	; 0x09
    123c:	88 87       	std	Y+8, r24	; 0x08
    123e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1240:	91 50       	subi	r25, 0x01	; 1
    1242:	9c 87       	std	Y+12, r25	; 0x0c
    1244:	ec 85       	ldd	r30, Y+12	; 0x0c
    1246:	ee 23       	and	r30, r30
    1248:	51 f7       	brne	.-44     	; 0x121e <APP_passwordMismatchHandling_CTRL_MCU+0x28>

	g_mismatch++;
    124a:	80 91 95 00 	lds	r24, 0x0095
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	80 93 95 00 	sts	0x0095, r24

	/*	If the Wrong trials is equal to Max number of trial and Alarm is set ON */
	if(g_mismatch == MAX_NUM_OF_MISMATCH)
    1254:	80 91 95 00 	lds	r24, 0x0095
    1258:	83 30       	cpi	r24, 0x03	; 3
    125a:	91 f4       	brne	.+36     	; 0x1280 <APP_passwordMismatchHandling_CTRL_MCU+0x8a>
	{
		/*	Before Timer initialization we must clear the flag to know the effect of
		 *  Call back function
		 */
		g_timerHasFinishedCounting60seconds = FALSE ;
    125c:	10 92 93 00 	sts	0x0093, r1
		/*	Set the Call back Function */
		TIMER_setCallBackFunction(TIMER1 , APP_timer1_60sec_CallBackFunction_CTRL_MCU);
    1260:	29 e4       	ldi	r18, 0x49	; 73
    1262:	39 e0       	ldi	r19, 0x09	; 9
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	b9 01       	movw	r22, r18
    1268:	0e 94 38 16 	call	0x2c70	; 0x2c70 <TIMER_setCallBackFunction>
		/* Turn Alarm ON for 1 MIN */
		BUZZER_ON();
    126c:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_ON>
		/*	Timer1 ON */
		TIMER_init(&L_timerConfig60sec);
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TIMER_init>
		/*	Wait until 60 seconds passes */
		while(!g_timerHasFinishedCounting60seconds);
    1278:	80 91 93 00 	lds	r24, 0x0093
    127c:	88 23       	and	r24, r24
    127e:	e1 f3       	breq	.-8      	; 0x1278 <APP_passwordMismatchHandling_CTRL_MCU+0x82>

	}

}
    1280:	2c 96       	adiw	r28, 0x0c	; 12
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <APP_timer1_60sec_CallBackFunction_CTRL_MCU>:
 * Description :
 * This function is Called when Timer1 trigger interrupt. used when the timer
 * is set to count 60 seconds.
 */
void APP_timer1_60sec_CallBackFunction_CTRL_MCU(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	/*	Increment The Global which count the number of Interrupts */
	g_tick++;
    129a:	80 91 94 00 	lds	r24, 0x0094
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	80 93 94 00 	sts	0x0094, r24

	if(g_tick == NUMBER_OF_INTERRUPTS_TO_COUNT_60_SEC)
    12a4:	80 91 94 00 	lds	r24, 0x0094
    12a8:	88 30       	cpi	r24, 0x08	; 8
    12aa:	51 f4       	brne	.+20     	; 0x12c0 <APP_timer1_60sec_CallBackFunction_CTRL_MCU+0x2e>
	{
		g_timerHasFinishedCounting60seconds = TRUE;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 93 00 	sts	0x0093, r24

		/*	Turn OFF Timer 1*/
		TIMER_deInit(TIMER1);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <TIMER_deInit>

		/*	Turn OFF Buzzer */
		BUZZER_OFF();
    12b8:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_OFF>

		/*	Clear the number of Interrupts */
		g_tick = 0;
    12bc:	10 92 94 00 	sts	0x0094, r1
	}

}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <EXTERNAL_EEPROM_writeByte>:
 * It will return Error if any TWI operation has failed to be done.
 * All the function need the address of the place where you want to write in and
 * the data to be stored there.
 */
OperationState_EXTERNAL_EEPROM EXTERNAL_EEPROM_writeByte(uint16 a_memoryAddress , uint8 a_dataWritten)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <EXTERNAL_EEPROM_writeByte+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <EXTERNAL_EEPROM_writeByte+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	6b 83       	std	Y+3, r22	; 0x03
	 * [S] [1010 + 3 memory address + 0] [ACK] [ Reaming 8 bit of memory address] [ACK] [Data] [ACK OR NACK] [P]
     *	M              M			       S                   M 			        S     M	          S       M
	 */

	/*	We will start by  sending	the start condition	*/
	TWI_startCondition();
    12d8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <TWI_startCondition>
	/*	Check if the operation[Start condition] is done successfully , if not
	 *  return ERROR
	 */
	if(TWI_getStatus() != TWI_START)
    12dc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    12e0:	88 30       	cpi	r24, 0x08	; 8
    12e2:	19 f0       	breq	.+6      	; 0x12ea <EXTERNAL_EEPROM_writeByte+0x24>
	{
		return ERROR;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	2b c0       	rjmp	.+86     	; 0x1340 <EXTERNAL_EEPROM_writeByte+0x7a>

	/*	Write the constant ID of EEPROM 1010 then add the 8th , 9th ,10th bit in
	 *  the input Address then the LSB is the R/W bit and we are writing to it so
	 *  it will be 0 			 [1010 + 3 memory address + 0]
	 */
	TWI_writeByte((uint8) (0xA0  | ((a_memoryAddress & 0x0700) >> 7) ));
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	80 70       	andi	r24, 0x00	; 0
    12f0:	97 70       	andi	r25, 0x07	; 7
    12f2:	88 0f       	add	r24, r24
    12f4:	89 2f       	mov	r24, r25
    12f6:	88 1f       	adc	r24, r24
    12f8:	99 0b       	sbc	r25, r25
    12fa:	91 95       	neg	r25
    12fc:	80 6a       	ori	r24, 0xA0	; 160
    12fe:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing slave address and receive ACK + write bit]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_SL_ADD_W_ACK)
    1302:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1306:	88 31       	cpi	r24, 0x18	; 24
    1308:	19 f0       	breq	.+6      	; 0x1310 <EXTERNAL_EEPROM_writeByte+0x4a>
	{
		return ERROR;
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	8c 83       	std	Y+4, r24	; 0x04
    130e:	18 c0       	rjmp	.+48     	; 0x1340 <EXTERNAL_EEPROM_writeByte+0x7a>
	}


	/*	Write the reaming 8 bit address of Memory address. total address = 11 bit */
	TWI_writeByte((uint8) (a_memoryAddress));
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing data and receive ACK from slave]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_DATA_ACK)
    1316:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    131a:	88 32       	cpi	r24, 0x28	; 40
    131c:	19 f0       	breq	.+6      	; 0x1324 <EXTERNAL_EEPROM_writeByte+0x5e>
	{
		return ERROR;
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	8c 83       	std	Y+4, r24	; 0x04
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <EXTERNAL_EEPROM_writeByte+0x7a>
	}


	/*	Write the Data which will be written in External EEPROM */
	TWI_writeByte((uint8) (a_dataWritten));
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing data and receive ACK from slave]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_DATA_ACK)
    132a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    132e:	88 32       	cpi	r24, 0x28	; 40
    1330:	19 f0       	breq	.+6      	; 0x1338 <EXTERNAL_EEPROM_writeByte+0x72>
	{
		return ERROR;
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	8c 83       	std	Y+4, r24	; 0x04
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <EXTERNAL_EEPROM_writeByte+0x7a>
	}


	/*	We will Finish by sending	the Stop condition */
	TWI_stopCondition();
    1338:	0e 94 24 17 	call	0x2e48	; 0x2e48 <TWI_stopCondition>


	/*	If all the above code is executed successfully return success	*/
	return SUCCESS;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	8c 83       	std	Y+4, r24	; 0x04
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <EXTERNAL_EEPROM_readByte>:
 * It will return Error if any TWI operation has failed to be done.
 * All the function need the address of the place where you want to read from and
 * the Pointer value to save the data which is read form the memory.
 */
OperationState_EXTERNAL_EEPROM EXTERNAL_EEPROM_readByte(uint16 a_memoryAddress , uint8 *a_dataRead_Ptr)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <EXTERNAL_EEPROM_readByte+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <EXTERNAL_EEPROM_readByte+0x8>
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	7c 83       	std	Y+4, r23	; 0x04
    1364:	6b 83       	std	Y+3, r22	; 0x03
	 *						[S] [1010 + 3 memory address + 1] [ACK] [ Read Data] [NACK] [P]
	 *						 M             M                    S        S         M     M
	 */

	/*	We will start by  sending	the start condition	*/
	TWI_startCondition();
    1366:	0e 94 14 17 	call	0x2e28	; 0x2e28 <TWI_startCondition>
	/*	Check if the operation[Start condition] is done successfully , if not
	 *  return ERROR
	 */
	if(TWI_getStatus() != TWI_START)
    136a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	19 f0       	breq	.+6      	; 0x1378 <EXTERNAL_EEPROM_readByte+0x28>
	{
		return ERROR;
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	49 c0       	rjmp	.+146    	; 0x140a <EXTERNAL_EEPROM_readByte+0xba>

	/*	Write the constant ID of EEPROM 1010 then add the 8th , 9th ,10th bit in
	 *  the input Address then the LSB is the R/W bit and we are writing to it so
	 *   it will be 0 			 [1010 + 3 memory address + 0]
	 */
	TWI_writeByte((uint8) (0xA0  | ((a_memoryAddress & 0x0700) >> 7) ));
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	80 70       	andi	r24, 0x00	; 0
    137e:	97 70       	andi	r25, 0x07	; 7
    1380:	88 0f       	add	r24, r24
    1382:	89 2f       	mov	r24, r25
    1384:	88 1f       	adc	r24, r24
    1386:	99 0b       	sbc	r25, r25
    1388:	91 95       	neg	r25
    138a:	80 6a       	ori	r24, 0xA0	; 160
    138c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing slave address and receive ACK + write bit]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_SL_ADD_W_ACK)
    1390:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1394:	88 31       	cpi	r24, 0x18	; 24
    1396:	19 f0       	breq	.+6      	; 0x139e <EXTERNAL_EEPROM_readByte+0x4e>
	{
		return ERROR;
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	36 c0       	rjmp	.+108    	; 0x140a <EXTERNAL_EEPROM_readByte+0xba>
	}


	/*	Write the reaming 8 bit address of Memory address. total address = 11 bit */
	TWI_writeByte((uint8) (a_memoryAddress));
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
		/*	Check if the operation[Writing writing data and receive ACK from slave]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_DATA_ACK)
    13a4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    13a8:	88 32       	cpi	r24, 0x28	; 40
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <EXTERNAL_EEPROM_readByte+0x62>
	{
		return ERROR;
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	8d 83       	std	Y+5, r24	; 0x05
    13b0:	2c c0       	rjmp	.+88     	; 0x140a <EXTERNAL_EEPROM_readByte+0xba>
	}

	/*	We will Restart by  sending	the start condition	*/
	TWI_startCondition();
    13b2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <TWI_startCondition>
	/*	Check if the operation[Restart condition] is done successfully , if not
	 *  return ERROR
	 */
	if(TWI_getStatus() != TWI_REP_START)
    13b6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    13ba:	80 31       	cpi	r24, 0x10	; 16
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <EXTERNAL_EEPROM_readByte+0x74>
	{
		return ERROR;
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	23 c0       	rjmp	.+70     	; 0x140a <EXTERNAL_EEPROM_readByte+0xba>

	/*	Write the constant ID of EEPROM 1010 then add the 8th , 9th ,10th bit in
	 *  the input Address then the LSB is the R/W bit and we are reading from it
	 *  so it will  be 0 			 [1010 + 3 memory address + 1]
	 */
	TWI_writeByte((uint8) (0xA0  | ((a_memoryAddress & 0x0700) >> 7) | 1 ));
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	80 70       	andi	r24, 0x00	; 0
    13ca:	97 70       	andi	r25, 0x07	; 7
    13cc:	88 0f       	add	r24, r24
    13ce:	89 2f       	mov	r24, r25
    13d0:	88 1f       	adc	r24, r24
    13d2:	99 0b       	sbc	r25, r25
    13d4:	91 95       	neg	r25
    13d6:	81 6a       	ori	r24, 0xA1	; 161
    13d8:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
		/*	Check if the operation[Writing writing slave address and receive ACK + read bit]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_SL_ADD_R_ACK)
    13dc:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    13e0:	80 34       	cpi	r24, 0x40	; 64
    13e2:	19 f0       	breq	.+6      	; 0x13ea <EXTERNAL_EEPROM_readByte+0x9a>
	{
		return ERROR;
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	10 c0       	rjmp	.+32     	; 0x140a <EXTERNAL_EEPROM_readByte+0xba>
	}


	/*	Save the value read from memory in parameter pointer */
	*a_dataRead_Ptr = TWI_readByteWithNACK();
    13ea:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <TWI_readByteWithNACK>
    13ee:	eb 81       	ldd	r30, Y+3	; 0x03
    13f0:	fc 81       	ldd	r31, Y+4	; 0x04
    13f2:	80 83       	st	Z, r24
	/*	Check if the operation[reading from the EEPROM + receive NACK from master]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_R_DATA_NACK)
    13f4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    13f8:	88 35       	cpi	r24, 0x58	; 88
    13fa:	19 f0       	breq	.+6      	; 0x1402 <EXTERNAL_EEPROM_readByte+0xb2>
	{
		return ERROR;
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	04 c0       	rjmp	.+8      	; 0x140a <EXTERNAL_EEPROM_readByte+0xba>
	}


	/*	We will Finish by sending	the Stop condition */
	TWI_stopCondition();
    1402:	0e 94 24 17 	call	0x2e48	; 0x2e48 <TWI_stopCondition>


	/*	If all the above code is executed successfully return success	*/
	return SUCCESS;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <EXTERNAL_EEPROM_writeArrayOfBytes>:
 * It will return Error if any TWI operation has failed to be done.
 * All the function is need the starting address of Array and the array itself
 * to be stored and the size of the array
 */
OperationState_EXTERNAL_EEPROM EXTERNAL_EEPROM_writeArrayOfBytes(uint16 a_memoryAddress ,const uint8 *a_arr, uint8 a_arrSize)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	27 97       	sbiw	r28, 0x07	; 7
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	9b 83       	std	Y+3, r25	; 0x03
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	7d 83       	std	Y+5, r23	; 0x05
    1436:	6c 83       	std	Y+4, r22	; 0x04
    1438:	4e 83       	std	Y+6, r20	; 0x06
     *	Then send the Stop bit :  [P]
     *							   M
	 */

	/*	We will start by  sending	the start condition	*/
	TWI_startCondition();
    143a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <TWI_startCondition>
	/*	Check if the operation[Start condition] is done successfully , if not
	 *  return ERROR
	 */
	if(TWI_getStatus() != TWI_START)
    143e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	19 f0       	breq	.+6      	; 0x144c <EXTERNAL_EEPROM_writeArrayOfBytes+0x30>
	{
		return ERROR;
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	8f 83       	std	Y+7, r24	; 0x07
    144a:	3c c0       	rjmp	.+120    	; 0x14c4 <EXTERNAL_EEPROM_writeArrayOfBytes+0xa8>

	/*	Write the constant ID of EEPROM 1010 then add the 8th , 9th ,10th bit in
	 *  the input Address then the LSB is the R/W bit and we are writing to it so
	 *  it will be 0 			 [1010 + 3 memory address + 0]
	 */
	TWI_writeByte((uint8) (0xA0  | ((a_memoryAddress & 0x0700) >> 7) ));
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	80 70       	andi	r24, 0x00	; 0
    1452:	97 70       	andi	r25, 0x07	; 7
    1454:	88 0f       	add	r24, r24
    1456:	89 2f       	mov	r24, r25
    1458:	88 1f       	adc	r24, r24
    145a:	99 0b       	sbc	r25, r25
    145c:	91 95       	neg	r25
    145e:	80 6a       	ori	r24, 0xA0	; 160
    1460:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing slave address and receive ACK + write bit]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_SL_ADD_W_ACK)
    1464:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1468:	88 31       	cpi	r24, 0x18	; 24
    146a:	19 f0       	breq	.+6      	; 0x1472 <EXTERNAL_EEPROM_writeArrayOfBytes+0x56>
	{
		return ERROR;
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	8f 83       	std	Y+7, r24	; 0x07
    1470:	29 c0       	rjmp	.+82     	; 0x14c4 <EXTERNAL_EEPROM_writeArrayOfBytes+0xa8>
	}


	/*	Write the reaming 8 bit address of Memory address. total address = 11 bit */
	TWI_writeByte((uint8) (a_memoryAddress));
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing data and receive ACK from slave]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_DATA_ACK)
    1478:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    147c:	88 32       	cpi	r24, 0x28	; 40
    147e:	19 f0       	breq	.+6      	; 0x1486 <EXTERNAL_EEPROM_writeArrayOfBytes+0x6a>
	{
		return ERROR;
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	8f 83       	std	Y+7, r24	; 0x07
    1484:	1f c0       	rjmp	.+62     	; 0x14c4 <EXTERNAL_EEPROM_writeArrayOfBytes+0xa8>
	}

	/*	We will Loop with the array size and save each byte of the input array
	 *  in the EEPROM
	 */
	for(i = 0 ; i<a_arrSize ; i++)
    1486:	19 82       	std	Y+1, r1	; 0x01
    1488:	15 c0       	rjmp	.+42     	; 0x14b4 <EXTERNAL_EEPROM_writeArrayOfBytes+0x98>
	{
		/*	Write consecutive bytes form the array in External EEPROM */
		TWI_writeByte((uint8) (a_arr[i]));
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	fc 01       	movw	r30, r24
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	80 81       	ld	r24, Z
    149c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
		/*	Check if the operation[Writing writing data and receive ACK from slave]
		 *  is done successfully , if not  return ERROR
		 */
		if(TWI_getStatus() != TWI_M_T_DATA_ACK)
    14a0:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    14a4:	88 32       	cpi	r24, 0x28	; 40
    14a6:	19 f0       	breq	.+6      	; 0x14ae <EXTERNAL_EEPROM_writeArrayOfBytes+0x92>
		{
			return ERROR;
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	8f 83       	std	Y+7, r24	; 0x07
    14ac:	0b c0       	rjmp	.+22     	; 0x14c4 <EXTERNAL_EEPROM_writeArrayOfBytes+0xa8>
	}

	/*	We will Loop with the array size and save each byte of the input array
	 *  in the EEPROM
	 */
	for(i = 0 ; i<a_arrSize ; i++)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	99 81       	ldd	r25, Y+1	; 0x01
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	98 17       	cp	r25, r24
    14ba:	38 f3       	brcs	.-50     	; 0x148a <EXTERNAL_EEPROM_writeArrayOfBytes+0x6e>
			return ERROR;
		}
	}

	/*	We will Finish by sending	the Stop condition */
	TWI_stopCondition();
    14bc:	0e 94 24 17 	call	0x2e48	; 0x2e48 <TWI_stopCondition>


	/*	If all the above code is executed successfully return success	*/
	return SUCCESS;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	8f 83       	std	Y+7, r24	; 0x07
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07

}
    14c6:	27 96       	adiw	r28, 0x07	; 7
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <EXTERNAL_EEPROM_readArrayOfBytes>:
 * It will return Error if any TWI operation has failed to be done.
 * All the function is need the starting address of Array stored in EEPROM and
 *  the array to save in it the array in EEPROM and the size of the array
 */
OperationState_EXTERNAL_EEPROM EXTERNAL_EEPROM_readArrayOfBytes(uint16 a_memoryAddress ,uint8 *a_readArray , uint8 a_arrSize)
{
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	27 97       	sbiw	r28, 0x07	; 7
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	9b 83       	std	Y+3, r25	; 0x03
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	7d 83       	std	Y+5, r23	; 0x05
    14f6:	6c 83       	std	Y+4, r22	; 0x04
    14f8:	4e 83       	std	Y+6, r20	; 0x06
	 *	Send Stop bit : 	[P]
	 *					     M
	 */

	/*	We will start by  sending	the start condition	*/
	TWI_startCondition();
    14fa:	0e 94 14 17 	call	0x2e28	; 0x2e28 <TWI_startCondition>
	/*	Check if the operation[Start condition] is done successfully , if not
	 *  return ERROR
	 */
	if(TWI_getStatus() != TWI_START)
    14fe:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	19 f0       	breq	.+6      	; 0x150c <EXTERNAL_EEPROM_readArrayOfBytes+0x34>
	{
		return ERROR;
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	8f 83       	std	Y+7, r24	; 0x07
    150a:	72 c0       	rjmp	.+228    	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>

	/*	Write the constant ID of EEPROM 1010 then add the 8th , 9th ,10th bit in
	 *  the input Address then the LSB is the R/W bit and we are writing to it so
	 *   it will be 0 			 [1010 + 3 memory address + 0]
	 */
	TWI_writeByte((uint8) (0xA0  | ((a_memoryAddress & 0x0700) >> 7) ));
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	80 70       	andi	r24, 0x00	; 0
    1512:	97 70       	andi	r25, 0x07	; 7
    1514:	88 0f       	add	r24, r24
    1516:	89 2f       	mov	r24, r25
    1518:	88 1f       	adc	r24, r24
    151a:	99 0b       	sbc	r25, r25
    151c:	91 95       	neg	r25
    151e:	80 6a       	ori	r24, 0xA0	; 160
    1520:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
	/*	Check if the operation[Writing writing slave address and receive ACK + write bit]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_SL_ADD_W_ACK)
    1524:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1528:	88 31       	cpi	r24, 0x18	; 24
    152a:	19 f0       	breq	.+6      	; 0x1532 <EXTERNAL_EEPROM_readArrayOfBytes+0x5a>
	{
		return ERROR;
    152c:	ef ef       	ldi	r30, 0xFF	; 255
    152e:	ef 83       	std	Y+7, r30	; 0x07
    1530:	5f c0       	rjmp	.+190    	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>
	}


	/*	Write the reaming 8 bit address of Memory address. total address = 11 bit */
	TWI_writeByte((uint8) (a_memoryAddress));
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
		/*	Check if the operation[Writing writing data and receive ACK from slave]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_DATA_ACK)
    1538:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    153c:	88 32       	cpi	r24, 0x28	; 40
    153e:	19 f0       	breq	.+6      	; 0x1546 <EXTERNAL_EEPROM_readArrayOfBytes+0x6e>
	{
		return ERROR;
    1540:	ff ef       	ldi	r31, 0xFF	; 255
    1542:	ff 83       	std	Y+7, r31	; 0x07
    1544:	55 c0       	rjmp	.+170    	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>
	}

	/*	We will Restart by  sending	the start condition	*/
	TWI_startCondition();
    1546:	0e 94 14 17 	call	0x2e28	; 0x2e28 <TWI_startCondition>
	/*	Check if the operation[Restart condition] is done successfully , if not
	 *  return ERROR
	 */
	if(TWI_getStatus() != TWI_REP_START)
    154a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    154e:	80 31       	cpi	r24, 0x10	; 16
    1550:	19 f0       	breq	.+6      	; 0x1558 <EXTERNAL_EEPROM_readArrayOfBytes+0x80>
	{
		return ERROR;
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	8f 83       	std	Y+7, r24	; 0x07
    1556:	4c c0       	rjmp	.+152    	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>

	/*	Write the constant ID of EEPROM 1010 then add the 8th , 9th ,10th bit in
	 *  the input Address then the LSB is the R/W bit and we are reading from it
	 *  so it will  be 0 			 [1010 + 3 memory address + 1]
	 */
	TWI_writeByte((uint8) (0xA0  | ((a_memoryAddress & 0x0700) >> 7) | 1 ));
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	80 70       	andi	r24, 0x00	; 0
    155e:	97 70       	andi	r25, 0x07	; 7
    1560:	88 0f       	add	r24, r24
    1562:	89 2f       	mov	r24, r25
    1564:	88 1f       	adc	r24, r24
    1566:	99 0b       	sbc	r25, r25
    1568:	91 95       	neg	r25
    156a:	81 6a       	ori	r24, 0xA1	; 161
    156c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <TWI_writeByte>
		/*	Check if the operation[Writing writing slave address and receive ACK + read bit]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_T_SL_ADD_R_ACK)
    1570:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    1574:	80 34       	cpi	r24, 0x40	; 64
    1576:	19 f0       	breq	.+6      	; 0x157e <EXTERNAL_EEPROM_readArrayOfBytes+0xa6>
	{
		return ERROR;
    1578:	ef ef       	ldi	r30, 0xFF	; 255
    157a:	ef 83       	std	Y+7, r30	; 0x07
    157c:	39 c0       	rjmp	.+114    	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>
	}

	/*	We will Loop with the array size -1 and save each byte from EEPROM to the
	 *  input array and each time we will send ACK , The last byte will be send alone.
	 */
	for(i=0 ; i < a_arrSize -1 ; i++)
    157e:	19 82       	std	Y+1, r1	; 0x01
    1580:	16 c0       	rjmp	.+44     	; 0x15ae <EXTERNAL_EEPROM_readArrayOfBytes+0xd6>
	{
		/*	Save the value read from memory in input array */
		a_readArray[i] = TWI_readByteWithACK();
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	8c 01       	movw	r16, r24
    158e:	02 0f       	add	r16, r18
    1590:	13 1f       	adc	r17, r19
    1592:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <TWI_readByteWithACK>
    1596:	f8 01       	movw	r30, r16
    1598:	80 83       	st	Z, r24
		/*	Check if the operation[reading from the EEPROM + receive ACK from master]
		 *  is done successfully , if not  return ERROR
		 */
		if(TWI_getStatus() != TWI_M_R_DATA_ACK)
    159a:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    159e:	80 35       	cpi	r24, 0x50	; 80
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <EXTERNAL_EEPROM_readArrayOfBytes+0xd0>
		{
			return ERROR;
    15a2:	ff ef       	ldi	r31, 0xFF	; 255
    15a4:	ff 83       	std	Y+7, r31	; 0x07
    15a6:	24 c0       	rjmp	.+72     	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>
	}

	/*	We will Loop with the array size -1 and save each byte from EEPROM to the
	 *  input array and each time we will send ACK , The last byte will be send alone.
	 */
	for(i=0 ; i < a_arrSize -1 ; i++)
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	8f 5f       	subi	r24, 0xFF	; 255
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	8e 81       	ldd	r24, Y+6	; 0x06
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	28 17       	cp	r18, r24
    15be:	39 07       	cpc	r19, r25
    15c0:	04 f3       	brlt	.-64     	; 0x1582 <EXTERNAL_EEPROM_readArrayOfBytes+0xaa>
	}

	/*	The last byte of the array will be read alone so that the master will send
	 *  NACK not ACK like all the previous bytes
	 */
	a_readArray[i] = TWI_readByteWithNACK();
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	8c 01       	movw	r16, r24
    15ce:	02 0f       	add	r16, r18
    15d0:	13 1f       	adc	r17, r19
    15d2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <TWI_readByteWithNACK>
    15d6:	f8 01       	movw	r30, r16
    15d8:	80 83       	st	Z, r24
	/*	Check if the operation[reading from the EEPROM + receive NACK from master]
	 *  is done successfully , if not  return ERROR
	 */
	if(TWI_getStatus() != TWI_M_R_DATA_NACK)
    15da:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TWI_getStatus>
    15de:	88 35       	cpi	r24, 0x58	; 88
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <EXTERNAL_EEPROM_readArrayOfBytes+0x110>
	{
		return ERROR;
    15e2:	ff ef       	ldi	r31, 0xFF	; 255
    15e4:	ff 83       	std	Y+7, r31	; 0x07
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <EXTERNAL_EEPROM_readArrayOfBytes+0x118>
	}


	/*	We will Finish by sending	the Stop condition */
	TWI_stopCondition();
    15e8:	0e 94 24 17 	call	0x2e48	; 0x2e48 <TWI_stopCondition>


	/*	If all the above code is executed successfully return success	*/
	return SUCCESS;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	8f 83       	std	Y+7, r24	; 0x07
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07

}
    15f2:	27 96       	adiw	r28, 0x07	; 7
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <GPIO_setupPinDirection>:
 *
 * If the input port number or pin number are not correct, The function will
 * not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portNumber ,uint8 a_pinNumber ,PinDirectionType a_direction)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <GPIO_setupPinDirection+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <GPIO_setupPinDirection+0x8>
    1610:	0f 92       	push	r0
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02
    161a:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 *  If the input port number or pin number are not correct, The function will
	 *  not handle the request.
	 */
	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ) )
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	08 f0       	brcs	.+2      	; 0x1624 <GPIO_setupPinDirection+0x1c>
    1622:	d5 c0       	rjmp	.+426    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	08 f0       	brcs	.+2      	; 0x162c <GPIO_setupPinDirection+0x24>
    162a:	d1 c0       	rjmp	.+418    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
		/*	Do nothing	*/
	}
	else
	{
		/*	set the pin direction as input or output	*/
		switch(a_portNumber)
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3d 83       	std	Y+5, r19	; 0x05
    1634:	2c 83       	std	Y+4, r18	; 0x04
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <GPIO_setupPinDirection+0x3a>
    1640:	43 c0       	rjmp	.+134    	; 0x16c8 <GPIO_setupPinDirection+0xc0>
    1642:	2c 81       	ldd	r18, Y+4	; 0x04
    1644:	3d 81       	ldd	r19, Y+5	; 0x05
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	2c f4       	brge	.+10     	; 0x1656 <GPIO_setupPinDirection+0x4e>
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	71 f0       	breq	.+28     	; 0x1670 <GPIO_setupPinDirection+0x68>
    1654:	bc c0       	rjmp	.+376    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	3d 81       	ldd	r19, Y+5	; 0x05
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <GPIO_setupPinDirection+0x5a>
    1660:	5f c0       	rjmp	.+190    	; 0x1720 <GPIO_setupPinDirection+0x118>
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <GPIO_setupPinDirection+0x66>
    166c:	85 c0       	rjmp	.+266    	; 0x1778 <GPIO_setupPinDirection+0x170>
    166e:	af c0       	rjmp	.+350    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_INPUT)
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	88 23       	and	r24, r24
    1674:	a9 f4       	brne	.+42     	; 0x16a0 <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,a_pinNumber);
    1676:	aa e3       	ldi	r26, 0x3A	; 58
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	ea e3       	ldi	r30, 0x3A	; 58
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_setupPinDirection+0x8c>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_setupPinDirection+0x88>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	97 c0       	rjmp	.+302    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,a_pinNumber);
    16a0:	aa e3       	ldi	r26, 0x3A	; 58
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ea e3       	ldi	r30, 0x3A	; 58
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_setupPinDirection+0xb6>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_setupPinDirection+0xb2>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	83 c0       	rjmp	.+262    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_direction == PIN_INPUT)
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 23       	and	r24, r24
    16cc:	a9 f4       	brne	.+42     	; 0x16f8 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,a_pinNumber);
    16ce:	a7 e3       	ldi	r26, 0x37	; 55
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e7 e3       	ldi	r30, 0x37	; 55
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_setupPinDirection+0xe4>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_setupPinDirection+0xe0>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	6b c0       	rjmp	.+214    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,a_pinNumber);
    16f8:	a7 e3       	ldi	r26, 0x37	; 55
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e7 e3       	ldi	r30, 0x37	; 55
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_setupPinDirection+0x10e>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_setupPinDirection+0x10a>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	57 c0       	rjmp	.+174    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_direction == PIN_INPUT)
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 23       	and	r24, r24
    1724:	a9 f4       	brne	.+42     	; 0x1750 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,a_pinNumber);
    1726:	a4 e3       	ldi	r26, 0x34	; 52
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e4 e3       	ldi	r30, 0x34	; 52
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_setupPinDirection+0x13c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_setupPinDirection+0x138>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,a_pinNumber);
    1750:	a4 e3       	ldi	r26, 0x34	; 52
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e4 e3       	ldi	r30, 0x34	; 52
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_setupPinDirection+0x166>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_setupPinDirection+0x162>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	2b c0       	rjmp	.+86     	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_direction == PIN_INPUT)
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 23       	and	r24, r24
    177c:	a9 f4       	brne	.+42     	; 0x17a8 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,a_pinNumber);
    177e:	a1 e3       	ldi	r26, 0x31	; 49
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e1 e3       	ldi	r30, 0x31	; 49
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_setupPinDirection+0x194>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_setupPinDirection+0x190>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	13 c0       	rjmp	.+38     	; 0x17ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,a_pinNumber);
    17a8:	a1 e3       	ldi	r26, 0x31	; 49
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_setupPinDirection+0x1be>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_setupPinDirection+0x1ba>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <GPIO_writePin>:
 * not handle the request.
 * IF the value is not Logic High or Logic Low the function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 a_portNumber ,uint8 a_pinNumber ,uint8 a_value)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <GPIO_writePin+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <GPIO_writePin+0x8>
    17e6:	0f 92       	push	r0
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	6a 83       	std	Y+2, r22	; 0x02
    17f0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 *  If the input port number or pin number are not correct, The function will
	 *  not handle the request.
	 *  IF the value is not Logic High or Logic Low the function will not handle the request
	 */
	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ) || (a_value > 1))
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <GPIO_writePin+0x1c>
    17f8:	d9 c0       	rjmp	.+434    	; 0x19ac <GPIO_writePin+0x1ce>
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 30       	cpi	r24, 0x08	; 8
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <GPIO_writePin+0x24>
    1800:	d5 c0       	rjmp	.+426    	; 0x19ac <GPIO_writePin+0x1ce>
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	08 f0       	brcs	.+2      	; 0x180a <GPIO_writePin+0x2c>
    1808:	d1 c0       	rjmp	.+418    	; 0x19ac <GPIO_writePin+0x1ce>
		/*	Do nothing	*/
	}
	else
	{
		/*	Writes 1 or 0  in the pin	*/
		switch(a_portNumber)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3d 83       	std	Y+5, r19	; 0x05
    1812:	2c 83       	std	Y+4, r18	; 0x04
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <GPIO_writePin+0x42>
    181e:	43 c0       	rjmp	.+134    	; 0x18a6 <GPIO_writePin+0xc8>
    1820:	2c 81       	ldd	r18, Y+4	; 0x04
    1822:	3d 81       	ldd	r19, Y+5	; 0x05
    1824:	22 30       	cpi	r18, 0x02	; 2
    1826:	31 05       	cpc	r19, r1
    1828:	2c f4       	brge	.+10     	; 0x1834 <GPIO_writePin+0x56>
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	71 f0       	breq	.+28     	; 0x184e <GPIO_writePin+0x70>
    1832:	bc c0       	rjmp	.+376    	; 0x19ac <GPIO_writePin+0x1ce>
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	3d 81       	ldd	r19, Y+5	; 0x05
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <GPIO_writePin+0x62>
    183e:	5f c0       	rjmp	.+190    	; 0x18fe <GPIO_writePin+0x120>
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <GPIO_writePin+0x6e>
    184a:	85 c0       	rjmp	.+266    	; 0x1956 <GPIO_writePin+0x178>
    184c:	af c0       	rjmp	.+350    	; 0x19ac <GPIO_writePin+0x1ce>
		{
		case PORTA_ID:
			if(a_value == LOGIC_LOW)
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	88 23       	and	r24, r24
    1852:	a9 f4       	brne	.+42     	; 0x187e <GPIO_writePin+0xa0>
			{
				CLEAR_BIT(PORTA,a_pinNumber);
    1854:	ab e3       	ldi	r26, 0x3B	; 59
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	eb e3       	ldi	r30, 0x3B	; 59
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GPIO_writePin+0x94>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <GPIO_writePin+0x90>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	97 c0       	rjmp	.+302    	; 0x19ac <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTA,a_pinNumber);
    187e:	ab e3       	ldi	r26, 0x3B	; 59
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	eb e3       	ldi	r30, 0x3B	; 59
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_writePin+0xbe>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_writePin+0xba>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	83 c0       	rjmp	.+262    	; 0x19ac <GPIO_writePin+0x1ce>
			}
			break;

		case PORTB_ID:
			if(a_value == LOGIC_LOW)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	88 23       	and	r24, r24
    18aa:	a9 f4       	brne	.+42     	; 0x18d6 <GPIO_writePin+0xf8>
			{
				CLEAR_BIT(PORTB,a_pinNumber);
    18ac:	a8 e3       	ldi	r26, 0x38	; 56
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e8 e3       	ldi	r30, 0x38	; 56
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_writePin+0xec>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_writePin+0xe8>
    18ce:	80 95       	com	r24
    18d0:	84 23       	and	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	6b c0       	rjmp	.+214    	; 0x19ac <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTB,a_pinNumber);
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <GPIO_writePin+0x116>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <GPIO_writePin+0x112>
    18f8:	84 2b       	or	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	57 c0       	rjmp	.+174    	; 0x19ac <GPIO_writePin+0x1ce>
			}
			break;

		case PORTC_ID:
			if(a_value == LOGIC_LOW)
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 23       	and	r24, r24
    1902:	a9 f4       	brne	.+42     	; 0x192e <GPIO_writePin+0x150>
			{
				CLEAR_BIT(PORTC,a_pinNumber);
    1904:	a5 e3       	ldi	r26, 0x35	; 53
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e5 e3       	ldi	r30, 0x35	; 53
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_writePin+0x144>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_writePin+0x140>
    1926:	80 95       	com	r24
    1928:	84 23       	and	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	3f c0       	rjmp	.+126    	; 0x19ac <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTC,a_pinNumber);
    192e:	a5 e3       	ldi	r26, 0x35	; 53
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e3       	ldi	r30, 0x35	; 53
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <GPIO_writePin+0x16e>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <GPIO_writePin+0x16a>
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	2b c0       	rjmp	.+86     	; 0x19ac <GPIO_writePin+0x1ce>
			}
			break;

		case PORTD_ID:
			if(a_value == LOGIC_LOW)
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	88 23       	and	r24, r24
    195a:	a9 f4       	brne	.+42     	; 0x1986 <GPIO_writePin+0x1a8>
			{
				CLEAR_BIT(PORTD,a_pinNumber);
    195c:	a2 e3       	ldi	r26, 0x32	; 50
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e2 e3       	ldi	r30, 0x32	; 50
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <GPIO_writePin+0x19c>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <GPIO_writePin+0x198>
    197e:	80 95       	com	r24
    1980:	84 23       	and	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	13 c0       	rjmp	.+38     	; 0x19ac <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTD,a_pinNumber);
    1986:	a2 e3       	ldi	r26, 0x32	; 50
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e2 e3       	ldi	r30, 0x32	; 50
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <GPIO_writePin+0x1c6>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <GPIO_writePin+0x1c2>
    19a8:	84 2b       	or	r24, r20
    19aa:	8c 93       	st	X, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <GPIO_readPin>:
 *
 * If the input port number or pin number are not correct, The function will
 * return LOGIC_LOW.
 */
uint8 GPIO_readPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <GPIO_readPin+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <GPIO_readPin+0x8>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	8a 83       	std	Y+2, r24	; 0x02
    19cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 L_pinValue = LOGIC_LOW;
    19ce:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * If the input port number or pin number are not correct, The function will
	 * not handle the request.
     */

	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ))
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <GPIO_readPin+0x1c>
    19d6:	84 c0       	rjmp	.+264    	; 0x1ae0 <GPIO_readPin+0x124>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 30       	cpi	r24, 0x08	; 8
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <GPIO_readPin+0x24>
    19de:	80 c0       	rjmp	.+256    	; 0x1ae0 <GPIO_readPin+0x124>
		/*	Do nothing	*/
	}
	else
	{
		/*	 Read the value of a specific pin if it is Logic High or Logic Low.	*/
		switch(a_portNumber)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3d 83       	std	Y+5, r19	; 0x05
    19e8:	2c 83       	std	Y+4, r18	; 0x04
    19ea:	4c 81       	ldd	r20, Y+4	; 0x04
    19ec:	5d 81       	ldd	r21, Y+5	; 0x05
    19ee:	41 30       	cpi	r20, 0x01	; 1
    19f0:	51 05       	cpc	r21, r1
    19f2:	79 f1       	breq	.+94     	; 0x1a52 <GPIO_readPin+0x96>
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	34 f4       	brge	.+12     	; 0x1a0a <GPIO_readPin+0x4e>
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	3d 81       	ldd	r19, Y+5	; 0x05
    1a02:	21 15       	cp	r18, r1
    1a04:	31 05       	cpc	r19, r1
    1a06:	69 f0       	breq	.+26     	; 0x1a22 <GPIO_readPin+0x66>
    1a08:	6b c0       	rjmp	.+214    	; 0x1ae0 <GPIO_readPin+0x124>
    1a0a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a0c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a0e:	42 30       	cpi	r20, 0x02	; 2
    1a10:	51 05       	cpc	r21, r1
    1a12:	b9 f1       	breq	.+110    	; 0x1a82 <GPIO_readPin+0xc6>
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	9d 81       	ldd	r25, Y+5	; 0x05
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <GPIO_readPin+0x64>
    1a1e:	49 c0       	rjmp	.+146    	; 0x1ab2 <GPIO_readPin+0xf6>
    1a20:	5f c0       	rjmp	.+190    	; 0x1ae0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,a_pinNumber) )
    1a22:	e9 e3       	ldi	r30, 0x39	; 57
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a9 01       	movw	r20, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <GPIO_readPin+0x7e>
    1a36:	55 95       	asr	r21
    1a38:	47 95       	ror	r20
    1a3a:	8a 95       	dec	r24
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <GPIO_readPin+0x7a>
    1a3e:	ca 01       	movw	r24, r20
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	88 23       	and	r24, r24
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <GPIO_readPin+0x92>
			{
				L_pinValue = LOGIC_HIGH;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	49 c0       	rjmp	.+146    	; 0x1ae0 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
    1a50:	47 c0       	rjmp	.+142    	; 0x1ae0 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB,a_pinNumber) )
    1a52:	e6 e3       	ldi	r30, 0x36	; 54
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <GPIO_readPin+0xae>
    1a66:	55 95       	asr	r21
    1a68:	47 95       	ror	r20
    1a6a:	8a 95       	dec	r24
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <GPIO_readPin+0xaa>
    1a6e:	ca 01       	movw	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	88 23       	and	r24, r24
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <GPIO_readPin+0xc2>
			{
				L_pinValue = LOGIC_HIGH;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	31 c0       	rjmp	.+98     	; 0x1ae0 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1a7e:	19 82       	std	Y+1, r1	; 0x01
    1a80:	2f c0       	rjmp	.+94     	; 0x1ae0 <GPIO_readPin+0x124>
			}			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC,a_pinNumber) )
    1a82:	e3 e3       	ldi	r30, 0x33	; 51
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_readPin+0xde>
    1a96:	55 95       	asr	r21
    1a98:	47 95       	ror	r20
    1a9a:	8a 95       	dec	r24
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_readPin+0xda>
    1a9e:	ca 01       	movw	r24, r20
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	90 70       	andi	r25, 0x00	; 0
    1aa4:	88 23       	and	r24, r24
    1aa6:	19 f0       	breq	.+6      	; 0x1aae <GPIO_readPin+0xf2>
			{
				L_pinValue = LOGIC_HIGH;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	19 c0       	rjmp	.+50     	; 0x1ae0 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	17 c0       	rjmp	.+46     	; 0x1ae0 <GPIO_readPin+0x124>
			}
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND,a_pinNumber) )
    1ab2:	e0 e3       	ldi	r30, 0x30	; 48
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_readPin+0x10e>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_readPin+0x10a>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	90 70       	andi	r25, 0x00	; 0
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <GPIO_readPin+0x122>
			{
				L_pinValue = LOGIC_HIGH;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1ade:	19 82       	std	Y+1, r1	; 0x01
		default:
			/*	Do Nothing	*/
			break;
		}
	}
	return L_pinValue;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <GPIO_setupPortDirection>:
 *  direction will be set.
 *
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 a_portNumber ,PortDirectionType a_direction)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <GPIO_setupPortDirection+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <GPIO_setupPortDirection+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	6a 83       	std	Y+2, r22	; 0x02

	/*	If the input port number is greater than NUM_OF_PORTS  The function will
	 * not handle the request.   */
	if( a_portNumber >= NUM_OF_PORTS )
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	84 30       	cpi	r24, 0x04	; 4
    1b06:	90 f5       	brcc	.+100    	; 0x1b6c <GPIO_setupPortDirection+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/*	set the direction of all pins of a specific port */
		switch(a_portNumber)
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3c 83       	std	Y+4, r19	; 0x04
    1b10:	2b 83       	std	Y+3, r18	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	91 05       	cpc	r25, r1
    1b1a:	d1 f0       	breq	.+52     	; 0x1b50 <GPIO_setupPortDirection+0x5e>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <GPIO_setupPortDirection+0x3e>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <GPIO_setupPortDirection+0x54>
    1b2e:	1e c0       	rjmp	.+60     	; 0x1b6c <GPIO_setupPortDirection+0x7a>
    1b30:	2b 81       	ldd	r18, Y+3	; 0x03
    1b32:	3c 81       	ldd	r19, Y+4	; 0x04
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	81 f0       	breq	.+32     	; 0x1b5a <GPIO_setupPortDirection+0x68>
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	91 05       	cpc	r25, r1
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <GPIO_setupPortDirection+0x72>
    1b44:	13 c0       	rjmp	.+38     	; 0x1b6c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = a_direction;
    1b46:	ea e3       	ldi	r30, 0x3A	; 58
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	80 83       	st	Z, r24
    1b4e:	0e c0       	rjmp	.+28     	; 0x1b6c <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID:
			DDRB = a_direction;
    1b50:	e7 e3       	ldi	r30, 0x37	; 55
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	80 83       	st	Z, r24
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID:
			DDRC = a_direction;
    1b5a:	e4 e3       	ldi	r30, 0x34	; 52
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	80 83       	st	Z, r24
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID:
			DDRD = a_direction;
    1b64:	e1 e3       	ldi	r30, 0x31	; 49
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	80 83       	st	Z, r24
			/*	Do Nothing	*/
			break;
		}
	}

}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <GPIO_writePort>:
 * If the port direction is input it activate/deactivate the internal Pull-Up resistor.
 *
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 a_portNumber ,uint8 a_value)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <GPIO_writePort+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <GPIO_writePort+0x8>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	6a 83       	std	Y+2, r22	; 0x02

	/*	If the input port number  is greater than NUM_OF_PORTS The function will
	 * not handle the request.
	 */
	if( a_portNumber >= NUM_OF_PORTS )
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	84 30       	cpi	r24, 0x04	; 4
    1b8e:	90 f5       	brcc	.+100    	; 0x1bf4 <GPIO_writePort+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/* Write the port value as required */
		switch(a_portNumber)
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	3c 83       	std	Y+4, r19	; 0x04
    1b98:	2b 83       	std	Y+3, r18	; 0x03
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	d1 f0       	breq	.+52     	; 0x1bd8 <GPIO_writePort+0x5e>
    1ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba8:	22 30       	cpi	r18, 0x02	; 2
    1baa:	31 05       	cpc	r19, r1
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <GPIO_writePort+0x3e>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	61 f0       	breq	.+24     	; 0x1bce <GPIO_writePort+0x54>
    1bb6:	1e c0       	rjmp	.+60     	; 0x1bf4 <GPIO_writePort+0x7a>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	81 f0       	breq	.+32     	; 0x1be2 <GPIO_writePort+0x68>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	83 30       	cpi	r24, 0x03	; 3
    1bc8:	91 05       	cpc	r25, r1
    1bca:	81 f0       	breq	.+32     	; 0x1bec <GPIO_writePort+0x72>
    1bcc:	13 c0       	rjmp	.+38     	; 0x1bf4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_value;
    1bce:	eb e3       	ldi	r30, 0x3B	; 59
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	80 83       	st	Z, r24
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = a_value;
    1bd8:	e8 e3       	ldi	r30, 0x38	; 56
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	80 83       	st	Z, r24
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = a_value;
    1be2:	e5 e3       	ldi	r30, 0x35	; 53
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	80 83       	st	Z, r24
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = a_value;
    1bec:	e2 e3       	ldi	r30, 0x32	; 50
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	80 83       	st	Z, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <GPIO_readPort>:
 * This function return the value of the required port register.
 *
 * If the input port number is not correct, The function will return 0 value.
 */
uint8 GPIO_readPort(uint8 a_portNumber)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <GPIO_readPort+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <GPIO_readPort+0x8>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 L_portValue = 0;
    1c10:	19 82       	std	Y+1, r1	; 0x01

	/*	 If the input port number is not correct, The function will return 0 value.	*/
	if( a_portNumber >= NUM_OF_PORTS )
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	90 f5       	brcc	.+100    	; 0x1c7c <GPIO_readPort+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/* Return the value of the required port register */
		switch(a_portNumber)
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	3c 83       	std	Y+4, r19	; 0x04
    1c20:	2b 83       	std	Y+3, r18	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	d1 f0       	breq	.+52     	; 0x1c60 <GPIO_readPort+0x5e>
    1c2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <GPIO_readPort+0x3e>
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	61 f0       	breq	.+24     	; 0x1c56 <GPIO_readPort+0x54>
    1c3e:	1e c0       	rjmp	.+60     	; 0x1c7c <GPIO_readPort+0x7a>
    1c40:	2b 81       	ldd	r18, Y+3	; 0x03
    1c42:	3c 81       	ldd	r19, Y+4	; 0x04
    1c44:	22 30       	cpi	r18, 0x02	; 2
    1c46:	31 05       	cpc	r19, r1
    1c48:	81 f0       	breq	.+32     	; 0x1c6a <GPIO_readPort+0x68>
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <GPIO_readPort+0x72>
    1c54:	13 c0       	rjmp	.+38     	; 0x1c7c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			L_portValue = PINA;
    1c56:	e9 e3       	ldi	r30, 0x39	; 57
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	0e c0       	rjmp	.+28     	; 0x1c7c <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			L_portValue = PINB;
    1c60:	e6 e3       	ldi	r30, 0x36	; 54
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			L_portValue = PINC;
    1c6a:	e3 e3       	ldi	r30, 0x33	; 51
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			L_portValue = PIND;
    1c74:	e0 e3       	ldi	r30, 0x30	; 48
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	89 83       	std	Y+1, r24	; 0x01
		default:
			/*	Do Nothing	*/
			break;
		}
	}
	return L_portValue;
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <GPIO_activate_intenalPUR_forPin>:
 *
 * If the direction of the pin is output it won't activate the internal PUR
 * it will be write 1 on the pin
 */
void GPIO_activate_intenalPUR_forPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <GPIO_activate_intenalPUR_forPin+0x6>
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(a_portNumber , a_pinNumber , LOGIC_HIGH);
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	6a 81       	ldd	r22, Y+2	; 0x02
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <GPIO_deactivate_intenalPUR_forPin>:
 *
 * If the direction of the pin is output it won't deactivate the internal PUR
 * it will be write 0 on the pin
 */
void GPIO_deactivate_intenalPUR_forPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <GPIO_deactivate_intenalPUR_forPin+0x6>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(a_portNumber , a_pinNumber , LOGIC_LOW);
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	6a 81       	ldd	r22, Y+2	; 0x02
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_init>:
 * Description:
 * This function initialize the required pins to be output for LCD and send the
 * needed commands to the LCD MCU to initialize it.
 */
void LCD_init(void)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
#if	((LCD_DATA_PIN_MODE == 4))
	uint8 i ;
#endif

	/*	Initialize RS , RW , E as Output	*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID , LCD_RS_PIN_ID , PIN_OUTPUT);
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	65 e0       	ldi	r22, 0x05	; 5
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 04 0b 	call	0x1608	; 0x1608 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID , LCD_RW_PIN_ID , PIN_OUTPUT);
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	66 e0       	ldi	r22, 0x06	; 6
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 04 0b 	call	0x1608	; 0x1608 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID , LCD_E_PIN_ID , PIN_OUTPUT);
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	67 e0       	ldi	r22, 0x07	; 7
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 04 0b 	call	0x1608	; 0x1608 <GPIO_setupPinDirection>

	/*	Send Command to Choose 4 bits data mode		*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#else
	/*	Initialize the all the data port as output 	*/
	GPIO_setupPortDirection( LCD_DATA_PORT_ID , PORT_OUTPUT);
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	6f ef       	ldi	r22, 0xFF	; 255
    1cfa:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <GPIO_setupPortDirection>

	/*	Send Command return home for  cursor to home position (address 0)	*/
	LCD_sendCommand(LCD_RETURN_HOME);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>

	/*	Send Command to Choose 8 bits data mode		*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d04:	88 e3       	ldi	r24, 0x38	; 56
    1d06:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>

#endif

	/*	Send Command to turn Display on and make cursor blinking	*/
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1d0a:	8c e0       	ldi	r24, 0x0C	; 12
    1d0c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>

	/*	Send Command to clear all the screen DDRAM data	*/
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <LCD_sendCommand>:
 * In this function we will send the command to the LCD MCU following the steps
 * and rules of AC/Timing characteristics of the LCD in data sheet and the LCD
 * will do the required command.
 */
void LCD_sendCommand(uint8 a_command)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	e9 97       	sbiw	r28, 0x39	; 57
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	89 af       	std	Y+57, r24	; 0x39
	uint8 L_portValue = 0;
	uint8 L_savingBitsMask = 0xF0;
#endif

	/*	RS = 0 to write in Command register	*/
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_LOW);
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	65 e0       	ldi	r22, 0x05	; 5
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
	/*	RW = 0 to write not read	*/
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    1d3c:	83 e0       	ldi	r24, 0x03	; 3
    1d3e:	66 e0       	ldi	r22, 0x06	; 6
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e8       	ldi	r26, 0x80	; 128
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	8d ab       	std	Y+53, r24	; 0x35
    1d50:	9e ab       	std	Y+54, r25	; 0x36
    1d52:	af ab       	std	Y+55, r26	; 0x37
    1d54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	6d a9       	ldd	r22, Y+53	; 0x35
    1d58:	7e a9       	ldd	r23, Y+54	; 0x36
    1d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	89 ab       	std	Y+49, r24	; 0x31
    1d70:	9a ab       	std	Y+50, r25	; 0x32
    1d72:	ab ab       	std	Y+51, r26	; 0x33
    1d74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d76:	69 a9       	ldd	r22, Y+49	; 0x31
    1d78:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	98 ab       	std	Y+48, r25	; 0x30
    1d94:	8f a7       	std	Y+47, r24	; 0x2f
    1d96:	3f c0       	rjmp	.+126    	; 0x1e16 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1d98:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	3f ef       	ldi	r19, 0xFF	; 255
    1da4:	4f e7       	ldi	r20, 0x7F	; 127
    1da6:	57 e4       	ldi	r21, 0x47	; 71
    1da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	4c f5       	brge	.+82     	; 0x1e02 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db0:	6d a9       	ldd	r22, Y+53	; 0x35
    1db2:	7e a9       	ldd	r23, Y+54	; 0x36
    1db4:	8f a9       	ldd	r24, Y+55	; 0x37
    1db6:	98 ad       	ldd	r25, Y+56	; 0x38
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e2       	ldi	r20, 0x20	; 32
    1dbe:	51 e4       	ldi	r21, 0x41	; 65
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	98 ab       	std	Y+48, r25	; 0x30
    1dd6:	8f a7       	std	Y+47, r24	; 0x2f
    1dd8:	0f c0       	rjmp	.+30     	; 0x1df8 <LCD_sendCommand+0xdc>
    1dda:	88 ec       	ldi	r24, 0xC8	; 200
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9e a7       	std	Y+46, r25	; 0x2e
    1de0:	8d a7       	std	Y+45, r24	; 0x2d
    1de2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_sendCommand+0xca>
    1dea:	9e a7       	std	Y+46, r25	; 0x2e
    1dec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df0:	98 a9       	ldd	r25, Y+48	; 0x30
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	98 ab       	std	Y+48, r25	; 0x30
    1df6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <LCD_sendCommand+0xbe>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	69 a9       	ldd	r22, Y+49	; 0x31
    1e04:	7a a9       	ldd	r23, Y+50	; 0x32
    1e06:	8b a9       	ldd	r24, Y+51	; 0x33
    1e08:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	98 ab       	std	Y+48, r25	; 0x30
    1e14:	8f a7       	std	Y+47, r24	; 0x2f
    1e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e18:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1a:	9c a7       	std	Y+44, r25	; 0x2c
    1e1c:	8b a7       	std	Y+43, r24	; 0x2b
    1e1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e20:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_sendCommand+0x106>
    1e26:	9c a7       	std	Y+44, r25	; 0x2c
    1e28:	8b a7       	std	Y+43, r24	; 0x2b

	/*  Delay for Processing Tas = 50 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Enable LCD E = 1	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH);
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	67 e0       	ldi	r22, 0x07	; 7
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e8       	ldi	r26, 0x80	; 128
    1e3a:	bf e3       	ldi	r27, 0x3F	; 63
    1e3c:	8f a3       	std	Y+39, r24	; 0x27
    1e3e:	98 a7       	std	Y+40, r25	; 0x28
    1e40:	a9 a7       	std	Y+41, r26	; 0x29
    1e42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e44:	6f a1       	ldd	r22, Y+39	; 0x27
    1e46:	78 a5       	ldd	r23, Y+40	; 0x28
    1e48:	89 a5       	ldd	r24, Y+41	; 0x29
    1e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4a ef       	ldi	r20, 0xFA	; 250
    1e52:	54 e4       	ldi	r21, 0x44	; 68
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	8b a3       	std	Y+35, r24	; 0x23
    1e5e:	9c a3       	std	Y+36, r25	; 0x24
    1e60:	ad a3       	std	Y+37, r26	; 0x25
    1e62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e64:	6b a1       	ldd	r22, Y+35	; 0x23
    1e66:	7c a1       	ldd	r23, Y+36	; 0x24
    1e68:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	9a a3       	std	Y+34, r25	; 0x22
    1e82:	89 a3       	std	Y+33, r24	; 0x21
    1e84:	3f c0       	rjmp	.+126    	; 0x1f04 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1e86:	6b a1       	ldd	r22, Y+35	; 0x23
    1e88:	7c a1       	ldd	r23, Y+36	; 0x24
    1e8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	3f ef       	ldi	r19, 0xFF	; 255
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	57 e4       	ldi	r21, 0x47	; 71
    1e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	4c f5       	brge	.+82     	; 0x1ef0 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	89 a3       	std	Y+33, r24	; 0x21
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <LCD_sendCommand+0x1ca>
    1ec8:	88 ec       	ldi	r24, 0xC8	; 200
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
    1ece:	8f 8f       	std	Y+31, r24	; 0x1f
    1ed0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ed2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_sendCommand+0x1b8>
    1ed8:	98 a3       	std	Y+32, r25	; 0x20
    1eda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ede:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	9a a3       	std	Y+34, r25	; 0x22
    1ee4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f7       	brne	.-38     	; 0x1ec8 <LCD_sendCommand+0x1ac>
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9a a3       	std	Y+34, r25	; 0x22
    1f02:	89 a3       	std	Y+33, r24	; 0x21
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_sendCommand+0x1f4>
    1f14:	9e 8f       	std	Y+30, r25	; 0x1e
    1f16:	8d 8f       	std	Y+29, r24	; 0x1d
	L_savingBitsMask = 0xF0;
	L_portValue = L_portValue & ROL(L_savingBitsMask,LCD_FIRST_DATA_PIN_ID) ;

#else
	/*	Write the Command in all 8 data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , a_command );
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	69 ad       	ldd	r22, Y+57	; 0x39
    1f1c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <GPIO_writePort>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 e8       	ldi	r26, 0x80	; 128
    1f26:	bf e3       	ldi	r27, 0x3F	; 63
    1f28:	89 8f       	std	Y+25, r24	; 0x19
    1f2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	69 8d       	ldd	r22, Y+25	; 0x19
    1f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a ef       	ldi	r20, 0xFA	; 250
    1f3e:	54 e4       	ldi	r21, 0x44	; 68
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	8d 8b       	std	Y+21, r24	; 0x15
    1f4a:	9e 8b       	std	Y+22, r25	; 0x16
    1f4c:	af 8b       	std	Y+23, r26	; 0x17
    1f4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f50:	6d 89       	ldd	r22, Y+21	; 0x15
    1f52:	7e 89       	ldd	r23, Y+22	; 0x16
    1f54:	8f 89       	ldd	r24, Y+23	; 0x17
    1f56:	98 8d       	ldd	r25, Y+24	; 0x18
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <LCD_sendCommand+0x256>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	3f c0       	rjmp	.+126    	; 0x1ff0 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1f72:	6d 89       	ldd	r22, Y+21	; 0x15
    1f74:	7e 89       	ldd	r23, Y+22	; 0x16
    1f76:	8f 89       	ldd	r24, Y+23	; 0x17
    1f78:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	4c f5       	brge	.+82     	; 0x1fdc <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9c 8b       	std	Y+20, r25	; 0x14
    1fb0:	8b 8b       	std	Y+19, r24	; 0x13
    1fb2:	0f c0       	rjmp	.+30     	; 0x1fd2 <LCD_sendCommand+0x2b6>
    1fb4:	88 ec       	ldi	r24, 0xC8	; 200
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9a 8b       	std	Y+18, r25	; 0x12
    1fba:	89 8b       	std	Y+17, r24	; 0x11
    1fbc:	89 89       	ldd	r24, Y+17	; 0x11
    1fbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_sendCommand+0x2a4>
    1fc4:	9a 8b       	std	Y+18, r25	; 0x12
    1fc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	69 f7       	brne	.-38     	; 0x1fb4 <LCD_sendCommand+0x298>
    1fda:	14 c0       	rjmp	.+40     	; 0x2004 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fde:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9c 8b       	std	Y+20, r25	; 0x14
    1fee:	8b 8b       	std	Y+19, r24	; 0x13
    1ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff4:	98 8b       	std	Y+16, r25	; 0x10
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
    1ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffa:	98 89       	ldd	r25, Y+16	; 0x10
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_sendCommand+0x2e0>
    2000:	98 8b       	std	Y+16, r25	; 0x10
    2002:	8f 87       	std	Y+15, r24	; 0x0f

	/*  Delay for Processing Tdsw = 100 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Disable LCD E = 0	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	67 e0       	ldi	r22, 0x07	; 7
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e8       	ldi	r26, 0x80	; 128
    2014:	bf e3       	ldi	r27, 0x3F	; 63
    2016:	8b 87       	std	Y+11, r24	; 0x0b
    2018:	9c 87       	std	Y+12, r25	; 0x0c
    201a:	ad 87       	std	Y+13, r26	; 0x0d
    201c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2020:	7c 85       	ldd	r23, Y+12	; 0x0c
    2022:	8d 85       	ldd	r24, Y+13	; 0x0d
    2024:	9e 85       	ldd	r25, Y+14	; 0x0e
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a ef       	ldi	r20, 0xFA	; 250
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8f 83       	std	Y+7, r24	; 0x07
    2038:	98 87       	std	Y+8, r25	; 0x08
    203a:	a9 87       	std	Y+9, r26	; 0x09
    203c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <LCD_sendCommand+0x344>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	3f c0       	rjmp	.+126    	; 0x20de <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <LCD_sendCommand+0x3a4>
    20a2:	88 ec       	ldi	r24, 0xC8	; 200
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_sendCommand+0x392>
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    20b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <LCD_sendCommand+0x386>
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_sendCommand+0x3ce>
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01

	/*  Delay for Processing Th = 13 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Write 0 to the 8 bits of Data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , LOGIC_LOW );
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <GPIO_writePort>

#endif
}
    20fa:	e9 96       	adiw	r28, 0x39	; 57
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <LCD_displayCharacter>:
 * In this function we will send the data to the LCD MCU following the steps
 * and rules of AC/Timing characteristics of the LCD in data sheet and The LCD
 * will display it on the screen.
 */
void LCD_displayCharacter(char a_character)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	e9 97       	sbiw	r28, 0x39	; 57
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	89 af       	std	Y+57, r24	; 0x39
	uint8 L_portValue = 0;
	uint8 L_savingBitsMask = 0xF0;
#endif

	/*	RS = 1 to write in Data register	*/
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_HIGH);
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	65 e0       	ldi	r22, 0x05	; 5
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
	/*	RW = 0 to write not read	*/
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	66 e0       	ldi	r22, 0x06	; 6
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e8       	ldi	r26, 0x80	; 128
    213c:	bf e3       	ldi	r27, 0x3F	; 63
    213e:	8d ab       	std	Y+53, r24	; 0x35
    2140:	9e ab       	std	Y+54, r25	; 0x36
    2142:	af ab       	std	Y+55, r26	; 0x37
    2144:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6d a9       	ldd	r22, Y+53	; 0x35
    2148:	7e a9       	ldd	r23, Y+54	; 0x36
    214a:	8f a9       	ldd	r24, Y+55	; 0x37
    214c:	98 ad       	ldd	r25, Y+56	; 0x38
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a ef       	ldi	r20, 0xFA	; 250
    2154:	54 e4       	ldi	r21, 0x44	; 68
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	89 ab       	std	Y+49, r24	; 0x31
    2160:	9a ab       	std	Y+50, r25	; 0x32
    2162:	ab ab       	std	Y+51, r26	; 0x33
    2164:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2166:	69 a9       	ldd	r22, Y+49	; 0x31
    2168:	7a a9       	ldd	r23, Y+50	; 0x32
    216a:	8b a9       	ldd	r24, Y+51	; 0x33
    216c:	9c a9       	ldd	r25, Y+52	; 0x34
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	98 ab       	std	Y+48, r25	; 0x30
    2184:	8f a7       	std	Y+47, r24	; 0x2f
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2188:	69 a9       	ldd	r22, Y+49	; 0x31
    218a:	7a a9       	ldd	r23, Y+50	; 0x32
    218c:	8b a9       	ldd	r24, Y+51	; 0x33
    218e:	9c a9       	ldd	r25, Y+52	; 0x34
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6d a9       	ldd	r22, Y+53	; 0x35
    21a2:	7e a9       	ldd	r23, Y+54	; 0x36
    21a4:	8f a9       	ldd	r24, Y+55	; 0x37
    21a6:	98 ad       	ldd	r25, Y+56	; 0x38
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	98 ab       	std	Y+48, r25	; 0x30
    21c6:	8f a7       	std	Y+47, r24	; 0x2f
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <LCD_displayCharacter+0xdc>
    21ca:	88 ec       	ldi	r24, 0xC8	; 200
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9e a7       	std	Y+46, r25	; 0x2e
    21d0:	8d a7       	std	Y+45, r24	; 0x2d
    21d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_displayCharacter+0xca>
    21da:	9e a7       	std	Y+46, r25	; 0x2e
    21dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e0:	98 a9       	ldd	r25, Y+48	; 0x30
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	98 ab       	std	Y+48, r25	; 0x30
    21e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <LCD_displayCharacter+0xbe>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	69 a9       	ldd	r22, Y+49	; 0x31
    21f4:	7a a9       	ldd	r23, Y+50	; 0x32
    21f6:	8b a9       	ldd	r24, Y+51	; 0x33
    21f8:	9c a9       	ldd	r25, Y+52	; 0x34
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	8f a5       	ldd	r24, Y+47	; 0x2f
    2208:	98 a9       	ldd	r25, Y+48	; 0x30
    220a:	9c a7       	std	Y+44, r25	; 0x2c
    220c:	8b a7       	std	Y+43, r24	; 0x2b
    220e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2210:	9c a5       	ldd	r25, Y+44	; 0x2c
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_displayCharacter+0x106>
    2216:	9c a7       	std	Y+44, r25	; 0x2c
    2218:	8b a7       	std	Y+43, r24	; 0x2b

	/*  Delay for Processing Tas = 50 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Enable LCD E = 1	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH);
    221a:	83 e0       	ldi	r24, 0x03	; 3
    221c:	67 e0       	ldi	r22, 0x07	; 7
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e8       	ldi	r26, 0x80	; 128
    222a:	bf e3       	ldi	r27, 0x3F	; 63
    222c:	8f a3       	std	Y+39, r24	; 0x27
    222e:	98 a7       	std	Y+40, r25	; 0x28
    2230:	a9 a7       	std	Y+41, r26	; 0x29
    2232:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	6f a1       	ldd	r22, Y+39	; 0x27
    2236:	78 a5       	ldd	r23, Y+40	; 0x28
    2238:	89 a5       	ldd	r24, Y+41	; 0x29
    223a:	9a a5       	ldd	r25, Y+42	; 0x2a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4a ef       	ldi	r20, 0xFA	; 250
    2242:	54 e4       	ldi	r21, 0x44	; 68
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8b a3       	std	Y+35, r24	; 0x23
    224e:	9c a3       	std	Y+36, r25	; 0x24
    2250:	ad a3       	std	Y+37, r26	; 0x25
    2252:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2254:	6b a1       	ldd	r22, Y+35	; 0x23
    2256:	7c a1       	ldd	r23, Y+36	; 0x24
    2258:	8d a1       	ldd	r24, Y+37	; 0x25
    225a:	9e a1       	ldd	r25, Y+38	; 0x26
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	2c f4       	brge	.+10     	; 0x2276 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9a a3       	std	Y+34, r25	; 0x22
    2272:	89 a3       	std	Y+33, r24	; 0x21
    2274:	3f c0       	rjmp	.+126    	; 0x22f4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2276:	6b a1       	ldd	r22, Y+35	; 0x23
    2278:	7c a1       	ldd	r23, Y+36	; 0x24
    227a:	8d a1       	ldd	r24, Y+37	; 0x25
    227c:	9e a1       	ldd	r25, Y+38	; 0x26
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	3f ef       	ldi	r19, 0xFF	; 255
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	57 e4       	ldi	r21, 0x47	; 71
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228a:	18 16       	cp	r1, r24
    228c:	4c f5       	brge	.+82     	; 0x22e0 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228e:	6f a1       	ldd	r22, Y+39	; 0x27
    2290:	78 a5       	ldd	r23, Y+40	; 0x28
    2292:	89 a5       	ldd	r24, Y+41	; 0x29
    2294:	9a a5       	ldd	r25, Y+42	; 0x2a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e2       	ldi	r20, 0x20	; 32
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9a a3       	std	Y+34, r25	; 0x22
    22b4:	89 a3       	std	Y+33, r24	; 0x21
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <LCD_displayCharacter+0x1ca>
    22b8:	88 ec       	ldi	r24, 0xC8	; 200
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	98 a3       	std	Y+32, r25	; 0x20
    22be:	8f 8f       	std	Y+31, r24	; 0x1f
    22c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c2:	98 a1       	ldd	r25, Y+32	; 0x20
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_displayCharacter+0x1b8>
    22c8:	98 a3       	std	Y+32, r25	; 0x20
    22ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22cc:	89 a1       	ldd	r24, Y+33	; 0x21
    22ce:	9a a1       	ldd	r25, Y+34	; 0x22
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9a a3       	std	Y+34, r25	; 0x22
    22d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d6:	89 a1       	ldd	r24, Y+33	; 0x21
    22d8:	9a a1       	ldd	r25, Y+34	; 0x22
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <LCD_displayCharacter+0x1ac>
    22de:	14 c0       	rjmp	.+40     	; 0x2308 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e0:	6b a1       	ldd	r22, Y+35	; 0x23
    22e2:	7c a1       	ldd	r23, Y+36	; 0x24
    22e4:	8d a1       	ldd	r24, Y+37	; 0x25
    22e6:	9e a1       	ldd	r25, Y+38	; 0x26
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9a a3       	std	Y+34, r25	; 0x22
    22f2:	89 a3       	std	Y+33, r24	; 0x21
    22f4:	89 a1       	ldd	r24, Y+33	; 0x21
    22f6:	9a a1       	ldd	r25, Y+34	; 0x22
    22f8:	9e 8f       	std	Y+30, r25	; 0x1e
    22fa:	8d 8f       	std	Y+29, r24	; 0x1d
    22fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_displayCharacter+0x1f4>
    2304:	9e 8f       	std	Y+30, r25	; 0x1e
    2306:	8d 8f       	std	Y+29, r24	; 0x1d
	L_savingBitsMask = 0xF0;
	L_portValue = L_portValue & ROL(L_savingBitsMask,LCD_FIRST_DATA_PIN_ID) ;

#else
	/*	Write the Command in all 8 data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , a_character );
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	69 ad       	ldd	r22, Y+57	; 0x39
    230c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <GPIO_writePort>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a0 e8       	ldi	r26, 0x80	; 128
    2316:	bf e3       	ldi	r27, 0x3F	; 63
    2318:	89 8f       	std	Y+25, r24	; 0x19
    231a:	9a 8f       	std	Y+26, r25	; 0x1a
    231c:	ab 8f       	std	Y+27, r26	; 0x1b
    231e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	69 8d       	ldd	r22, Y+25	; 0x19
    2322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8d 8b       	std	Y+21, r24	; 0x15
    233a:	9e 8b       	std	Y+22, r25	; 0x16
    233c:	af 8b       	std	Y+23, r26	; 0x17
    233e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2340:	6d 89       	ldd	r22, Y+21	; 0x15
    2342:	7e 89       	ldd	r23, Y+22	; 0x16
    2344:	8f 89       	ldd	r24, Y+23	; 0x17
    2346:	98 8d       	ldd	r25, Y+24	; 0x18
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9c 8b       	std	Y+20, r25	; 0x14
    235e:	8b 8b       	std	Y+19, r24	; 0x13
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2362:	6d 89       	ldd	r22, Y+21	; 0x15
    2364:	7e 89       	ldd	r23, Y+22	; 0x16
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	98 8d       	ldd	r25, Y+24	; 0x18
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	69 8d       	ldd	r22, Y+25	; 0x19
    237c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2380:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9c 8b       	std	Y+20, r25	; 0x14
    23a0:	8b 8b       	std	Y+19, r24	; 0x13
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <LCD_displayCharacter+0x2b6>
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9a 8b       	std	Y+18, r25	; 0x12
    23aa:	89 8b       	std	Y+17, r24	; 0x11
    23ac:	89 89       	ldd	r24, Y+17	; 0x11
    23ae:	9a 89       	ldd	r25, Y+18	; 0x12
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <LCD_displayCharacter+0x2a4>
    23b4:	9a 8b       	std	Y+18, r25	; 0x12
    23b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ba:	9c 89       	ldd	r25, Y+20	; 0x14
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9c 8b       	std	Y+20, r25	; 0x14
    23c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8b 89       	ldd	r24, Y+19	; 0x13
    23c4:	9c 89       	ldd	r25, Y+20	; 0x14
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <LCD_displayCharacter+0x298>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6d 89       	ldd	r22, Y+21	; 0x15
    23ce:	7e 89       	ldd	r23, Y+22	; 0x16
    23d0:	8f 89       	ldd	r24, Y+23	; 0x17
    23d2:	98 8d       	ldd	r25, Y+24	; 0x18
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	98 8b       	std	Y+16, r25	; 0x10
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
    23e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ea:	98 89       	ldd	r25, Y+16	; 0x10
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_displayCharacter+0x2e0>
    23f0:	98 8b       	std	Y+16, r25	; 0x10
    23f2:	8f 87       	std	Y+15, r24	; 0x0f

	/*  Delay for Processing Tdsw = 100 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Disable LCD E = 0	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW);
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	67 e0       	ldi	r22, 0x07	; 7
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 ef 0b 	call	0x17de	; 0x17de <GPIO_writePin>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e8       	ldi	r26, 0x80	; 128
    2404:	bf e3       	ldi	r27, 0x3F	; 63
    2406:	8b 87       	std	Y+11, r24	; 0x0b
    2408:	9c 87       	std	Y+12, r25	; 0x0c
    240a:	ad 87       	std	Y+13, r26	; 0x0d
    240c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a ef       	ldi	r20, 0xFA	; 250
    241c:	54 e4       	ldi	r21, 0x44	; 68
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	98 87       	std	Y+8, r25	; 0x08
    242a:	a9 87       	std	Y+9, r26	; 0x09
    242c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <LCD_displayCharacter+0x3a4>
    2492:	88 ec       	ldi	r24, 0xC8	; 200
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_displayCharacter+0x392>
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <LCD_displayCharacter+0x386>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_displayCharacter+0x3ce>
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01

	/*  Delay for Processing Th = 13 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Write 0 to the 8 bits of Data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , LOGIC_LOW );
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <GPIO_writePort>

#endif

}
    24ea:	e9 96       	adiw	r28, 0x39	; 57
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <LCD_moveCursor>:
 * dimension of the LCD.
 * If the row or column of the input is larger than the dimension of the LCD
 * the function won't move the cursor.
 */
void LCD_moveCursor(uint8 a_row , uint8 a_col)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <LCD_moveCursor+0x6>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <LCD_moveCursor+0x8>
    2504:	0f 92       	push	r0
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	6b 83       	std	Y+3, r22	; 0x03
	uint8	L_memoryAddress = 0;
    250e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 *  If the row or column of the input is larger than the dimension of the LCD
	 * the function won't move the cursor.
	 */
	if( (a_row >= LCD_NUM_OF_ROW) || (a_col >= LCD_NUM_OF_COLUMN))
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	84 30       	cpi	r24, 0x04	; 4
    2514:	80 f5       	brcc	.+96     	; 0x2576 <LCD_moveCursor+0x7a>
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	80 31       	cpi	r24, 0x10	; 16
    251a:	68 f5       	brcc	.+90     	; 0x2576 <LCD_moveCursor+0x7a>
		/*	In order to access a location in DDRAM we must do this
		 *  We must send a command of 8 bit =  0x80  |  [address you want]
		 *  we calculate the address by using the data sheet and know the
		 *  Mapped registers of each row.
		 */
		switch(a_row)
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	3d 83       	std	Y+5, r19	; 0x05
    2524:	2c 83       	std	Y+4, r18	; 0x04
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	c1 f0       	breq	.+48     	; 0x2560 <LCD_moveCursor+0x64>
    2530:	2c 81       	ldd	r18, Y+4	; 0x04
    2532:	3d 81       	ldd	r19, Y+5	; 0x05
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	2c f4       	brge	.+10     	; 0x2544 <LCD_moveCursor+0x48>
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	61 f0       	breq	.+24     	; 0x255a <LCD_moveCursor+0x5e>
    2542:	19 c0       	rjmp	.+50     	; 0x2576 <LCD_moveCursor+0x7a>
    2544:	2c 81       	ldd	r18, Y+4	; 0x04
    2546:	3d 81       	ldd	r19, Y+5	; 0x05
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	69 f0       	breq	.+26     	; 0x2568 <LCD_moveCursor+0x6c>
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	9d 81       	ldd	r25, Y+5	; 0x05
    2552:	83 30       	cpi	r24, 0x03	; 3
    2554:	91 05       	cpc	r25, r1
    2556:	61 f0       	breq	.+24     	; 0x2570 <LCD_moveCursor+0x74>
    2558:	0e c0       	rjmp	.+28     	; 0x2576 <LCD_moveCursor+0x7a>
		{
			case 0:
				L_memoryAddress = a_col;
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	0b c0       	rjmp	.+22     	; 0x2576 <LCD_moveCursor+0x7a>
				break;
			case 1:
				L_memoryAddress = a_col + 0x40;
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	80 5c       	subi	r24, 0xC0	; 192
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <LCD_moveCursor+0x7a>
				break;
			case 2:
				L_memoryAddress = a_col + 0x10;
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	80 5f       	subi	r24, 0xF0	; 240
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <LCD_moveCursor+0x7a>
				break;
			case 3:
				L_memoryAddress = a_col + 0x50;
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	80 5b       	subi	r24, 0xB0	; 176
    2574:	89 83       	std	Y+1, r24	; 0x01
	}

	/*	Access the memory address in DDRAM by orring the memory address with 0x80
	 *	and send the result as command
	 */
	LCD_sendCommand( LCD_SET_CURSOR_LOCATION | L_memoryAddress );
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	80 68       	ori	r24, 0x80	; 128
    257a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <LCD_displayString>:
 *    in the screen
 * 2) If the size of the string is larger than the remaining position at the line
 * 	  your string will be cut and only part of it will be displayed
 */
void LCD_displayString(const char *a_str)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <LCD_displayString+0x6>
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	9b 83       	std	Y+3, r25	; 0x03
    259c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    259e:	19 82       	std	Y+1, r1	; 0x01
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <LCD_displayString+0x30>

	/*	Loop though the array and each time display only one character	*/
	while( a_str[i] != '\0')
	{
		LCD_displayCharacter(a_str[i]);
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	fc 01       	movw	r30, r24
    25ae:	e2 0f       	add	r30, r18
    25b0:	f3 1f       	adc	r31, r19
    25b2:	80 81       	ld	r24, Z
    25b4:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayCharacter>
		i++;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	89 83       	std	Y+1, r24	; 0x01
void LCD_displayString(const char *a_str)
{
	uint8 i = 0;

	/*	Loop though the array and each time display only one character	*/
	while( a_str[i] != '\0')
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	fc 01       	movw	r30, r24
    25ca:	e2 0f       	add	r30, r18
    25cc:	f3 1f       	adc	r31, r19
    25ce:	80 81       	ld	r24, Z
    25d0:	88 23       	and	r24, r24
    25d2:	39 f7       	brne	.-50     	; 0x25a2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(a_str[i]);
		i++;
	}
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <LCD_displayStringAtRowColumn>:
 * This function display a whole string in the Screen at specified row and column.
 * If the size of the string is larger than the remaining position at the Line
 * your string will be cut and only part of it will be displayed.
 */
void LCD_displayStringAtRowColumn(uint8 a_row , uint8 a_col , const char *a_str)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <LCD_displayStringAtRowColumn+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <LCD_displayStringAtRowColumn+0x8>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6a 83       	std	Y+2, r22	; 0x02
    25f0:	5c 83       	std	Y+4, r21	; 0x04
    25f2:	4b 83       	std	Y+3, r20	; 0x03
	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	6a 81       	ldd	r22, Y+2	; 0x02
    25f8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_moveCursor>
	/*	Display the String	*/
	LCD_displayString(a_str);
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_displayString>
}
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <LCD_displayNumber>:
 *    in the screen
 * 2) If the size of the Number is larger than the remaining position at the line
 * 	  your Number will be cut and only part of it will be displayed
 */
void LCD_displayNumber(sint32 a_number)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	64 97       	sbiw	r28, 0x14	; 20
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	69 8b       	std	Y+17, r22	; 0x11
    2628:	7a 8b       	std	Y+18, r23	; 0x12
    262a:	8b 8b       	std	Y+19, r24	; 0x13
    262c:	9c 8b       	std	Y+20, r25	; 0x14
	/*	Buffer to save the ASCI values of the number	*/
	char L_buff [16] = {0};
    262e:	80 e1       	ldi	r24, 0x10	; 16
    2630:	fe 01       	movw	r30, r28
    2632:	31 96       	adiw	r30, 0x01	; 1
    2634:	df 01       	movw	r26, r30
    2636:	98 2f       	mov	r25, r24
    2638:	1d 92       	st	X+, r1
    263a:	9a 95       	dec	r25
    263c:	e9 f7       	brne	.-6      	; 0x2638 <LCD_displayNumber+0x26>

	/*	Function convert each separate number to ASCI value and save it to L_buff
	 *  10 is to tell the function to convert a_number to ASCI of number with base
	 *  10.
	 */
	itoa(a_number , L_buff , 10);
    263e:	89 89       	ldd	r24, Y+17	; 0x11
    2640:	9a 89       	ldd	r25, Y+18	; 0x12
    2642:	9e 01       	movw	r18, r28
    2644:	2f 5f       	subi	r18, 0xFF	; 255
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	b9 01       	movw	r22, r18
    264a:	4a e0       	ldi	r20, 0x0A	; 10
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	0e 94 2b 19 	call	0x3256	; 0x3256 <itoa>

	/*	Display the String	*/
	LCD_displayString(L_buff);
    2652:	ce 01       	movw	r24, r28
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_displayString>
}
    265a:	64 96       	adiw	r28, 0x14	; 20
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <LCD_displayNumberAtRowColumn>:
 * This function display a whole Number in the Screen at specified row and column.
 * If the size of the Number is larger than the remaining position at the Line
 * your Number will be cut and only part of it will be displayed.
 */
void LCD_displayNumberAtRowColumn(uint8 a_row , uint8 a_col , sint32 a_number)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <LCD_displayNumberAtRowColumn+0x6>
    2672:	00 d0       	rcall	.+0      	; 0x2674 <LCD_displayNumberAtRowColumn+0x8>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <LCD_displayNumberAtRowColumn+0xa>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	6a 83       	std	Y+2, r22	; 0x02
    267e:	2b 83       	std	Y+3, r18	; 0x03
    2680:	3c 83       	std	Y+4, r19	; 0x04
    2682:	4d 83       	std	Y+5, r20	; 0x05
    2684:	5e 83       	std	Y+6, r21	; 0x06
	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	6a 81       	ldd	r22, Y+2	; 0x02
    268a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_moveCursor>
	/*	Display the String	*/
	LCD_displayNumber(a_number);
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	ad 81       	ldd	r26, Y+5	; 0x05
    2694:	be 81       	ldd	r27, Y+6	; 0x06
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 09 13 	call	0x2612	; 0x2612 <LCD_displayNumber>
}
    269e:	26 96       	adiw	r28, 0x06	; 6
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <LCD_clearScreen>:
/*
 * Description:
 * This function Clears display and returns cursor to the home position (address 0).
 */
void LCD_clearScreen(void)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <LCD_shiftLeftEntireDisplayByOnePosition>:
 * This function shift all 2 Lines by one position to left
 * You may lose data if you shift left to a location that exceed the dimension
 * of the LCD
 */
void LCD_shiftLeftEntireDisplayByOnePosition(void)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_LEFT_ENTIRE_DISPLAY);
    26cc:	88 e1       	ldi	r24, 0x18	; 24
    26ce:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <LCD_shiftRightEntireDisplayByOnePosition>:
 * This function shift all 2 Lines by one position to right
 * You may lose data if you shift right to a location that exceed the dimension
 * of the LCD
 */
void LCD_shiftRightEntireDisplayByOnePosition(void)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_RIGHT_ENTIRE_DISPLAY);
    26e0:	8c e1       	ldi	r24, 0x1C	; 28
    26e2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LCD_displayOff>:
 * [it don't clear the DDRAM content] which mean if you call this function it
 * appear the LCD is cleared but when it you call function display On the content
 * of the old data will appear again.
 */
void LCD_displayOff(void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_DISPLAY_OFF_CURSOR_OFF);
    26f4:	88 e0       	ldi	r24, 0x08	; 8
    26f6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <LCD_displayOn>:
 * Description:
 * This function will turn on display and any character exists on the DDRAM of
 * the LCD will appear in the screen
 */
void LCD_displayOn(void)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING);
    2708:	8f e0       	ldi	r24, 0x0F	; 15
    270a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_sendCommand>
}
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <Timer0_PWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed be update the value in
 * The Compare Register
 */
void Timer0_PWM_Init(uint8 a_dutyCycle)
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	89 83       	std	Y+1, r24	; 0x01
	/*	Set Timer Initial Value to 0	*/
	TCNT0 = 0;
    2720:	e2 e5       	ldi	r30, 0x52	; 82
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	10 82       	st	Z, r1

	/*	Set Compare Value according to the duty cycle that the user supply	*/
	OCR0  = ((uint16)a_dutyCycle*255) / 100 ;
    2726:	ec e5       	ldi	r30, 0x5C	; 92
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	48 2f       	mov	r20, r24
    272e:	50 e0       	ldi	r21, 0x00	; 0
    2730:	ca 01       	movw	r24, r20
    2732:	9c 01       	movw	r18, r24
    2734:	22 0f       	add	r18, r18
    2736:	33 1f       	adc	r19, r19
    2738:	c9 01       	movw	r24, r18
    273a:	96 95       	lsr	r25
    273c:	98 2f       	mov	r25, r24
    273e:	88 27       	eor	r24, r24
    2740:	97 95       	ror	r25
    2742:	87 95       	ror	r24
    2744:	82 1b       	sub	r24, r18
    2746:	93 0b       	sbc	r25, r19
    2748:	84 0f       	add	r24, r20
    274a:	95 1f       	adc	r25, r21
    274c:	24 e6       	ldi	r18, 0x64	; 100
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	b9 01       	movw	r22, r18
    2752:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodhi4>
    2756:	cb 01       	movw	r24, r22
    2758:	80 83       	st	Z, r24

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC	*/
	DDRB  = DDRB | (1<<PB3);
    275a:	a7 e3       	ldi	r26, 0x37	; 55
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e7 e3       	ldi	r30, 0x37	; 55
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	88 60       	ori	r24, 0x08	; 8
    2766:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2768:	e3 e5       	ldi	r30, 0x53	; 83
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	8a e6       	ldi	r24, 0x6A	; 106
    276e:	80 83       	st	Z, r24
}
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <TIMER0_init>:
 * Description :
 * This function Helps The TIMER_init function Where it is only responsible for
 * initializing Timer0 according to the Dynamic Configurations set by the user.
 */
static void TIMER0_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <TIMER0_init+0x6>
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01

	/*	Let the Timer0 start Counting from the initial value that is given */
	TCNT0 = (uint8) a_configuration_Ptr->s_initialValue ;
    2786:	a2 e5       	ldi	r26, 0x52	; 82
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	83 81       	ldd	r24, Z+3	; 0x03
    2790:	94 81       	ldd	r25, Z+4	; 0x04
    2792:	8c 93       	st	X, r24


	/*	If we are working at CTC mode only we should set Compare value as give */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    2794:	e9 81       	ldd	r30, Y+1	; 0x01
    2796:	fa 81       	ldd	r31, Y+2	; 0x02
    2798:	81 81       	ldd	r24, Z+1	; 0x01
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	39 f4       	brne	.+14     	; 0x27ac <TIMER0_init+0x34>
	{
		OCR0 = (uint8) a_configuration_Ptr->s_compareValue;
    279e:	ac e5       	ldi	r26, 0x5C	; 92
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e9 81       	ldd	r30, Y+1	; 0x01
    27a4:	fa 81       	ldd	r31, Y+2	; 0x02
    27a6:	85 81       	ldd	r24, Z+5	; 0x05
    27a8:	96 81       	ldd	r25, Z+6	; 0x06
    27aa:	8c 93       	st	X, r24


	/*	Enable The CTC mode Interrupt Or Normal Mode Interrupt accoridng to
	 *  Mode selected by the user
	 */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    27ac:	e9 81       	ldd	r30, Y+1	; 0x01
    27ae:	fa 81       	ldd	r31, Y+2	; 0x02
    27b0:	81 81       	ldd	r24, Z+1	; 0x01
    27b2:	82 30       	cpi	r24, 0x02	; 2
    27b4:	41 f4       	brne	.+16     	; 0x27c6 <TIMER0_init+0x4e>
	{
		/*	Enable CTC mode interrupt from TIMSK register	*/
		TIMSK |= (1<<OCIE0);
    27b6:	a9 e5       	ldi	r26, 0x59	; 89
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e9 e5       	ldi	r30, 0x59	; 89
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	82 60       	ori	r24, 0x02	; 2
    27c2:	8c 93       	st	X, r24
    27c4:	0c c0       	rjmp	.+24     	; 0x27de <TIMER0_init+0x66>
	}
	else if(a_configuration_Ptr->s_timerMode  == NORMAL_MODE)
    27c6:	e9 81       	ldd	r30, Y+1	; 0x01
    27c8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ca:	81 81       	ldd	r24, Z+1	; 0x01
    27cc:	88 23       	and	r24, r24
    27ce:	39 f4       	brne	.+14     	; 0x27de <TIMER0_init+0x66>
	{
		/*	Enable Normal mode interrupt from TIMSK register	*/
		TIMSK |= (1<<TOIE0);
    27d0:	a9 e5       	ldi	r26, 0x59	; 89
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e9 e5       	ldi	r30, 0x59	; 89
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	8c 93       	st	X, r24
	 *  			   any of them in the configurations
	 *  CS0 2:0      : They are set according to the Prescaler chosen by the
	 *  			   used at the dynamic configurations.
	 */

	TCCR0 = (1<<FOC0) |  (a_configuration_Ptr->s_prescaler) \
    27de:	a3 e5       	ldi	r26, 0x53	; 83
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e9 81       	ldd	r30, Y+1	; 0x01
    27e4:	fa 81       	ldd	r31, Y+2	; 0x02
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	80 68       	ori	r24, 0x80	; 128
    27ea:	28 2f       	mov	r18, r24
    27ec:	e9 81       	ldd	r30, Y+1	; 0x01
    27ee:	fa 81       	ldd	r31, Y+2	; 0x02
    27f0:	81 81       	ldd	r24, Z+1	; 0x01
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	81 70       	andi	r24, 0x01	; 1
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	00 24       	eor	r0, r0
    27fc:	96 95       	lsr	r25
    27fe:	87 95       	ror	r24
    2800:	07 94       	ror	r0
    2802:	96 95       	lsr	r25
    2804:	87 95       	ror	r24
    2806:	07 94       	ror	r0
    2808:	98 2f       	mov	r25, r24
    280a:	80 2d       	mov	r24, r0
    280c:	28 2b       	or	r18, r24
    280e:	e9 81       	ldd	r30, Y+1	; 0x01
    2810:	fa 81       	ldd	r31, Y+2	; 0x02
    2812:	81 81       	ldd	r24, Z+1	; 0x01
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	82 70       	andi	r24, 0x02	; 2
    281a:	90 70       	andi	r25, 0x00	; 0
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	82 2b       	or	r24, r18
    2826:	8c 93       	st	X, r24
					  |( (a_configuration_Ptr->s_timerMode & 0x01) << WGM00) \
					  |( (a_configuration_Ptr->s_timerMode & 0x02) <<(WGM01-1)) ;
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <TIMER1_init>:
 * Description :
 * This function Helps The TIMER_init function Where it is only responsible for
 * initializing Timer1 according to the Dynamic Configurations set by the user.
 */
static void TIMER1_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <TIMER1_init+0x6>
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	9b 83       	std	Y+3, r25	; 0x03
    2840:	8a 83       	std	Y+2, r24	; 0x02

	uint8 L_sreg = SREG;
    2842:	ef e5       	ldi	r30, 0x5F	; 95
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	89 83       	std	Y+1, r24	; 0x01
	 * register, and the interrupt code updates the temporary register by accessing
	 * the same or any other of the 16-bit Timer Registers, then the result of
	 * the access outside the interrupt will be corrupted.
	 *  So we must do Atomic read/Write operations.
	 */
	SREG &= ~(1<<7); /*	Disable interrupts	*/
    284a:	af e5       	ldi	r26, 0x5F	; 95
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	ef e5       	ldi	r30, 0x5F	; 95
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8f 77       	andi	r24, 0x7F	; 127
    2856:	8c 93       	st	X, r24

	TCNT1 = a_configuration_Ptr->s_initialValue ;  /* Set initial value of timer */
    2858:	ac e4       	ldi	r26, 0x4C	; 76
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ea 81       	ldd	r30, Y+2	; 0x02
    285e:	fb 81       	ldd	r31, Y+3	; 0x03
    2860:	83 81       	ldd	r24, Z+3	; 0x03
    2862:	94 81       	ldd	r25, Z+4	; 0x04
    2864:	11 96       	adiw	r26, 0x01	; 1
    2866:	9c 93       	st	X, r25
    2868:	8e 93       	st	-X, r24

	/*	If we are working at CTC mode only we should set Compare value as give */
	if(a_configuration_Ptr->s_timerMode  == T1_CTC_MODE)
    286a:	ea 81       	ldd	r30, Y+2	; 0x02
    286c:	fb 81       	ldd	r31, Y+3	; 0x03
    286e:	81 81       	ldd	r24, Z+1	; 0x01
    2870:	84 30       	cpi	r24, 0x04	; 4
    2872:	51 f4       	brne	.+20     	; 0x2888 <TIMER1_init+0x56>
	{
		OCR1A = a_configuration_Ptr->s_compareValue;
    2874:	ea e4       	ldi	r30, 0x4A	; 74
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	aa 81       	ldd	r26, Y+2	; 0x02
    287a:	bb 81       	ldd	r27, Y+3	; 0x03
    287c:	15 96       	adiw	r26, 0x05	; 5
    287e:	8d 91       	ld	r24, X+
    2880:	9c 91       	ld	r25, X
    2882:	16 97       	sbiw	r26, 0x06	; 6
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
	}

	SREG = L_sreg; 	/*	Return to the default status control register values  */
    2888:	ef e5       	ldi	r30, 0x5F	; 95
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	80 83       	st	Z, r24

	/*	Enable The CTC mode Interrupt Or Normal Mode Interrupt accoridng to
	 *  Mode selected by the user
	 */
	if(a_configuration_Ptr->s_timerMode  == T1_CTC_MODE)
    2890:	ea 81       	ldd	r30, Y+2	; 0x02
    2892:	fb 81       	ldd	r31, Y+3	; 0x03
    2894:	81 81       	ldd	r24, Z+1	; 0x01
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	41 f4       	brne	.+16     	; 0x28aa <TIMER1_init+0x78>
	{
		/*	Enable CTC mode interrupt from TIMSK register	*/
		TIMSK |= (1<<OCIE1A);
    289a:	a9 e5       	ldi	r26, 0x59	; 89
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e9 e5       	ldi	r30, 0x59	; 89
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	80 61       	ori	r24, 0x10	; 16
    28a6:	8c 93       	st	X, r24
    28a8:	0c c0       	rjmp	.+24     	; 0x28c2 <TIMER1_init+0x90>
	}
	else if(a_configuration_Ptr->s_timerMode  == NORMAL_MODE)
    28aa:	ea 81       	ldd	r30, Y+2	; 0x02
    28ac:	fb 81       	ldd	r31, Y+3	; 0x03
    28ae:	81 81       	ldd	r24, Z+1	; 0x01
    28b0:	88 23       	and	r24, r24
    28b2:	39 f4       	brne	.+14     	; 0x28c2 <TIMER1_init+0x90>
	{
		/*	Enable Normal mode interrupt from TIMSK register	*/
		TIMSK |= (1<<TOIE1);
    28b4:	a9 e5       	ldi	r26, 0x59	; 89
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e9 e5       	ldi	r30, 0x59	; 89
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	84 60       	ori	r24, 0x04	; 4
    28c0:	8c 93       	st	X, r24
	 *  FOC1B = 1	  : NON PWM mode.
	 *  WGM1 1:0      : They are set according to the parameter Mode used, it
	 *  			    will set the mode to CTC or Normal if the user choose
	 *  			    any of them in the configurations
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) | (a_configuration_Ptr->s_timerMode & 0x03);
    28c2:	af e4       	ldi	r26, 0x4F	; 79
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ea 81       	ldd	r30, Y+2	; 0x02
    28c8:	fb 81       	ldd	r31, Y+3	; 0x03
    28ca:	81 81       	ldd	r24, Z+1	; 0x01
    28cc:	83 70       	andi	r24, 0x03	; 3
    28ce:	8c 60       	ori	r24, 0x0C	; 12
    28d0:	8c 93       	st	X, r24
	 *  ICNC1 = 0  : Has not effect we are Disabling ICU
	 *  WGM1 3:2   : They are set according to the parameter Mode used, it
	 *  			 will set the mode to CTC or Normal if the user choose
	 *  			 any of them in the configurations
	 */
	TCCR1B  =       (a_configuration_Ptr->s_prescaler)  \
    28d2:	ae e4       	ldi	r26, 0x4E	; 78
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ea 81       	ldd	r30, Y+2	; 0x02
    28d8:	fb 81       	ldd	r31, Y+3	; 0x03
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	28 2f       	mov	r18, r24
    28de:	ea 81       	ldd	r30, Y+2	; 0x02
    28e0:	fb 81       	ldd	r31, Y+3	; 0x03
    28e2:	81 81       	ldd	r24, Z+1	; 0x01
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	8c 70       	andi	r24, 0x0C	; 12
    28ea:	90 70       	andi	r25, 0x00	; 0
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	82 2b       	or	r24, r18
    28f2:	8c 93       	st	X, r24
			     | ((a_configuration_Ptr->s_timerMode & 0x0C) << 1);
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <TIMER2_init>:
 * Description :
 * This function Helps The TIMER_init function Where it is only responsible for
 * initializing Timer2 according to the Dynamic Configurations set by the user.
 */
static void TIMER2_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <TIMER2_init+0x6>
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01

	/*	Let the Timer2 start Counting from the initial value that is given */
	TCNT2 = (uint8) a_configuration_Ptr->s_initialValue ;
    290e:	a4 e4       	ldi	r26, 0x44	; 68
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e9 81       	ldd	r30, Y+1	; 0x01
    2914:	fa 81       	ldd	r31, Y+2	; 0x02
    2916:	83 81       	ldd	r24, Z+3	; 0x03
    2918:	94 81       	ldd	r25, Z+4	; 0x04
    291a:	8c 93       	st	X, r24


	/*	If we are working at CTC mode only we should set Compare value as give */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    291c:	e9 81       	ldd	r30, Y+1	; 0x01
    291e:	fa 81       	ldd	r31, Y+2	; 0x02
    2920:	81 81       	ldd	r24, Z+1	; 0x01
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	39 f4       	brne	.+14     	; 0x2934 <TIMER2_init+0x34>
	{
		OCR2 = (uint8) a_configuration_Ptr->s_compareValue;
    2926:	a3 e4       	ldi	r26, 0x43	; 67
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e9 81       	ldd	r30, Y+1	; 0x01
    292c:	fa 81       	ldd	r31, Y+2	; 0x02
    292e:	85 81       	ldd	r24, Z+5	; 0x05
    2930:	96 81       	ldd	r25, Z+6	; 0x06
    2932:	8c 93       	st	X, r24


	/*	Enable The CTC mode Interrupt Or Normal Mode Interrupt according to
	 *  Mode selected by the user
	 */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    2934:	e9 81       	ldd	r30, Y+1	; 0x01
    2936:	fa 81       	ldd	r31, Y+2	; 0x02
    2938:	81 81       	ldd	r24, Z+1	; 0x01
    293a:	82 30       	cpi	r24, 0x02	; 2
    293c:	41 f4       	brne	.+16     	; 0x294e <TIMER2_init+0x4e>
	{
		/*	Enable CTC mode interrupt from TIMSK register	*/
		TIMSK |= (1<<OCIE2);
    293e:	a9 e5       	ldi	r26, 0x59	; 89
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e9 e5       	ldi	r30, 0x59	; 89
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	8c 93       	st	X, r24
    294c:	0c c0       	rjmp	.+24     	; 0x2966 <TIMER2_init+0x66>
	}
	else if(a_configuration_Ptr->s_timerMode  == NORMAL_MODE)
    294e:	e9 81       	ldd	r30, Y+1	; 0x01
    2950:	fa 81       	ldd	r31, Y+2	; 0x02
    2952:	81 81       	ldd	r24, Z+1	; 0x01
    2954:	88 23       	and	r24, r24
    2956:	39 f4       	brne	.+14     	; 0x2966 <TIMER2_init+0x66>
	{
		/*	Enable Normal mode interrupt from TIMSK register	*/
		TIMSK |= (1<<TOIE2);
    2958:	a9 e5       	ldi	r26, 0x59	; 89
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e9 e5       	ldi	r30, 0x59	; 89
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 64       	ori	r24, 0x40	; 64
    2964:	8c 93       	st	X, r24
	 *  			   any of them in the configurations
	 *  CS2 2:0      : They are set according to the Prescaler chosen by the
	 *  			   used at the dynamic configurations.
	 */

	TCCR2 = (1<<FOC2) |  (a_configuration_Ptr->s_prescaler) \
    2966:	a5 e4       	ldi	r26, 0x45	; 69
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	80 68       	ori	r24, 0x80	; 128
    2972:	28 2f       	mov	r18, r24
    2974:	e9 81       	ldd	r30, Y+1	; 0x01
    2976:	fa 81       	ldd	r31, Y+2	; 0x02
    2978:	81 81       	ldd	r24, Z+1	; 0x01
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	81 70       	andi	r24, 0x01	; 1
    2980:	90 70       	andi	r25, 0x00	; 0
    2982:	00 24       	eor	r0, r0
    2984:	96 95       	lsr	r25
    2986:	87 95       	ror	r24
    2988:	07 94       	ror	r0
    298a:	96 95       	lsr	r25
    298c:	87 95       	ror	r24
    298e:	07 94       	ror	r0
    2990:	98 2f       	mov	r25, r24
    2992:	80 2d       	mov	r24, r0
    2994:	28 2b       	or	r18, r24
    2996:	e9 81       	ldd	r30, Y+1	; 0x01
    2998:	fa 81       	ldd	r31, Y+2	; 0x02
    299a:	81 81       	ldd	r24, Z+1	; 0x01
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	82 70       	andi	r24, 0x02	; 2
    29a2:	90 70       	andi	r25, 0x00	; 0
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	82 2b       	or	r24, r18
    29ae:	8c 93       	st	X, r24
					  |( (a_configuration_Ptr->s_timerMode & 0x01) << WGM20) \
					  |( (a_configuration_Ptr->s_timerMode & 0x02) <<(WGM21-1)) ;


}
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <__vector_9>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer0 finishes counting at Normal mode
 */
ISR(TIMER0_OVF_vect)
{
    29ba:	1f 92       	push	r1
    29bc:	0f 92       	push	r0
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	0f 92       	push	r0
    29c2:	11 24       	eor	r1, r1
    29c4:	2f 93       	push	r18
    29c6:	3f 93       	push	r19
    29c8:	4f 93       	push	r20
    29ca:	5f 93       	push	r21
    29cc:	6f 93       	push	r22
    29ce:	7f 93       	push	r23
    29d0:	8f 93       	push	r24
    29d2:	9f 93       	push	r25
    29d4:	af 93       	push	r26
    29d6:	bf 93       	push	r27
    29d8:	ef 93       	push	r30
    29da:	ff 93       	push	r31
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer0_Ptr != NULL_PTR)
    29e4:	80 91 96 00 	lds	r24, 0x0096
    29e8:	90 91 97 00 	lds	r25, 0x0097
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	29 f0       	breq	.+10     	; 0x29fa <__vector_9+0x40>
	{
		(* g_callBackFunctionforTimer0_Ptr)();
    29f0:	e0 91 96 00 	lds	r30, 0x0096
    29f4:	f0 91 97 00 	lds	r31, 0x0097
    29f8:	09 95       	icall
	}
}
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	ff 91       	pop	r31
    2a00:	ef 91       	pop	r30
    2a02:	bf 91       	pop	r27
    2a04:	af 91       	pop	r26
    2a06:	9f 91       	pop	r25
    2a08:	8f 91       	pop	r24
    2a0a:	7f 91       	pop	r23
    2a0c:	6f 91       	pop	r22
    2a0e:	5f 91       	pop	r21
    2a10:	4f 91       	pop	r20
    2a12:	3f 91       	pop	r19
    2a14:	2f 91       	pop	r18
    2a16:	0f 90       	pop	r0
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	0f 90       	pop	r0
    2a1c:	1f 90       	pop	r1
    2a1e:	18 95       	reti

00002a20 <__vector_19>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer0 finishes counting at CTC mode
 */
ISR(TIMER0_COMP_vect)
{
    2a20:	1f 92       	push	r1
    2a22:	0f 92       	push	r0
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	0f 92       	push	r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	2f 93       	push	r18
    2a2c:	3f 93       	push	r19
    2a2e:	4f 93       	push	r20
    2a30:	5f 93       	push	r21
    2a32:	6f 93       	push	r22
    2a34:	7f 93       	push	r23
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    2a3e:	ef 93       	push	r30
    2a40:	ff 93       	push	r31
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer0_Ptr != NULL_PTR)
    2a4a:	80 91 96 00 	lds	r24, 0x0096
    2a4e:	90 91 97 00 	lds	r25, 0x0097
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	29 f0       	breq	.+10     	; 0x2a60 <__vector_19+0x40>
	{
		(* g_callBackFunctionforTimer0_Ptr)();
    2a56:	e0 91 96 00 	lds	r30, 0x0096
    2a5a:	f0 91 97 00 	lds	r31, 0x0097
    2a5e:	09 95       	icall
	}
}
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	ff 91       	pop	r31
    2a66:	ef 91       	pop	r30
    2a68:	bf 91       	pop	r27
    2a6a:	af 91       	pop	r26
    2a6c:	9f 91       	pop	r25
    2a6e:	8f 91       	pop	r24
    2a70:	7f 91       	pop	r23
    2a72:	6f 91       	pop	r22
    2a74:	5f 91       	pop	r21
    2a76:	4f 91       	pop	r20
    2a78:	3f 91       	pop	r19
    2a7a:	2f 91       	pop	r18
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	0f 90       	pop	r0
    2a82:	1f 90       	pop	r1
    2a84:	18 95       	reti

00002a86 <__vector_8>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer1 finishes counting at Normal mode
 */
ISR(TIMER1_OVF_vect)
{
    2a86:	1f 92       	push	r1
    2a88:	0f 92       	push	r0
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	0f 92       	push	r0
    2a8e:	11 24       	eor	r1, r1
    2a90:	2f 93       	push	r18
    2a92:	3f 93       	push	r19
    2a94:	4f 93       	push	r20
    2a96:	5f 93       	push	r21
    2a98:	6f 93       	push	r22
    2a9a:	7f 93       	push	r23
    2a9c:	8f 93       	push	r24
    2a9e:	9f 93       	push	r25
    2aa0:	af 93       	push	r26
    2aa2:	bf 93       	push	r27
    2aa4:	ef 93       	push	r30
    2aa6:	ff 93       	push	r31
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer1_Ptr != NULL_PTR)
    2ab0:	80 91 98 00 	lds	r24, 0x0098
    2ab4:	90 91 99 00 	lds	r25, 0x0099
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	29 f0       	breq	.+10     	; 0x2ac6 <__vector_8+0x40>
	{
		(* g_callBackFunctionforTimer1_Ptr)();
    2abc:	e0 91 98 00 	lds	r30, 0x0098
    2ac0:	f0 91 99 00 	lds	r31, 0x0099
    2ac4:	09 95       	icall
	}
}
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	0f 90       	pop	r0
    2ae8:	1f 90       	pop	r1
    2aea:	18 95       	reti

00002aec <__vector_6>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer1 finishes counting at CTC mode
 */
ISR(TIMER1_COMPA_vect)
{
    2aec:	1f 92       	push	r1
    2aee:	0f 92       	push	r0
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	0f 92       	push	r0
    2af4:	11 24       	eor	r1, r1
    2af6:	2f 93       	push	r18
    2af8:	3f 93       	push	r19
    2afa:	4f 93       	push	r20
    2afc:	5f 93       	push	r21
    2afe:	6f 93       	push	r22
    2b00:	7f 93       	push	r23
    2b02:	8f 93       	push	r24
    2b04:	9f 93       	push	r25
    2b06:	af 93       	push	r26
    2b08:	bf 93       	push	r27
    2b0a:	ef 93       	push	r30
    2b0c:	ff 93       	push	r31
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer1_Ptr != NULL_PTR)
    2b16:	80 91 98 00 	lds	r24, 0x0098
    2b1a:	90 91 99 00 	lds	r25, 0x0099
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	29 f0       	breq	.+10     	; 0x2b2c <__vector_6+0x40>
	{
		(* g_callBackFunctionforTimer1_Ptr)();
    2b22:	e0 91 98 00 	lds	r30, 0x0098
    2b26:	f0 91 99 00 	lds	r31, 0x0099
    2b2a:	09 95       	icall
	}
}
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	ff 91       	pop	r31
    2b32:	ef 91       	pop	r30
    2b34:	bf 91       	pop	r27
    2b36:	af 91       	pop	r26
    2b38:	9f 91       	pop	r25
    2b3a:	8f 91       	pop	r24
    2b3c:	7f 91       	pop	r23
    2b3e:	6f 91       	pop	r22
    2b40:	5f 91       	pop	r21
    2b42:	4f 91       	pop	r20
    2b44:	3f 91       	pop	r19
    2b46:	2f 91       	pop	r18
    2b48:	0f 90       	pop	r0
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	0f 90       	pop	r0
    2b4e:	1f 90       	pop	r1
    2b50:	18 95       	reti

00002b52 <__vector_4>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer2 finishes counting at Normal mode
 */
ISR(TIMER2_OVF_vect)
{
    2b52:	1f 92       	push	r1
    2b54:	0f 92       	push	r0
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	0f 92       	push	r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	2f 93       	push	r18
    2b5e:	3f 93       	push	r19
    2b60:	4f 93       	push	r20
    2b62:	5f 93       	push	r21
    2b64:	6f 93       	push	r22
    2b66:	7f 93       	push	r23
    2b68:	8f 93       	push	r24
    2b6a:	9f 93       	push	r25
    2b6c:	af 93       	push	r26
    2b6e:	bf 93       	push	r27
    2b70:	ef 93       	push	r30
    2b72:	ff 93       	push	r31
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer2_Ptr != NULL_PTR)
    2b7c:	80 91 9a 00 	lds	r24, 0x009A
    2b80:	90 91 9b 00 	lds	r25, 0x009B
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	29 f0       	breq	.+10     	; 0x2b92 <__vector_4+0x40>
	{
		(* g_callBackFunctionforTimer2_Ptr)();
    2b88:	e0 91 9a 00 	lds	r30, 0x009A
    2b8c:	f0 91 9b 00 	lds	r31, 0x009B
    2b90:	09 95       	icall
	}
}
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	ff 91       	pop	r31
    2b98:	ef 91       	pop	r30
    2b9a:	bf 91       	pop	r27
    2b9c:	af 91       	pop	r26
    2b9e:	9f 91       	pop	r25
    2ba0:	8f 91       	pop	r24
    2ba2:	7f 91       	pop	r23
    2ba4:	6f 91       	pop	r22
    2ba6:	5f 91       	pop	r21
    2ba8:	4f 91       	pop	r20
    2baa:	3f 91       	pop	r19
    2bac:	2f 91       	pop	r18
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	0f 90       	pop	r0
    2bb4:	1f 90       	pop	r1
    2bb6:	18 95       	reti

00002bb8 <__vector_3>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer2 finishes counting at CTC mode
 */
ISR(TIMER2_COMP_vect)
{
    2bb8:	1f 92       	push	r1
    2bba:	0f 92       	push	r0
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	0f 92       	push	r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	2f 93       	push	r18
    2bc4:	3f 93       	push	r19
    2bc6:	4f 93       	push	r20
    2bc8:	5f 93       	push	r21
    2bca:	6f 93       	push	r22
    2bcc:	7f 93       	push	r23
    2bce:	8f 93       	push	r24
    2bd0:	9f 93       	push	r25
    2bd2:	af 93       	push	r26
    2bd4:	bf 93       	push	r27
    2bd6:	ef 93       	push	r30
    2bd8:	ff 93       	push	r31
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer2_Ptr != NULL_PTR)
    2be2:	80 91 9a 00 	lds	r24, 0x009A
    2be6:	90 91 9b 00 	lds	r25, 0x009B
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	29 f0       	breq	.+10     	; 0x2bf8 <__vector_3+0x40>
	{
		(* g_callBackFunctionforTimer2_Ptr)();
    2bee:	e0 91 9a 00 	lds	r30, 0x009A
    2bf2:	f0 91 9b 00 	lds	r31, 0x009B
    2bf6:	09 95       	icall
	}
}
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	ff 91       	pop	r31
    2bfe:	ef 91       	pop	r30
    2c00:	bf 91       	pop	r27
    2c02:	af 91       	pop	r26
    2c04:	9f 91       	pop	r25
    2c06:	8f 91       	pop	r24
    2c08:	7f 91       	pop	r23
    2c0a:	6f 91       	pop	r22
    2c0c:	5f 91       	pop	r21
    2c0e:	4f 91       	pop	r20
    2c10:	3f 91       	pop	r19
    2c12:	2f 91       	pop	r18
    2c14:	0f 90       	pop	r0
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	0f 90       	pop	r0
    2c1a:	1f 90       	pop	r1
    2c1c:	18 95       	reti

00002c1e <TIMER_init>:
 * 	2. Set the Operating Mode
 * 	3. Put initial value to start counting
 * 	4. Put a compare value in case of using CTC Mode
 */
void TIMER_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <TIMER_init+0x6>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	if( a_configuration_Ptr->s_timerID == TIMER0)
    2c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c30:	80 81       	ld	r24, Z
    2c32:	88 23       	and	r24, r24
    2c34:	29 f4       	brne	.+10     	; 0x2c40 <TIMER_init+0x22>
	{
		/*	Initializing Timer 0 according to the Dynamic configurations   */
		TIMER0_init(a_configuration_Ptr);
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	0e 94 bc 13 	call	0x2778	; 0x2778 <TIMER0_init>
    2c3e:	13 c0       	rjmp	.+38     	; 0x2c66 <TIMER_init+0x48>
	}
	else if( a_configuration_Ptr->s_timerID == TIMER1)
    2c40:	e9 81       	ldd	r30, Y+1	; 0x01
    2c42:	fa 81       	ldd	r31, Y+2	; 0x02
    2c44:	80 81       	ld	r24, Z
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	29 f4       	brne	.+10     	; 0x2c54 <TIMER_init+0x36>
	{
		/*	Initializing Timer 1 according to the Dynamic configurations   */
		TIMER1_init(a_configuration_Ptr);
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	0e 94 19 14 	call	0x2832	; 0x2832 <TIMER1_init>
    2c52:	09 c0       	rjmp	.+18     	; 0x2c66 <TIMER_init+0x48>
	}
	else if( a_configuration_Ptr->s_timerID == TIMER2)
    2c54:	e9 81       	ldd	r30, Y+1	; 0x01
    2c56:	fa 81       	ldd	r31, Y+2	; 0x02
    2c58:	80 81       	ld	r24, Z
    2c5a:	82 30       	cpi	r24, 0x02	; 2
    2c5c:	21 f4       	brne	.+8      	; 0x2c66 <TIMER_init+0x48>
	{
		/*	Initializing Timer 2 according to the Dynamic configurations   */
		TIMER2_init(a_configuration_Ptr);
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	0e 94 80 14 	call	0x2900	; 0x2900 <TIMER2_init>
	}
}
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <TIMER_setCallBackFunction>:
 * Timer finishes counting.
 * It save the argument address of the function in a Global one so that it can be
 * called from the ISR.
 */
void TIMER_setCallBackFunction(TimerSelect a_timerID ,void (* a_callBackfunction_Ptr)(void))
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <TIMER_setCallBackFunction+0x6>
    2c76:	0f 92       	push	r0
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	7b 83       	std	Y+3, r23	; 0x03
    2c80:	6a 83       	std	Y+2, r22	; 0x02
	if( a_timerID == TIMER0)
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	88 23       	and	r24, r24
    2c86:	39 f4       	brne	.+14     	; 0x2c96 <TIMER_setCallBackFunction+0x26>
	{
		/* Save the address of the Call back function in a global variable of Timer0 */
		g_callBackFunctionforTimer0_Ptr = a_callBackfunction_Ptr;
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	90 93 97 00 	sts	0x0097, r25
    2c90:	80 93 96 00 	sts	0x0096, r24
    2c94:	13 c0       	rjmp	.+38     	; 0x2cbc <TIMER_setCallBackFunction+0x4c>
	}
	else if( a_timerID == TIMER1)
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	39 f4       	brne	.+14     	; 0x2caa <TIMER_setCallBackFunction+0x3a>
	{
		/* Save the address of the Call back function in a global variable of Timer1 */
		g_callBackFunctionforTimer1_Ptr = a_callBackfunction_Ptr;
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	90 93 99 00 	sts	0x0099, r25
    2ca4:	80 93 98 00 	sts	0x0098, r24
    2ca8:	09 c0       	rjmp	.+18     	; 0x2cbc <TIMER_setCallBackFunction+0x4c>

	}
	else if( a_timerID == TIMER2)
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	82 30       	cpi	r24, 0x02	; 2
    2cae:	31 f4       	brne	.+12     	; 0x2cbc <TIMER_setCallBackFunction+0x4c>
	{
		/* Save the address of the Call back function in a global variable of Timer2 */
		g_callBackFunctionforTimer2_Ptr = a_callBackfunction_Ptr;
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	90 93 9b 00 	sts	0x009B, r25
    2cb8:	80 93 9a 00 	sts	0x009A, r24
	}
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <TIMER_deInit>:
/*
 * Description:
 * This function will Turn off the Timer which is selected by the user as an input.
 */
void TIMER_deInit(TimerSelect a_timerID)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <TIMER_deInit+0x6>
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	if( a_timerID == TIMER0)
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	88 23       	and	r24, r24
    2cd8:	c1 f4       	brne	.+48     	; 0x2d0a <TIMER_deInit+0x42>
	{
		/*	Turn Off Timer0 clock */
		TCCR0 = 0;
    2cda:	e3 e5       	ldi	r30, 0x53	; 83
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	10 82       	st	Z, r1
		/*	Resting the values of initial value and compare value  */
		TCNT0 = 0;
    2ce0:	e2 e5       	ldi	r30, 0x52	; 82
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	10 82       	st	Z, r1
		OCR0  = 0;
    2ce6:	ec e5       	ldi	r30, 0x5C	; 92
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	10 82       	st	Z, r1
		/*	Disabling the Interrupts of CTC , Normal mode in Timer0  */
		TIMSK &= ~(1<<OCIE0);
    2cec:	a9 e5       	ldi	r26, 0x59	; 89
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e9 e5       	ldi	r30, 0x59	; 89
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	8d 7f       	andi	r24, 0xFD	; 253
    2cf8:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE0);
    2cfa:	a9 e5       	ldi	r26, 0x59	; 89
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e9 e5       	ldi	r30, 0x59	; 89
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8e 7f       	andi	r24, 0xFE	; 254
    2d06:	8c 93       	st	X, r24
    2d08:	49 c0       	rjmp	.+146    	; 0x2d9c <TIMER_deInit+0xd4>
	}
	else if( a_timerID == TIMER1)
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	81 30       	cpi	r24, 0x01	; 1
    2d0e:	61 f5       	brne	.+88     	; 0x2d68 <TIMER_deInit+0xa0>
	{
		uint8 L_sreg = SREG;
    2d10:	ef e5       	ldi	r30, 0x5F	; 95
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	89 83       	std	Y+1, r24	; 0x01

		/* Turn Timer 1 OFF	*/
		TCCR1A = 0 ;
    2d18:	ef e4       	ldi	r30, 0x4F	; 79
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	10 82       	st	Z, r1
		TCCR1B = 0;
    2d1e:	ee e4       	ldi	r30, 0x4E	; 78
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	10 82       	st	Z, r1
		* register, and the interrupt code updates the temporary register by accessing
		* the same or any other of the 16-bit Timer Registers, then the result of
		* the access outside the interrupt will be corrupted.
		*  So we must do Atomic read/Write operations.
		*/
		SREG &= ~(1<<7); /*	Disable interrupts	*/
    2d24:	af e5       	ldi	r26, 0x5F	; 95
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	ef e5       	ldi	r30, 0x5F	; 95
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	8f 77       	andi	r24, 0x7F	; 127
    2d30:	8c 93       	st	X, r24

		TCNT1 = 0 ;		/*	Clear the initial value register	*/
    2d32:	ec e4       	ldi	r30, 0x4C	; 76
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	11 82       	std	Z+1, r1	; 0x01
    2d38:	10 82       	st	Z, r1
		OCR1A = 0 ;		/*	Clear the Compare value register	*/
    2d3a:	ea e4       	ldi	r30, 0x4A	; 74
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	11 82       	std	Z+1, r1	; 0x01
    2d40:	10 82       	st	Z, r1
		SREG = L_sreg; 	/*	Return to the default status control register values  */
    2d42:	ef e5       	ldi	r30, 0x5F	; 95
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	80 83       	st	Z, r24

		/*	Disabling the Interrupts of CTC , Normal mode in Timer1  */
		TIMSK &= ~(1<<OCIE1A);
    2d4a:	a9 e5       	ldi	r26, 0x59	; 89
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e9 e5       	ldi	r30, 0x59	; 89
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	8f 7e       	andi	r24, 0xEF	; 239
    2d56:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE1);
    2d58:	a9 e5       	ldi	r26, 0x59	; 89
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e9 e5       	ldi	r30, 0x59	; 89
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	8b 7f       	andi	r24, 0xFB	; 251
    2d64:	8c 93       	st	X, r24
    2d66:	1a c0       	rjmp	.+52     	; 0x2d9c <TIMER_deInit+0xd4>

	}
	else if( a_timerID == TIMER2)
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	82 30       	cpi	r24, 0x02	; 2
    2d6c:	b9 f4       	brne	.+46     	; 0x2d9c <TIMER_deInit+0xd4>
	{
		/*	Turn Off Timer2 clock */
		TCCR2 = 0;
    2d6e:	e5 e4       	ldi	r30, 0x45	; 69
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	10 82       	st	Z, r1
		/*	Resting the values of initial value and compare value  */
		TCNT2 = 0;
    2d74:	e4 e4       	ldi	r30, 0x44	; 68
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	10 82       	st	Z, r1
		OCR2  = 0;
    2d7a:	e3 e4       	ldi	r30, 0x43	; 67
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	10 82       	st	Z, r1
		/*	Disabling the Interrupts of CTC , Normal mode in Timer2  */
		TIMSK &= ~(1<<OCIE2);
    2d80:	a9 e5       	ldi	r26, 0x59	; 89
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e9 e5       	ldi	r30, 0x59	; 89
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	8f 77       	andi	r24, 0x7F	; 127
    2d8c:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE2);
    2d8e:	a9 e5       	ldi	r26, 0x59	; 89
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e9 e5       	ldi	r30, 0x59	; 89
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8f 7b       	andi	r24, 0xBF	; 191
    2d9a:	8c 93       	st	X, r24

	}
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <TWI_init>:
 * TWBR can't have negative values. if it has, overflow will be the result So to
 * prevent any error make sure that the supplied frequency is more than
 * or equal F_CPU / 16
 */
void TWI_init(const DynamicConfiguration_TWI *a_configuration_Ptr)
{
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <TWI_init+0xa>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
	 * TWSTO = 0 : We won't generate stop condition yet
	 * TWSTA = 0 : We won't generate start condition
	 * TWEA  = 0 : Disable Acknowledge bit , will be activated when needed
 	 * TWINT     : Has no effect on it as is set by hardware and cleared by setting it
 	 */
	TWCR = (1<<TWEN);
    2db8:	e6 e5       	ldi	r30, 0x56	; 86
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	84 e0       	ldi	r24, 0x04	; 4
    2dbe:	80 83       	st	Z, r24
	 * TWSR register Description :
	 *
	 * TWPS 1:0 = 0 : We set the prescaler which is used in the formula to calculate
	 * 				  SCL frequency to zero to have a Prescaler value = 1
	 */
	TWSR &= ~(1<<TWPS1) & ~(1<<TWPS0) ;
    2dc0:	a1 e2       	ldi	r26, 0x21	; 33
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e1 e2       	ldi	r30, 0x21	; 33
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	8c 7f       	andi	r24, 0xFC	; 252
    2dcc:	8c 93       	st	X, r24
	 *  TWAR register Description:
	 *
	 *  TWGCE = 0 : Disable the Recognition of General calls over the bus
	 *  TWA 7:0   : They are set Dynamically according to the structure variable s_myAddress
	 */
	TWAR = (a_configuration_Ptr->s_myAddress) << 1 ;
    2dce:	22 e2       	ldi	r18, 0x22	; 34
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd6:	84 81       	ldd	r24, Z+4	; 0x04
    2dd8:	95 81       	ldd	r25, Z+5	; 0x05
    2dda:	a6 81       	ldd	r26, Z+6	; 0x06
    2ddc:	b7 81       	ldd	r27, Z+7	; 0x07
    2dde:	88 0f       	add	r24, r24
    2de0:	f9 01       	movw	r30, r18
    2de2:	80 83       	st	Z, r24
	 *
	 * So to prevent any error make sure that the supplied frequency is more than
	 * or equal F_CPU / 16
	 *
	 */
	TWBR = ( (F_CPU / a_configuration_Ptr->s_frequencyOfSCL) - 16  ) / (2 * 1) ;
    2de4:	00 e2       	ldi	r16, 0x20	; 32
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dea:	fa 81       	ldd	r31, Y+2	; 0x02
    2dec:	20 81       	ld	r18, Z
    2dee:	31 81       	ldd	r19, Z+1	; 0x01
    2df0:	42 81       	ldd	r20, Z+2	; 0x02
    2df2:	53 81       	ldd	r21, Z+3	; 0x03
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	92 e1       	ldi	r25, 0x12	; 18
    2df8:	aa e7       	ldi	r26, 0x7A	; 122
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__udivmodsi4>
    2e04:	da 01       	movw	r26, r20
    2e06:	c9 01       	movw	r24, r18
    2e08:	40 97       	sbiw	r24, 0x10	; 16
    2e0a:	a1 09       	sbc	r26, r1
    2e0c:	b1 09       	sbc	r27, r1
    2e0e:	b6 95       	lsr	r27
    2e10:	a7 95       	ror	r26
    2e12:	97 95       	ror	r25
    2e14:	87 95       	ror	r24
    2e16:	f8 01       	movw	r30, r16
    2e18:	80 83       	st	Z, r24

}
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <TWI_startCondition>:
 * Description:
 * This function will Make The First TWI operation for every TWI frame which
 * is the Start Condition
 */
void TWI_startCondition(void)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
	 * TWEA  = 0 : Disable Acknowledge bit , will be activated when needed
 	 * TWINT = 0 : It will be cleared to prevent CLK stretch because when it is
 	 *  		   set it cause Clock Stretch , We need the CLK  for TWI
 	 *  		   operation (start) to take place
 	 */
	 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) ;
    2e30:	e6 e5       	ldi	r30, 0x56	; 86
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	84 ea       	ldi	r24, 0xA4	; 164
    2e36:	80 83       	st	Z, r24

	 /*
	  * Polling until TWINT is set as when it is set it is indication that TWI
	  * has finished the current job which is sending the Start condition
	  */
	 while( BIT_IS_CLEAR(TWCR , TWINT) );
    2e38:	e6 e5       	ldi	r30, 0x56	; 86
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	88 23       	and	r24, r24
    2e40:	dc f7       	brge	.-10     	; 0x2e38 <TWI_startCondition+0x10>
}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <TWI_stopCondition>:
 * Description:
 * This function will Make The Last TWI operation for every TWI frame which
 * is the Stop Condition
 */
void TWI_stopCondition(void)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
	 * TWEA  = 0 : Disable Acknowledge bit , will be activated when needed
 	 * TWINT = 0 : It will be cleared to prevent CLK stretch because when it is
 	 *  		   set it cause Clock Stretch , We need the CLK for TWI
 	 *  		   operation (Stop) to take place
 	 */
	 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN) ;
    2e50:	e6 e5       	ldi	r30, 0x56	; 86
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	84 e9       	ldi	r24, 0x94	; 148
    2e56:	80 83       	st	Z, r24

}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <TWI_writeByte>:
/*
 * Description:
 * This function will write the the input data in TWDR if it has access to TWI bus
 */
void TWI_writeByte(uint8 a_data)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	0f 92       	push	r0
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Put the data need to be written in TWDR and it supposed to be sent in the
	 * bus as soon as TWBR is assigned with the data value
	 * Here it won't sent because the TWINT is set which result in Clock Stretch
	 */
	TWDR = a_data;
    2e6a:	e3 e2       	ldi	r30, 0x23	; 35
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	80 83       	st	Z, r24
	 * TWEA  = 0 : Disable Acknowledge bit , will be activated when needed
 	 * TWINT = 0 : It will be cleared to prevent CLK stretch because when it is
 	 *  		   set it cause Clock Stretch , We need the CLK for TWI
 	 *  		   operation (write data) to take place
 	 */
	 TWCR = (1<<TWINT) | (1<<TWEN) ;
    2e72:	e6 e5       	ldi	r30, 0x56	; 86
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	84 e8       	ldi	r24, 0x84	; 132
    2e78:	80 83       	st	Z, r24

	 /*
	  * Polling until TWINT is set as when it is set it is indication that TWI
	  * has finished the current job which is Writing data in the bus
	  */
	 while( BIT_IS_CLEAR(TWCR , TWINT) );
    2e7a:	e6 e5       	ldi	r30, 0x56	; 86
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	88 23       	and	r24, r24
    2e82:	dc f7       	brge	.-10     	; 0x2e7a <TWI_writeByte+0x1c>

}
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <TWI_readByteWithACK>:
 * and will respond with ACK if data is read and reached to its destination successfully
 *
 * It will return the data read if there is no errors happens  in TWI operations
 */
uint8 TWI_readByteWithACK(void)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
	 * TWEA  = 1 : Enable the ACK so that after reading the data an ACK is sent to data sender
 	 * TWINT = 0 : It will be cleared to prevent CLK stretch because when it is
 	 *  		   set it cause Clock Stretch , We need the CLK for TWI
 	 *  		   operation (Reading data) to take place
 	 */
	 TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    2e94:	e6 e5       	ldi	r30, 0x56	; 86
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	84 ec       	ldi	r24, 0xC4	; 196
    2e9a:	80 83       	st	Z, r24
	 /*
	  * Polling until TWINT is set as when it is set it is indication that TWI
	  * has finished the current job which is Reading the data from the bus and
	  * save it TWDR
	  */
	 while( BIT_IS_CLEAR(TWCR , TWINT) );
    2e9c:	e6 e5       	ldi	r30, 0x56	; 86
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 23       	and	r24, r24
    2ea4:	dc f7       	brge	.-10     	; 0x2e9c <TWI_readByteWithACK+0x10>

	 /*	When data is received successfully we return it	*/
	 return TWDR;
    2ea6:	e3 e2       	ldi	r30, 0x23	; 35
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
}
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <TWI_readByteWithNACK>:
 * and won't respond with ACK -which mean it send NACK-
 *
 * It will return the data read if there is no errors happens  in TWI operations
 */
uint8 TWI_readByteWithNACK(void)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
	 * TWEA  = 0 : Disable the ACK so that after reading the data an NACK is sent to data sender
 	 * TWINT = 0 : It will be cleared to prevent CLK stretch because when it is
 	 *  		   set it cause Clock Stretch , We need the CLK for TWI
 	 *  		   operation (Reading data) to take place
 	 */
	 TWCR = (1<<TWINT) | (1<<TWEN);
    2eba:	e6 e5       	ldi	r30, 0x56	; 86
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	84 e8       	ldi	r24, 0x84	; 132
    2ec0:	80 83       	st	Z, r24
	 /*
	  * Polling until TWINT is set as when it is set it is indication that TWI
	  * has finished the current job which is Reading the data from the bus and
	  * save it TWDR
	  */
	 while( BIT_IS_CLEAR(TWCR , TWINT) );
    2ec2:	e6 e5       	ldi	r30, 0x56	; 86
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 23       	and	r24, r24
    2eca:	dc f7       	brge	.-10     	; 0x2ec2 <TWI_readByteWithNACK+0x10>

	 /*	When data is received successfully we return it	*/
	 return TWDR;
    2ecc:	e3 e2       	ldi	r30, 0x23	; 35
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z

}
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <TWI_getStatus>:
 * These 5 bit changes according to the actions happens[Start,restart,send byte,...]
 * It gives you more information than TWINT flag If you want more information
 * about the action see the Status table at the Data sheet.
 */
uint8 TWI_getStatus(void)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
	 *
	 * We don't shift them Left because the default value of these status bits
	 * on the data sheet is already shifted to right , What is mean is the first
	 * 3 bits of all status values are always zeros
	 */
	return (TWSR & 0xF8);
    2ee0:	e1 e2       	ldi	r30, 0x21	; 33
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 7f       	andi	r24, 0xF8	; 248
}
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <UART_init>:
 * This function initialize the UART Module Dynamically according to the user
 * configuration : Number of stop bit, Number of data bit ,Parity status
 * and the baud rate.
 */
void UART_init(const DynamicConfiguration_UART *a_configuration_Ptr)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <UART_init+0x6>
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <UART_init+0x8>
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	9c 83       	std	Y+4, r25	; 0x04
    2efc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 L_ubrrValue = 0;
    2efe:	1a 82       	std	Y+2, r1	; 0x02
    2f00:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Always work in Double speed mode to decrease the change that UBRR register
	 * will have a negative value which we don't want to happen.
	 */
	UCSRA |= (1<< U2X);
    2f02:	ab e2       	ldi	r26, 0x2B	; 43
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	eb e2       	ldi	r30, 0x2B	; 43
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	82 60       	ori	r24, 0x02	; 2
    2f0e:	8c 93       	st	X, r24
	 * UCSZ2 = Bit2 from the structure variable  s_noOfDataBit [Decided Dynamically]
	 * RXB8 & TXB8 = 0  : It doesn't matter if we put them in zero because if
	 * 					  you use 9 bit mode this data will be set or read in
	 * 					  another function after calling the initialization function
 	 */
	UCSRB = (1<<RXEN) | (1<<TXEN) |  (a_configuration_Ptr->s_numOfDataBit  & 0x04);
    2f10:	aa e2       	ldi	r26, 0x2A	; 42
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	eb 81       	ldd	r30, Y+3	; 0x03
    2f16:	fc 81       	ldd	r31, Y+4	; 0x04
    2f18:	81 81       	ldd	r24, Z+1	; 0x01
    2f1a:	84 70       	andi	r24, 0x04	; 4
    2f1c:	88 61       	ori	r24, 0x18	; 24
    2f1e:	8c 93       	st	X, r24
	* UCSZ1:0 = Bit1:0 from the structure variable  s_noOfDataBit [Decided Dynamically]
	* UCPOL   = 0 We don't care about it as we work with Asynchronous mode
	* 			not Synchronous
	*/

	UCSRC = (1<<URSEL) | ( ( a_configuration_Ptr->s_numOfStopBit  &0x01)   << USBS ) \
    2f20:	a0 e4       	ldi	r26, 0x40	; 64
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	eb 81       	ldd	r30, Y+3	; 0x03
    2f26:	fc 81       	ldd	r31, Y+4	; 0x04
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	81 70       	andi	r24, 0x01	; 1
    2f30:	90 70       	andi	r25, 0x00	; 0
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	28 2f       	mov	r18, r24
    2f40:	20 68       	ori	r18, 0x80	; 128
    2f42:	eb 81       	ldd	r30, Y+3	; 0x03
    2f44:	fc 81       	ldd	r31, Y+4	; 0x04
    2f46:	81 81       	ldd	r24, Z+1	; 0x01
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	83 70       	andi	r24, 0x03	; 3
    2f4e:	90 70       	andi	r25, 0x00	; 0
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	28 2b       	or	r18, r24
    2f56:	eb 81       	ldd	r30, Y+3	; 0x03
    2f58:	fc 81       	ldd	r31, Y+4	; 0x04
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	83 70       	andi	r24, 0x03	; 3
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	82 95       	swap	r24
    2f66:	92 95       	swap	r25
    2f68:	90 7f       	andi	r25, 0xF0	; 240
    2f6a:	98 27       	eor	r25, r24
    2f6c:	80 7f       	andi	r24, 0xF0	; 240
    2f6e:	98 27       	eor	r25, r24
    2f70:	82 2b       	or	r24, r18
    2f72:	8c 93       	st	X, r24
	 *  ( F_CPU / (a_configuration_Ptr->s_baudRate * 8) ) >= 1
	 *
	 * If a negative value is the result Overflow will happen and the data stored
	 * in UBRR will be rubbish to take care of baud rate calculations
	 */
	L_ubrrValue = (uint16)( ( F_CPU / (a_configuration_Ptr->s_baudRate * 8) ) - 1 );
    2f74:	eb 81       	ldd	r30, Y+3	; 0x03
    2f76:	fc 81       	ldd	r31, Y+4	; 0x04
    2f78:	83 81       	ldd	r24, Z+3	; 0x03
    2f7a:	94 81       	ldd	r25, Z+4	; 0x04
    2f7c:	a5 81       	ldd	r26, Z+5	; 0x05
    2f7e:	b6 81       	ldd	r27, Z+6	; 0x06
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	aa 1f       	adc	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	aa 1f       	adc	r26, r26
    2f8e:	bb 1f       	adc	r27, r27
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	aa 1f       	adc	r26, r26
    2f96:	bb 1f       	adc	r27, r27
    2f98:	9c 01       	movw	r18, r24
    2f9a:	ad 01       	movw	r20, r26
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	92 e1       	ldi	r25, 0x12	; 18
    2fa0:	aa e7       	ldi	r26, 0x7A	; 122
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__udivmodsi4>
    2fac:	da 01       	movw	r26, r20
    2fae:	c9 01       	movw	r24, r18
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	9a 83       	std	Y+2, r25	; 0x02
    2fb4:	89 83       	std	Y+1, r24	; 0x01

	/* Set the the last 4 bits in L_ubrrValue in UBRRH and URSEL = 0 to write
	 * in UBRRH register not USCRC register;
	 */
	UBRRH = L_ubrrValue >> 8 ;
    2fb6:	e0 e4       	ldi	r30, 0x40	; 64
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	89 2f       	mov	r24, r25
    2fc0:	99 27       	eor	r25, r25
    2fc2:	80 83       	st	Z, r24

	/* Set the the first 8 bits in L_ubrrValue in UBRRH	*/
	UBRRL = (uint8)L_ubrrValue;
    2fc4:	e9 e2       	ldi	r30, 0x29	; 41
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	80 83       	st	Z, r24
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <UART_sendData>:
 * Description :
 * This function will send the data -according to the number of data bit used-
 * serially to another UART device.
 */
void UART_sendData(uint8 a_data)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	89 83       	std	Y+1, r24	; 0x01

	/* Polling until UDRE flag is Set where the UDR will be empty and ready to take
	 * new data to transmit it
	 */
	while( BIT_IS_CLEAR(UCSRA,UDRE) );
    2fe6:	eb e2       	ldi	r30, 0x2B	; 43
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	80 72       	andi	r24, 0x20	; 32
    2ff2:	90 70       	andi	r25, 0x00	; 0
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	b9 f3       	breq	.-18     	; 0x2fe6 <UART_sendData+0xc>

	/*
	 * In case of 9 bit mode we put the 9th bit in UCSRB register to be transmitted
	 * if any mode other than 9 mode is chosen the 9th bit will be ignored.
	 */
	UCSRB = (UCSRB & 0xFE) | ( (a_data & 0x0100) >>8 );
    2ff8:	aa e2       	ldi	r26, 0x2A	; 42
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	ea e2       	ldi	r30, 0x2A	; 42
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	8e 7f       	andi	r24, 0xFE	; 254
    3004:	8c 93       	st	X, r24

	/* Send the 8 bit of the argument and according to the mode the needed bits
	 * will be taken and other will be ignored
	 */
	UDR = a_data;
    3006:	ec e2       	ldi	r30, 0x2C	; 44
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	80 83       	st	Z, r24
}
    300e:	0f 90       	pop	r0
    3010:	cf 91       	pop	r28
    3012:	df 91       	pop	r29
    3014:	08 95       	ret

00003016 <UART_receiveData>:
 * Description :
 * This function will Receive the data -according to the number of data bit used-
 * From another UART device.
 */
uint16 UART_receiveData(void)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <UART_receiveData+0x6>
    301c:	0f 92       	push	r0
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
	uint8 L_numOfDataBit=0;
    3022:	19 82       	std	Y+1, r1	; 0x01

	/* Loop until RXC will be set to 1 when the byte Which indicates
	 * that the incoming data has been received
	 */
	while( BIT_IS_CLEAR(UCSRA ,RXC )) ;
    3024:	eb e2       	ldi	r30, 0x2B	; 43
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	88 23       	and	r24, r24
    302c:	dc f7       	brge	.-10     	; 0x3024 <UART_receiveData+0xe>

	/*	Get the Configuration which tells me what is the number of data bit used  */
	L_numOfDataBit = (UCSRB & 0x04) | ( (UCSRC & 0x06) >> UCSZ0 ) ;
    302e:	ea e2       	ldi	r30, 0x2A	; 42
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	28 2f       	mov	r18, r24
    3036:	24 70       	andi	r18, 0x04	; 4
    3038:	e0 e4       	ldi	r30, 0x40	; 64
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	88 2f       	mov	r24, r24
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	86 70       	andi	r24, 0x06	; 6
    3044:	90 70       	andi	r25, 0x00	; 0
    3046:	95 95       	asr	r25
    3048:	87 95       	ror	r24
    304a:	82 2b       	or	r24, r18
    304c:	89 83       	std	Y+1, r24	; 0x01


	if(L_numOfDataBit == _9_DATA_BIT )
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	87 30       	cpi	r24, 0x07	; 7
    3052:	b1 f4       	brne	.+44     	; 0x3080 <UART_receiveData+0x6a>
	{
		/*If the number of data send is 9 bit so return the 8 bit in UDR and teh
		 * 9th bit in RXB8 in UCSRB register
		 */
		return ( UDR | ((UCSRB & 0x02) << 7) ) ;
    3054:	ec e2       	ldi	r30, 0x2C	; 44
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	ea e2       	ldi	r30, 0x2A	; 42
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	88 2f       	mov	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	82 70       	andi	r24, 0x02	; 2
    306a:	90 70       	andi	r25, 0x00	; 0
    306c:	96 95       	lsr	r25
    306e:	98 2f       	mov	r25, r24
    3070:	88 27       	eor	r24, r24
    3072:	97 95       	ror	r25
    3074:	87 95       	ror	r24
    3076:	82 2b       	or	r24, r18
    3078:	93 2b       	or	r25, r19
    307a:	9b 83       	std	Y+3, r25	; 0x03
    307c:	8a 83       	std	Y+2, r24	; 0x02
    307e:	07 c0       	rjmp	.+14     	; 0x308e <UART_receiveData+0x78>
	else
	{
		/*	If the number of data send is anything other than 9 bit mode return
		 *	the bits received in UDR register
		 */
		return UDR;
    3080:	ec e2       	ldi	r30, 0x2C	; 44
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	3b 83       	std	Y+3, r19	; 0x03
    308c:	2a 83       	std	Y+2, r18	; 0x02
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <UART_sendString>:
 * We will choose a symbol[ # ] that is known to both devices the Transmitter will
 * send all the strings ended with specific symbol[#] and the Receiver will receive the
 * string and loop until he found the symbol[#] , when he finds it will stop reading.
 */
void UART_sendString(const uint8 *a_str)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	00 d0       	rcall	.+0      	; 0x30a4 <UART_sendString+0x6>
    30a4:	0f 92       	push	r0
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	9b 83       	std	Y+3, r25	; 0x03
    30ac:	8a 83       	std	Y+2, r24	; 0x02
	/*	Counter to loop upon the coming String */
	uint8 i = 0 ;
    30ae:	19 82       	std	Y+1, r1	; 0x01
    30b0:	0e c0       	rjmp	.+28     	; 0x30ce <UART_sendString+0x30>
	 * it found -String has ended- break out of the loop
	 */
	while( a_str[i] != '\0')
	{
		/*	Send the whole string character by character  */
		UART_sendData(a_str[i]);
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	9b 81       	ldd	r25, Y+3	; 0x03
    30bc:	fc 01       	movw	r30, r24
    30be:	e2 0f       	add	r30, r18
    30c0:	f3 1f       	adc	r31, r19
    30c2:	80 81       	ld	r24, Z
    30c4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
		i++;
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	89 83       	std	Y+1, r24	; 0x01

	/* By using the counter the loop with iterate the string characters
	 * and each time we will compare each character with the null character if
	 * it found -String has ended- break out of the loop
	 */
	while( a_str[i] != '\0')
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	fc 01       	movw	r30, r24
    30da:	e2 0f       	add	r30, r18
    30dc:	f3 1f       	adc	r31, r19
    30de:	80 81       	ld	r24, Z
    30e0:	88 23       	and	r24, r24
    30e2:	39 f7       	brne	.-50     	; 0x30b2 <UART_sendString+0x14>
	}

	/* Always Send the symbol that we agree on as the last character so that in
	 * receive function we will stop taking input when the this symbol is detected
	 */
	UART_sendData('#');
    30e4:	83 e2       	ldi	r24, 0x23	; 35
    30e6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <UART_sendData>
}
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <UART_receiveString>:
 * We will choose a symbol[ # ] that is known to both devices the Transmitter will
 * send all the strings ended with specific symbol[#] and the Receiver will receive the
 * string and loop until he found the symbol[#] , when he finds it will stop reading.
 */
void UART_receiveString(uint8 *a_str)
{
    30f6:	0f 93       	push	r16
    30f8:	1f 93       	push	r17
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <UART_receiveString+0xa>
    3100:	0f 92       	push	r0
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	9b 83       	std	Y+3, r25	; 0x03
    3108:	8a 83       	std	Y+2, r24	; 0x02
	/*	Counter to loop upon the coming String */
	uint8 i = 0 ;
    310a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte only so that we can have a value to be compared
	 * with the symbol
	 */
	a_str[i] = UART_receiveData();
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	9b 81       	ldd	r25, Y+3	; 0x03
    3116:	8c 01       	movw	r16, r24
    3118:	02 0f       	add	r16, r18
    311a:	13 1f       	adc	r17, r19
    311c:	0e 94 0b 18 	call	0x3016	; 0x3016 <UART_receiveData>
    3120:	f8 01       	movw	r30, r16
    3122:	80 83       	st	Z, r24
    3124:	0f c0       	rjmp	.+30     	; 0x3144 <UART_receiveString+0x4e>

	/* Receive the whole string until the symbol '#' is found	*/
	while( a_str[i] != '#')
	{
		i++;
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	8f 5f       	subi	r24, 0xFF	; 255
    312a:	89 83       	std	Y+1, r24	; 0x01
		a_str[i] = UART_receiveData();
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	8c 01       	movw	r16, r24
    3138:	02 0f       	add	r16, r18
    313a:	13 1f       	adc	r17, r19
    313c:	0e 94 0b 18 	call	0x3016	; 0x3016 <UART_receiveData>
    3140:	f8 01       	movw	r30, r16
    3142:	80 83       	st	Z, r24
	 * with the symbol
	 */
	a_str[i] = UART_receiveData();

	/* Receive the whole string until the symbol '#' is found	*/
	while( a_str[i] != '#')
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	fc 01       	movw	r30, r24
    3150:	e2 0f       	add	r30, r18
    3152:	f3 1f       	adc	r31, r19
    3154:	80 81       	ld	r24, Z
    3156:	83 32       	cpi	r24, 0x23	; 35
    3158:	31 f7       	brne	.-52     	; 0x3126 <UART_receiveString+0x30>
		i++;
		a_str[i] = UART_receiveData();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	a_str[i] = '\0' ;
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	fc 01       	movw	r30, r24
    3166:	e2 0f       	add	r30, r18
    3168:	f3 1f       	adc	r31, r19
    316a:	10 82       	st	Z, r1

}
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	08 95       	ret

0000317c <__udivmodhi4>:
    317c:	aa 1b       	sub	r26, r26
    317e:	bb 1b       	sub	r27, r27
    3180:	51 e1       	ldi	r21, 0x11	; 17
    3182:	07 c0       	rjmp	.+14     	; 0x3192 <__udivmodhi4_ep>

00003184 <__udivmodhi4_loop>:
    3184:	aa 1f       	adc	r26, r26
    3186:	bb 1f       	adc	r27, r27
    3188:	a6 17       	cp	r26, r22
    318a:	b7 07       	cpc	r27, r23
    318c:	10 f0       	brcs	.+4      	; 0x3192 <__udivmodhi4_ep>
    318e:	a6 1b       	sub	r26, r22
    3190:	b7 0b       	sbc	r27, r23

00003192 <__udivmodhi4_ep>:
    3192:	88 1f       	adc	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	5a 95       	dec	r21
    3198:	a9 f7       	brne	.-22     	; 0x3184 <__udivmodhi4_loop>
    319a:	80 95       	com	r24
    319c:	90 95       	com	r25
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	08 95       	ret

000031a4 <__udivmodsi4>:
    31a4:	a1 e2       	ldi	r26, 0x21	; 33
    31a6:	1a 2e       	mov	r1, r26
    31a8:	aa 1b       	sub	r26, r26
    31aa:	bb 1b       	sub	r27, r27
    31ac:	fd 01       	movw	r30, r26
    31ae:	0d c0       	rjmp	.+26     	; 0x31ca <__udivmodsi4_ep>

000031b0 <__udivmodsi4_loop>:
    31b0:	aa 1f       	adc	r26, r26
    31b2:	bb 1f       	adc	r27, r27
    31b4:	ee 1f       	adc	r30, r30
    31b6:	ff 1f       	adc	r31, r31
    31b8:	a2 17       	cp	r26, r18
    31ba:	b3 07       	cpc	r27, r19
    31bc:	e4 07       	cpc	r30, r20
    31be:	f5 07       	cpc	r31, r21
    31c0:	20 f0       	brcs	.+8      	; 0x31ca <__udivmodsi4_ep>
    31c2:	a2 1b       	sub	r26, r18
    31c4:	b3 0b       	sbc	r27, r19
    31c6:	e4 0b       	sbc	r30, r20
    31c8:	f5 0b       	sbc	r31, r21

000031ca <__udivmodsi4_ep>:
    31ca:	66 1f       	adc	r22, r22
    31cc:	77 1f       	adc	r23, r23
    31ce:	88 1f       	adc	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	1a 94       	dec	r1
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <__udivmodsi4_loop>
    31d6:	60 95       	com	r22
    31d8:	70 95       	com	r23
    31da:	80 95       	com	r24
    31dc:	90 95       	com	r25
    31de:	9b 01       	movw	r18, r22
    31e0:	ac 01       	movw	r20, r24
    31e2:	bd 01       	movw	r22, r26
    31e4:	cf 01       	movw	r24, r30
    31e6:	08 95       	ret

000031e8 <__prologue_saves__>:
    31e8:	2f 92       	push	r2
    31ea:	3f 92       	push	r3
    31ec:	4f 92       	push	r4
    31ee:	5f 92       	push	r5
    31f0:	6f 92       	push	r6
    31f2:	7f 92       	push	r7
    31f4:	8f 92       	push	r8
    31f6:	9f 92       	push	r9
    31f8:	af 92       	push	r10
    31fa:	bf 92       	push	r11
    31fc:	cf 92       	push	r12
    31fe:	df 92       	push	r13
    3200:	ef 92       	push	r14
    3202:	ff 92       	push	r15
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	ca 1b       	sub	r28, r26
    3212:	db 0b       	sbc	r29, r27
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	09 94       	ijmp

00003220 <__epilogue_restores__>:
    3220:	2a 88       	ldd	r2, Y+18	; 0x12
    3222:	39 88       	ldd	r3, Y+17	; 0x11
    3224:	48 88       	ldd	r4, Y+16	; 0x10
    3226:	5f 84       	ldd	r5, Y+15	; 0x0f
    3228:	6e 84       	ldd	r6, Y+14	; 0x0e
    322a:	7d 84       	ldd	r7, Y+13	; 0x0d
    322c:	8c 84       	ldd	r8, Y+12	; 0x0c
    322e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3230:	aa 84       	ldd	r10, Y+10	; 0x0a
    3232:	b9 84       	ldd	r11, Y+9	; 0x09
    3234:	c8 84       	ldd	r12, Y+8	; 0x08
    3236:	df 80       	ldd	r13, Y+7	; 0x07
    3238:	ee 80       	ldd	r14, Y+6	; 0x06
    323a:	fd 80       	ldd	r15, Y+5	; 0x05
    323c:	0c 81       	ldd	r16, Y+4	; 0x04
    323e:	1b 81       	ldd	r17, Y+3	; 0x03
    3240:	aa 81       	ldd	r26, Y+2	; 0x02
    3242:	b9 81       	ldd	r27, Y+1	; 0x01
    3244:	ce 0f       	add	r28, r30
    3246:	d1 1d       	adc	r29, r1
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	ed 01       	movw	r28, r26
    3254:	08 95       	ret

00003256 <itoa>:
    3256:	fb 01       	movw	r30, r22
    3258:	9f 01       	movw	r18, r30
    325a:	e8 94       	clt
    325c:	42 30       	cpi	r20, 0x02	; 2
    325e:	c4 f0       	brlt	.+48     	; 0x3290 <itoa+0x3a>
    3260:	45 32       	cpi	r20, 0x25	; 37
    3262:	b4 f4       	brge	.+44     	; 0x3290 <itoa+0x3a>
    3264:	4a 30       	cpi	r20, 0x0A	; 10
    3266:	29 f4       	brne	.+10     	; 0x3272 <itoa+0x1c>
    3268:	97 fb       	bst	r25, 7
    326a:	1e f4       	brtc	.+6      	; 0x3272 <itoa+0x1c>
    326c:	90 95       	com	r25
    326e:	81 95       	neg	r24
    3270:	9f 4f       	sbci	r25, 0xFF	; 255
    3272:	64 2f       	mov	r22, r20
    3274:	77 27       	eor	r23, r23
    3276:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodhi4>
    327a:	80 5d       	subi	r24, 0xD0	; 208
    327c:	8a 33       	cpi	r24, 0x3A	; 58
    327e:	0c f0       	brlt	.+2      	; 0x3282 <itoa+0x2c>
    3280:	89 5d       	subi	r24, 0xD9	; 217
    3282:	81 93       	st	Z+, r24
    3284:	cb 01       	movw	r24, r22
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	a1 f7       	brne	.-24     	; 0x3272 <itoa+0x1c>
    328a:	16 f4       	brtc	.+4      	; 0x3290 <itoa+0x3a>
    328c:	5d e2       	ldi	r21, 0x2D	; 45
    328e:	51 93       	st	Z+, r21
    3290:	10 82       	st	Z, r1
    3292:	c9 01       	movw	r24, r18
    3294:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <strrev>

00003298 <strrev>:
    3298:	dc 01       	movw	r26, r24
    329a:	fc 01       	movw	r30, r24
    329c:	67 2f       	mov	r22, r23
    329e:	71 91       	ld	r23, Z+
    32a0:	77 23       	and	r23, r23
    32a2:	e1 f7       	brne	.-8      	; 0x329c <strrev+0x4>
    32a4:	32 97       	sbiw	r30, 0x02	; 2
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <strrev+0x18>
    32a8:	7c 91       	ld	r23, X
    32aa:	6d 93       	st	X+, r22
    32ac:	70 83       	st	Z, r23
    32ae:	62 91       	ld	r22, -Z
    32b0:	ae 17       	cp	r26, r30
    32b2:	bf 07       	cpc	r27, r31
    32b4:	c8 f3       	brcs	.-14     	; 0x32a8 <strrev+0x10>
    32b6:	08 95       	ret

000032b8 <_exit>:
    32b8:	f8 94       	cli

000032ba <__stop_program>:
    32ba:	ff cf       	rjmp	.-2      	; 0x32ba <__stop_program>
