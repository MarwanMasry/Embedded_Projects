
Door_Locker_HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00002e6c  00002f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080015a  0080015a  00002ffa  2**0
                  ALLOC
  3 .stab         00002f40  00000000  00000000  00002ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a2c  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009861  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b4fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__vector_3>
      10:	0c 94 25 14 	jmp	0x284a	; 0x284a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_8>
      24:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *                          	Main Function			                       *
 *******************************************************************************/


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	char L_optionResult ; /* used to save the option selected in step 2 : '+','-' */
	uint8 L_stepStatus; /* Used to know the status to take the decision to reset or not*/

	/*	Enable the Global interrupt Flag */
	SREG |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/* Dynamic configurations of Drivers*/
	DynamicConfiguration_UART L_config_UART = {DISABLE_PARITY , _8_DATA_BIT , _1_STOP_BIT , 9600 };
     b68:	ce 01       	movw	r24, r28
     b6a:	03 96       	adiw	r24, 0x03	; 3
     b6c:	9b 87       	std	Y+11, r25	; 0x0b
     b6e:	8a 87       	std	Y+10, r24	; 0x0a
     b70:	ee e3       	ldi	r30, 0x3E	; 62
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	fd 87       	std	Y+13, r31	; 0x0d
     b76:	ec 87       	std	Y+12, r30	; 0x0c
     b78:	f7 e0       	ldi	r31, 0x07	; 7
     b7a:	fe 87       	std	Y+14, r31	; 0x0e
     b7c:	ec 85       	ldd	r30, Y+12	; 0x0c
     b7e:	fd 85       	ldd	r31, Y+13	; 0x0d
     b80:	00 80       	ld	r0, Z
     b82:	8c 85       	ldd	r24, Y+12	; 0x0c
     b84:	9d 85       	ldd	r25, Y+13	; 0x0d
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9d 87       	std	Y+13, r25	; 0x0d
     b8a:	8c 87       	std	Y+12, r24	; 0x0c
     b8c:	ea 85       	ldd	r30, Y+10	; 0x0a
     b8e:	fb 85       	ldd	r31, Y+11	; 0x0b
     b90:	00 82       	st	Z, r0
     b92:	8a 85       	ldd	r24, Y+10	; 0x0a
     b94:	9b 85       	ldd	r25, Y+11	; 0x0b
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9b 87       	std	Y+11, r25	; 0x0b
     b9a:	8a 87       	std	Y+10, r24	; 0x0a
     b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	9e 87       	std	Y+14, r25	; 0x0e
     ba2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>

	/*	Initialization of needed Modules	*/
	LCD_init();
     ba8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <LCD_init>
	UART_init(&L_config_UART);
     bac:	ce 01       	movw	r24, r28
     bae:	03 96       	adiw	r24, 0x03	; 3
     bb0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_init>
	/*	Super Loop	*/
	while(1)
	{
		/*********** STEP 1 ************/
		/* create Password */
		APP_CreatePassword_HMI_MCU();
     bb4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <APP_CreatePassword_HMI_MCU>
		/*	Always Execute Step 2 until Resets happens  */
		do
		{
			/*********** STEP 2 ************/
			/*	Get the result form Option Menu	*/
			L_optionResult = APP_getTheResultFromOptionMenu();
     bb8:	0e 94 c8 06 	call	0xd90	; 0xd90 <APP_getTheResultFromOptionMenu>
     bbc:	89 83       	std	Y+1, r24	; 0x01
			/*	Send the Option selected to control MCU when it is ready */
			while( UART_receiveData() != I_AM_READY);
     bbe:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	91 05       	cpc	r25, r1
     bc6:	d9 f7       	brne	.-10     	; 0xbbe <main+0x78>
			UART_sendData(L_optionResult);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_sendData>

			if(L_optionResult == '+') /*	User Choose to Open Door 	*/
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	8b 32       	cpi	r24, 0x2B	; 43
     bd2:	19 f4       	brne	.+6      	; 0xbda <main+0x94>
			{
				/*********** STEP 3 ************/
				/*	Do all requirements when user Choose to Open Door */
				APP_optionOpenDoorIsSelected_HMI_MCU();
     bd4:	0e 94 f2 06 	call	0xde4	; 0xde4 <APP_optionOpenDoorIsSelected_HMI_MCU>
     bd8:	ef cf       	rjmp	.-34     	; 0xbb8 <main+0x72>

			}
			else if( L_optionResult == '-') /*	User Choose to Reset Password  */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8d 32       	cpi	r24, 0x2D	; 45
     bde:	61 f7       	brne	.-40     	; 0xbb8 <main+0x72>
			{
				/*********** STEP 4 ************/
				/*	Do all requirements when user Choose to Reset Password */
				APP_optionResetPasswordIsSelected_HMI_MCU(&L_stepStatus);
     be0:	ce 01       	movw	r24, r28
     be2:	02 96       	adiw	r24, 0x02	; 2
     be4:	0e 94 1b 08 	call	0x1036	; 0x1036 <APP_optionResetPasswordIsSelected_HMI_MCU>

				if(L_stepStatus == RESET)
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	88 23       	and	r24, r24
     bec:	19 f3       	breq	.-58     	; 0xbb4 <main+0x6e>
     bee:	e4 cf       	rjmp	.-56     	; 0xbb8 <main+0x72>

00000bf0 <APP_CreatePassword_HMI_MCU>:
 * 	asks him another time to re enter the password and then send the two passwords
 * 	to CTRL MCU to take the decision either they match or not and we won't exit
 * 	this function until we create a password with match the reentered password
 */
void APP_CreatePassword_HMI_MCU(void)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2f 97       	sbiw	r28, 0x0f	; 15
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
	const char *L_stringToBeDisplayed ;
	PasswordStatus L_compareResult ;

	/*	This is the array where we will save the Password Created */
	uint8 L_password  [PASSWORD_SIZE + 1] = {0};
     c04:	86 e0       	ldi	r24, 0x06	; 6
     c06:	fe 01       	movw	r30, r28
     c08:	34 96       	adiw	r30, 0x04	; 4
     c0a:	df 01       	movw	r26, r30
     c0c:	98 2f       	mov	r25, r24
     c0e:	1d 92       	st	X+, r1
     c10:	9a 95       	dec	r25
     c12:	e9 f7       	brne	.-6      	; 0xc0e <APP_CreatePassword_HMI_MCU+0x1e>

	/*	This is the array where we will save the Reentered Password  */
	uint8 L_repeadtedPassword[PASSWORD_SIZE + 1] = {0};
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	fe 01       	movw	r30, r28
     c18:	3a 96       	adiw	r30, 0x0a	; 10
     c1a:	df 01       	movw	r26, r30
     c1c:	98 2f       	mov	r25, r24
     c1e:	1d 92       	st	X+, r1
     c20:	9a 95       	dec	r25
     c22:	e9 f7       	brne	.-6      	; 0xc1e <APP_CreatePassword_HMI_MCU+0x2e>

	do
	{
		/*	Create a Password  */
		L_stringToBeDisplayed = "Create The Pass:";
     c24:	80 e6       	ldi	r24, 0x60	; 96
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02
		APP_getPassword( L_stringToBeDisplayed, L_password);
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	9b 81       	ldd	r25, Y+3	; 0x03
     c30:	9e 01       	movw	r18, r28
     c32:	2c 5f       	subi	r18, 0xFC	; 252
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	b9 01       	movw	r22, r18
     c38:	0e 94 4b 06 	call	0xc96	; 0xc96 <APP_getPassword>

		/*	Reenter the Password  */
		L_stringToBeDisplayed = "Re-Enter Pass:";
     c3c:	81 e7       	ldi	r24, 0x71	; 113
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
		APP_getPassword( L_stringToBeDisplayed, L_repeadtedPassword);
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	9e 01       	movw	r18, r28
     c4a:	26 5f       	subi	r18, 0xF6	; 246
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	b9 01       	movw	r22, r18
     c50:	0e 94 4b 06 	call	0xc96	; 0xc96 <APP_getPassword>

		/*	Send the Password to control MCU when it is ready */
		while( UART_receiveData() != I_AM_READY);
     c54:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	91 05       	cpc	r25, r1
     c5c:	d9 f7       	brne	.-10     	; 0xc54 <APP_CreatePassword_HMI_MCU+0x64>
		UART_sendString(L_password);
     c5e:	ce 01       	movw	r24, r28
     c60:	04 96       	adiw	r24, 0x04	; 4
     c62:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendString>

		/*	Send the Rendered Password to control MCU when it is ready */
		while( UART_receiveData() != I_AM_READY);
     c66:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	91 05       	cpc	r25, r1
     c6e:	d9 f7       	brne	.-10     	; 0xc66 <APP_CreatePassword_HMI_MCU+0x76>
		UART_sendString(L_repeadtedPassword);
     c70:	ce 01       	movw	r24, r28
     c72:	0a 96       	adiw	r24, 0x0a	; 10
     c74:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendString>


		/*	Loop until Control MCU ready to give me the result of comparing
		 *  the password and repeated result.
		 */
		L_compareResult = UART_receiveData() ;
     c78:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
     c7c:	89 83       	std	Y+1, r24	; 0x01

	}while(L_compareResult == PASSWORD_MISMASTCH); /* Loop until two passwords matches */
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	81 f2       	breq	.-96     	; 0xc24 <APP_CreatePassword_HMI_MCU+0x34>

}
     c84:	2f 96       	adiw	r28, 0x0f	; 15
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <APP_getPassword>:
 * won't return until the user enter ENTER key on keypad , it can only read 5
 * Number as password, More than the function won't read the values.
 * The function display the String which is input and then read the password.
 */
void APP_getPassword(const char *a_str , uint8 *a_password)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <APP_getPassword+0x6>
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <APP_getPassword+0x8>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <APP_getPassword+0xa>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03
     ca8:	7e 83       	std	Y+6, r23	; 0x06
     caa:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i = 0 ,L_keypadValue = 0 ;;
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	19 82       	std	Y+1, r1	; 0x01

	/*	Clear the screen first	*/
	LCD_clearScreen();
     cb0:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_clearScreen>

	/*	Display the Input string on LCD */
	LCD_displayStringAtRowColumn(0,0,a_str);
     cb4:	2b 81       	ldd	r18, Y+3	; 0x03
     cb6:	3c 81       	ldd	r19, Y+4	; 0x04
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	a9 01       	movw	r20, r18
     cbe:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>

	/*	Move cursor to Line 2	*/
	LCD_moveCursor(1,0);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <APP_getPassword+0x62>
	 * 	The loop will loop until it take 5 integers from 0 to 9 any values
	 * 	other than that , it will continue to loop to get integer value.
	 */
	while( i < PASSWORD_SIZE)
	{
		L_keypadValue = KEYPAD_getPressedKey();
     ccc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <KEYPAD_getPressedKey>
     cd0:	89 83       	std	Y+1, r24	; 0x01

		/*	Take only values form 0 to 9	*/
		if( (L_keypadValue>= 0) && (L_keypadValue <= 9) )
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	8a 30       	cpi	r24, 0x0A	; 10
     cd6:	80 f4       	brcc	.+32     	; 0xcf8 <APP_getPassword+0x62>
		{
			a_password[i] = L_keypadValue ;
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	9e 81       	ldd	r25, Y+6	; 0x06
     ce2:	fc 01       	movw	r30, r24
     ce4:	e2 0f       	add	r30, r18
     ce6:	f3 1f       	adc	r31, r19
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 83       	st	Z, r24

			/*	Each character entered display '*' */
			LCD_displayCharacter('*');
     cec:	8a e2       	ldi	r24, 0x2A	; 42
     cee:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayCharacter>

			i++;
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	8a 83       	std	Y+2, r24	; 0x02

	/*	Loop and read the Password enter by user in keypad.
	 * 	The loop will loop until it take 5 integers from 0 to 9 any values
	 * 	other than that , it will continue to loop to get integer value.
	 */
	while( i < PASSWORD_SIZE)
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	38 f3       	brcs	.-50     	; 0xccc <APP_getPassword+0x36>
	}
	/*	This is a trick to convert the array to a string so that we can Send
	 *  this password using UART function [ UART_sendString() ] which need
	 *  String as a parameter
	 */
	a_password[i] = '\0';
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 0f       	add	r30, r18
     d0c:	f3 1f       	adc	r31, r19
     d0e:	10 82       	st	Z, r1
	/*	we won't break out of the loop until the user press enter on keypad
	 *  and all the key values which is pressed after taking 5 password values
	 *  will be ignored.
	 *  Enter return a value 13 from keypad so thats why compare 12 with the variable.
	 */
	while( (L_keypadValue = KEYPAD_getPressedKey() ) != 13 );
     d10:	0e 94 1a 0c 	call	0x1834	; 0x1834 <KEYPAD_getPressedKey>
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8d 30       	cpi	r24, 0x0D	; 13
     d1a:	d1 f7       	brne	.-12     	; 0xd10 <APP_getPassword+0x7a>
}
     d1c:	26 96       	adiw	r28, 0x06	; 6
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <APP_displayPasswordAtRowColumn>:
 * This function display the array which contain the password[5 numbers] at
 * specific column and row on the LCD.
 * All you need to supply is the Row and Column and the array to display.
 */
void APP_displayPasswordAtRowColumn(uint8 a_row , uint8 a_col ,const uint8* a_password)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <APP_displayPasswordAtRowColumn+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <APP_displayPasswordAtRowColumn+0x8>
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	6b 83       	std	Y+3, r22	; 0x03
     d40:	5d 83       	std	Y+5, r21	; 0x05
     d42:	4c 83       	std	Y+4, r20	; 0x04
	uint8 i = 0;
     d44:	19 82       	std	Y+1, r1	; 0x01

	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	6b 81       	ldd	r22, Y+3	; 0x03
     d4a:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>

	/*	Display the Password	*/
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <APP_displayPasswordAtRowColumn+0x4c>
	{
		LCD_displayNumber(a_password[i]);
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	80 81       	ld	r24, Z
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_displayNumber>

	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);

	/*	Display the Password	*/
	for(i = 0 ; i < PASSWORD_SIZE ; i++)
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	85 30       	cpi	r24, 0x05	; 5
     d7e:	48 f3       	brcs	.-46     	; 0xd52 <APP_displayPasswordAtRowColumn+0x24>
	{
		LCD_displayNumber(a_password[i]);
	}
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <APP_getTheResultFromOptionMenu>:
 * Description:
 * we return the result of option Menu either it is '+' to open Door or it is '-'
 * to Reset Password.
 */
uint8 APP_getTheResultFromOptionMenu(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	0f 92       	push	r0
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	uint8 L_option ;

	/*	Display the Main Options : */
	LCD_clearScreen();
     d9a:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_clearScreen>
	LCD_displayStringAtRowColumn(0,0,"  Main Options  ");
     d9e:	20 e8       	ldi	r18, 0x80	; 128
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	a9 01       	movw	r20, r18
     da8:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(1,0,"1)+ :Open Door");
     dac:	21 e9       	ldi	r18, 0x91	; 145
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	a9 01       	movw	r20, r18
     db6:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(2,0,"2)- :Change Pass");
     dba:	20 ea       	ldi	r18, 0xA0	; 160
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	a9 01       	movw	r20, r18
     dc4:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>

	/*	Loop until we get '+' or '-' otherwise stay in the loop */
	do
	{
		L_option = KEYPAD_getPressedKey();
     dc8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <KEYPAD_getPressedKey>
     dcc:	89 83       	std	Y+1, r24	; 0x01
	}while((L_option != '+') && (L_option != '-'));
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	8b 32       	cpi	r24, 0x2B	; 43
     dd2:	19 f0       	breq	.+6      	; 0xdda <APP_getTheResultFromOptionMenu+0x4a>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	8d 32       	cpi	r24, 0x2D	; 45
     dd8:	b9 f7       	brne	.-18     	; 0xdc8 <APP_getTheResultFromOptionMenu+0x38>

	return L_option;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
}
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <APP_optionOpenDoorIsSelected_HMI_MCU>:
/*
 * Description:
 * This function do all the requirements needed when user select to open Door
 */
void APP_optionOpenDoorIsSelected_HMI_MCU(void)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
	PasswordStatus L_verifyPasswordResult ;

	do
	{
		/*	See if the password written by user is Match or Mismatch */
		L_verifyPasswordResult = APP_verifyPassword_HMI_MCU();
     dee:	0e 94 e7 07 	call	0xfce	; 0xfce <APP_verifyPassword_HMI_MCU>
     df2:	89 83       	std	Y+1, r24	; 0x01

		if( L_verifyPasswordResult == PASSWORD_MATCH )
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 23       	and	r24, r24
     df8:	19 f4       	brne	.+6      	; 0xe00 <APP_optionOpenDoorIsSelected_HMI_MCU+0x1c>
		{
				/*	Do all the Processing needed to open The door  */
				APP_openDoorOptionProcessing_HMI_MCU();
     dfa:	0e 94 0f 07 	call	0xe1e	; 0xe1e <APP_openDoorOptionProcessing_HMI_MCU>
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <APP_optionOpenDoorIsSelected_HMI_MCU+0x20>
		}
		else
		{
			/*********** STEP 5 ************/
			/* if Password was Mismatch give him another 2 Trials only */
			APP_passwordMismatchHandling_HMI_MCU();
     e00:	0e 94 42 08 	call	0x1084	; 0x1084 <APP_passwordMismatchHandling_HMI_MCU>
		}

		/*	We loop if the Password entered is wrong , We give 3 Trials more than
		 *  An Alarm Goes ON
		 */
	}while( (L_verifyPasswordResult == PASSWORD_MISMASTCH) && (g_mismatch < MAX_NUM_OF_MISMATCH));
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	21 f4       	brne	.+8      	; 0xe12 <APP_optionOpenDoorIsSelected_HMI_MCU+0x2e>
     e0a:	80 91 5e 01 	lds	r24, 0x015E
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	70 f3       	brcs	.-36     	; 0xdee <APP_optionOpenDoorIsSelected_HMI_MCU+0xa>

	/*	Reaching here means that it enters the password Right or he has consumed
	 *  Three trials and in both cases the counter is reseted to start again from
	 *  the start
	 */
	g_mismatch = 0;
     e12:	10 92 5e 01 	sts	0x015E, r1
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <APP_openDoorOptionProcessing_HMI_MCU>:
 * 1) Display Door is Unlocking..  For 15 seconds
 * 2) Display Door is Hold         For 3  seconds
 * 3) Display Door is Unlocking..  For 15 seconds
 */
void APP_openDoorOptionProcessing_HMI_MCU(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	68 97       	sbiw	r28, 0x18	; 24
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	/*	Timer1 Dynamic configurations to count 3 , 15 seconds */

	/*	3 seconds, Only one Compare match is enough */
	DynamicConfiguration_TIMER L_timerConfig3sec = {TIMER1 , T1_CTC_MODE ,F_CPU_DIV_BY_1024,0, 23438};
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	98 8b       	std	Y+16, r25	; 0x10
     e38:	8f 87       	std	Y+15, r24	; 0x0f
     e3a:	ec e4       	ldi	r30, 0x4C	; 76
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	fa 8b       	std	Y+18, r31	; 0x12
     e40:	e9 8b       	std	Y+17, r30	; 0x11
     e42:	f7 e0       	ldi	r31, 0x07	; 7
     e44:	fb 8b       	std	Y+19, r31	; 0x13
     e46:	e9 89       	ldd	r30, Y+17	; 0x11
     e48:	fa 89       	ldd	r31, Y+18	; 0x12
     e4a:	00 80       	ld	r0, Z
     e4c:	89 89       	ldd	r24, Y+17	; 0x11
     e4e:	9a 89       	ldd	r25, Y+18	; 0x12
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	9a 8b       	std	Y+18, r25	; 0x12
     e54:	89 8b       	std	Y+17, r24	; 0x11
     e56:	ef 85       	ldd	r30, Y+15	; 0x0f
     e58:	f8 89       	ldd	r31, Y+16	; 0x10
     e5a:	00 82       	st	Z, r0
     e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5e:	98 89       	ldd	r25, Y+16	; 0x10
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	98 8b       	std	Y+16, r25	; 0x10
     e64:	8f 87       	std	Y+15, r24	; 0x0f
     e66:	9b 89       	ldd	r25, Y+19	; 0x13
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	9b 8b       	std	Y+19, r25	; 0x13
     e6c:	eb 89       	ldd	r30, Y+19	; 0x13
     e6e:	ee 23       	and	r30, r30
     e70:	51 f7       	brne	.-44     	; 0xe46 <APP_openDoorOptionProcessing_HMI_MCU+0x28>
	/*	15 seconds, Two Compare match is needed which mean two interrupts */
	DynamicConfiguration_TIMER L_timerConfig15sec = {TIMER1 , T1_CTC_MODE ,F_CPU_DIV_BY_1024,0, 58594};
     e72:	ce 01       	movw	r24, r28
     e74:	08 96       	adiw	r24, 0x08	; 8
     e76:	9d 8b       	std	Y+21, r25	; 0x15
     e78:	8c 8b       	std	Y+20, r24	; 0x14
     e7a:	e5 e4       	ldi	r30, 0x45	; 69
     e7c:	f1 e0       	ldi	r31, 0x01	; 1
     e7e:	ff 8b       	std	Y+23, r31	; 0x17
     e80:	ee 8b       	std	Y+22, r30	; 0x16
     e82:	f7 e0       	ldi	r31, 0x07	; 7
     e84:	f8 8f       	std	Y+24, r31	; 0x18
     e86:	ee 89       	ldd	r30, Y+22	; 0x16
     e88:	ff 89       	ldd	r31, Y+23	; 0x17
     e8a:	00 80       	ld	r0, Z
     e8c:	8e 89       	ldd	r24, Y+22	; 0x16
     e8e:	9f 89       	ldd	r25, Y+23	; 0x17
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	9f 8b       	std	Y+23, r25	; 0x17
     e94:	8e 8b       	std	Y+22, r24	; 0x16
     e96:	ec 89       	ldd	r30, Y+20	; 0x14
     e98:	fd 89       	ldd	r31, Y+21	; 0x15
     e9a:	00 82       	st	Z, r0
     e9c:	8c 89       	ldd	r24, Y+20	; 0x14
     e9e:	9d 89       	ldd	r25, Y+21	; 0x15
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	9d 8b       	std	Y+21, r25	; 0x15
     ea4:	8c 8b       	std	Y+20, r24	; 0x14
     ea6:	98 8d       	ldd	r25, Y+24	; 0x18
     ea8:	91 50       	subi	r25, 0x01	; 1
     eaa:	98 8f       	std	Y+24, r25	; 0x18
     eac:	e8 8d       	ldd	r30, Y+24	; 0x18
     eae:	ee 23       	and	r30, r30
     eb0:	51 f7       	brne	.-44     	; 0xe86 <APP_openDoorOptionProcessing_HMI_MCU+0x68>


	/*	Before Timer initialization we must clear the flag to know the effect of
	 *  Call back function
	 */
	g_timerHasFinishedCounting15seconds = FALSE ;
     eb2:	10 92 5b 01 	sts	0x015B, r1
	/*	Set the Call back Function */
	TIMER_setCallBackFunction(TIMER1 , APP_timer1_15sec_CallBackFunction_HMI_MCU);
     eb6:	2f ec       	ldi	r18, 0xCF	; 207
     eb8:	37 e0       	ldi	r19, 0x07	; 7
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	b9 01       	movw	r22, r18
     ebe:	0e 94 b4 14 	call	0x2968	; 0x2968 <TIMER_setCallBackFunction>
	/* (1) Display Door is Unlocking..  For 15 seconds */
	LCD_clearScreen();
     ec2:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_clearScreen>
	LCD_displayStringAtRowColumn(0,0,"    Unlocking   ");
     ec6:	21 eb       	ldi	r18, 0xB1	; 177
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	a9 01       	movw	r20, r18
     ed0:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(1,0,"    The Door... ");
     ed4:	22 ec       	ldi	r18, 0xC2	; 194
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	a9 01       	movw	r20, r18
     ede:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	/*	Timer1 ON */
	TIMER_init(&L_timerConfig15sec);
     ee2:	ce 01       	movw	r24, r28
     ee4:	08 96       	adiw	r24, 0x08	; 8
     ee6:	0e 94 8b 14 	call	0x2916	; 0x2916 <TIMER_init>
	/*	Wait until 15 seconds passes */
	while(!g_timerHasFinishedCounting15seconds);
     eea:	80 91 5b 01 	lds	r24, 0x015B
     eee:	88 23       	and	r24, r24
     ef0:	e1 f3       	breq	.-8      	; 0xeea <APP_openDoorOptionProcessing_HMI_MCU+0xcc>


	/*	Before Timer initialization we must clear the flag to know the effect of
	 *  Call back function
	 */
	g_timerHasFinishedCounting3seconds = FALSE ;
     ef2:	10 92 5a 01 	sts	0x015A, r1
	/*	Set the Call back Function */
	TIMER_setCallBackFunction(TIMER1 , APP_timer1_3sec_CallBackFunction_HMI_MCU);
     ef6:	22 ec       	ldi	r18, 0xC2	; 194
     ef8:	37 e0       	ldi	r19, 0x07	; 7
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	b9 01       	movw	r22, r18
     efe:	0e 94 b4 14 	call	0x2968	; 0x2968 <TIMER_setCallBackFunction>
	/* (2) Display Door is Hold         For 3  seconds */
	LCD_clearScreen();
     f02:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_clearScreen>
	LCD_displayStringAtRowColumn(0,0,"    Holding    ");
     f06:	23 ed       	ldi	r18, 0xD3	; 211
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	a9 01       	movw	r20, r18
     f10:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(1,0,"    The Door...");
     f14:	23 ee       	ldi	r18, 0xE3	; 227
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	a9 01       	movw	r20, r18
     f1e:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	/*	Timer1 ON */
	TIMER_init(&L_timerConfig3sec);
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 8b 14 	call	0x2916	; 0x2916 <TIMER_init>
	/*	Wait until 3 seconds passes */
	while(!g_timerHasFinishedCounting3seconds);
     f2a:	80 91 5a 01 	lds	r24, 0x015A
     f2e:	88 23       	and	r24, r24
     f30:	e1 f3       	breq	.-8      	; 0xf2a <APP_openDoorOptionProcessing_HMI_MCU+0x10c>


	/*	Before Timer initialization we must clear the flag to know the effect of
	 *  Call back function
	 */
	g_timerHasFinishedCounting15seconds = FALSE ;
     f32:	10 92 5b 01 	sts	0x015B, r1
	/*	Set the Call back Function */
	TIMER_setCallBackFunction(TIMER1 , APP_timer1_15sec_CallBackFunction_HMI_MCU);
     f36:	2f ec       	ldi	r18, 0xCF	; 207
     f38:	37 e0       	ldi	r19, 0x07	; 7
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	b9 01       	movw	r22, r18
     f3e:	0e 94 b4 14 	call	0x2968	; 0x2968 <TIMER_setCallBackFunction>
	/* 3) Display Door is Unlocking..  For 15 seconds */
	LCD_clearScreen();
     f42:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_clearScreen>
	LCD_displayStringAtRowColumn(0,0,"    Locking     ");
     f46:	23 ef       	ldi	r18, 0xF3	; 243
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(1,0,"    The Door... ");
     f54:	22 ec       	ldi	r18, 0xC2	; 194
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	a9 01       	movw	r20, r18
     f5e:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
	/*	Timer1 ON */
	TIMER_init(&L_timerConfig15sec);
     f62:	ce 01       	movw	r24, r28
     f64:	08 96       	adiw	r24, 0x08	; 8
     f66:	0e 94 8b 14 	call	0x2916	; 0x2916 <TIMER_init>
	/*	Wait until 15 seconds passes */
	while(!g_timerHasFinishedCounting15seconds);
     f6a:	80 91 5b 01 	lds	r24, 0x015B
     f6e:	88 23       	and	r24, r24
     f70:	e1 f3       	breq	.-8      	; 0xf6a <APP_openDoorOptionProcessing_HMI_MCU+0x14c>
}
     f72:	68 96       	adiw	r28, 0x18	; 24
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <APP_timer1_3sec_CallBackFunction_HMI_MCU>:
 * Description :
 * This function is Called when Timer1 trigger interrupt. when the timer is set
 * to count 3 seconds.
 */
void APP_timer1_3sec_CallBackFunction_HMI_MCU(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	g_timerHasFinishedCounting3seconds = TRUE;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	80 93 5a 01 	sts	0x015A, r24

	/*	Turn OFF Timer 1*/
	TIMER_deInit(TIMER1);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <TIMER_deInit>
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <APP_timer1_15sec_CallBackFunction_HMI_MCU>:
 * Description :
 * This function is Called when Timer1 trigger interrupt. used when the timer
 * is set to count 15 seconds.
 */
void APP_timer1_15sec_CallBackFunction_HMI_MCU(void)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	/*	Increment The Global which count the number of Interrupts */
	g_tick++;
     fa6:	80 91 5d 01 	lds	r24, 0x015D
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 5d 01 	sts	0x015D, r24

	if(g_tick == NUMBER_OF_INTERRUPTS_TO_COUNT_15_SEC)
     fb0:	80 91 5d 01 	lds	r24, 0x015D
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <APP_timer1_15sec_CallBackFunction_HMI_MCU+0x2a>
	{
		g_timerHasFinishedCounting15seconds = TRUE;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 5b 01 	sts	0x015B, r24

		/*	Turn OFF Timer 1*/
		TIMER_deInit(TIMER1);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <TIMER_deInit>

		/*	Clear the number of Interrupts */
		g_tick = 0;
     fc4:	10 92 5d 01 	sts	0x015D, r1
	}
}
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <APP_verifyPassword_HMI_MCU>:
 * Description :
 * This function ask the user for the password and send it TO control MCU
 * to check it and the control MCU return the result either Match or Mismatch
 */
PasswordStatus APP_verifyPassword_HMI_MCU(void)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	29 97       	sbiw	r28, 0x09	; 9
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	PasswordStatus L_compareResult ;
	const char *L_stringToBeDisplayed ;
	/*	Array to save the password to Open the Door */
	uint8 L_passwordToOpenDoor [PASSWORD_SIZE + 1] = {0};
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	fe 01       	movw	r30, r28
     fe6:	34 96       	adiw	r30, 0x04	; 4
     fe8:	df 01       	movw	r26, r30
     fea:	98 2f       	mov	r25, r24
     fec:	1d 92       	st	X+, r1
     fee:	9a 95       	dec	r25
     ff0:	e9 f7       	brne	.-6      	; 0xfec <APP_verifyPassword_HMI_MCU+0x1e>

	/*	Ask to Enter the password so that the option chosen is made */
	L_stringToBeDisplayed = "Enter The Pass:";
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
	APP_getPassword( L_stringToBeDisplayed, L_passwordToOpenDoor);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	9e 01       	movw	r18, r28
    1000:	2c 5f       	subi	r18, 0xFC	; 252
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 4b 06 	call	0xc96	; 0xc96 <APP_getPassword>

	/*	Send the Password to control MCU when it is ready */
	while( UART_receiveData() != I_AM_READY);
    100a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	91 05       	cpc	r25, r1
    1012:	d9 f7       	brne	.-10     	; 0x100a <APP_verifyPassword_HMI_MCU+0x3c>
	UART_sendString(L_passwordToOpenDoor);
    1014:	ce 01       	movw	r24, r28
    1016:	04 96       	adiw	r24, 0x04	; 4
    1018:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendString>

	/*	Loop until Control MCU ready to give me the result of comparing
	 *  the password and repeated result.
	 */
	L_compareResult = UART_receiveData() ;
    101c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
    1020:	8b 83       	std	Y+3, r24	; 0x03

	return L_compareResult;
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1024:	29 96       	adiw	r28, 0x09	; 9
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <APP_optionResetPasswordIsSelected_HMI_MCU>:
/*
 * Description:
 * This function do all the requirements needed when user select Reset Password
 */
void APP_optionResetPasswordIsSelected_HMI_MCU(uint8 *a_stepStatus)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <APP_optionResetPasswordIsSelected_HMI_MCU+0x6>
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9b 83       	std	Y+3, r25	; 0x03
    1044:	8a 83       	std	Y+2, r24	; 0x02
	PasswordStatus L_verifyPasswordResult ;

	do
	{
		/*	See if the password written by user is Match or Mismatch */
		L_verifyPasswordResult = APP_verifyPassword_HMI_MCU();
    1046:	0e 94 e7 07 	call	0xfce	; 0xfce <APP_verifyPassword_HMI_MCU>
    104a:	89 83       	std	Y+1, r24	; 0x01

		if( L_verifyPasswordResult == PASSWORD_MATCH )
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	88 23       	and	r24, r24
    1050:	21 f4       	brne	.+8      	; 0x105a <APP_optionResetPasswordIsSelected_HMI_MCU+0x24>
		{
				/*	Return RESET value so that we can break out of the loop in main */
				*a_stepStatus = RESET;
    1052:	ea 81       	ldd	r30, Y+2	; 0x02
    1054:	fb 81       	ldd	r31, Y+3	; 0x03
    1056:	10 82       	st	Z, r1
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <APP_optionResetPasswordIsSelected_HMI_MCU+0x30>
		}
		else
		{
			/*********** STEP 5 ************/

			*a_stepStatus = NORESET; /*	No reset as Password Mismatch*/
    105a:	ea 81       	ldd	r30, Y+2	; 0x02
    105c:	fb 81       	ldd	r31, Y+3	; 0x03
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 83       	st	Z, r24

			/* if Password was Mismatch give him another 2 Trials only */
			APP_passwordMismatchHandling_HMI_MCU();
    1062:	0e 94 42 08 	call	0x1084	; 0x1084 <APP_passwordMismatchHandling_HMI_MCU>
		}

		/*	We loop if the Password entered is wrong , We give 3 Trials more than
		 *  An Alarm Goes ON
		 */
	}while( (L_verifyPasswordResult == PASSWORD_MISMASTCH) && (g_mismatch < MAX_NUM_OF_MISMATCH));
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	21 f4       	brne	.+8      	; 0x1074 <APP_optionResetPasswordIsSelected_HMI_MCU+0x3e>
    106c:	80 91 5e 01 	lds	r24, 0x015E
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	48 f3       	brcs	.-46     	; 0x1046 <APP_optionResetPasswordIsSelected_HMI_MCU+0x10>

	/*	Reaching here means that it enters the password Right or he has consumed
	 *  Three trials and in both cases the counter is reseted to start again from
	 *  the start
	 */
	g_mismatch = 0;
    1074:	10 92 5e 01 	sts	0x015E, r1

}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <APP_passwordMismatchHandling_HMI_MCU>:
 * This function handles the case where the user enters Wrong password until
 * 3 trials in which it display Error MSG when entering 3 times wrong password
 * for 1 minute.
 */
void APP_passwordMismatchHandling_HMI_MCU(void)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2c 97       	sbiw	r28, 0x0c	; 12
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
	/*	60 seconds, 8 Compare match is needed which mean 8 interrupts */
	DynamicConfiguration_TIMER L_timerConfig60sec = {TIMER1 , T1_CTC_MODE ,F_CPU_DIV_BY_1024,0, 58594};
    1098:	ce 01       	movw	r24, r28
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	99 87       	std	Y+9, r25	; 0x09
    109e:	88 87       	std	Y+8, r24	; 0x08
    10a0:	e3 e5       	ldi	r30, 0x53	; 83
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	fb 87       	std	Y+11, r31	; 0x0b
    10a6:	ea 87       	std	Y+10, r30	; 0x0a
    10a8:	f7 e0       	ldi	r31, 0x07	; 7
    10aa:	fc 87       	std	Y+12, r31	; 0x0c
    10ac:	ea 85       	ldd	r30, Y+10	; 0x0a
    10ae:	fb 85       	ldd	r31, Y+11	; 0x0b
    10b0:	00 80       	ld	r0, Z
    10b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	9b 87       	std	Y+11, r25	; 0x0b
    10ba:	8a 87       	std	Y+10, r24	; 0x0a
    10bc:	e8 85       	ldd	r30, Y+8	; 0x08
    10be:	f9 85       	ldd	r31, Y+9	; 0x09
    10c0:	00 82       	st	Z, r0
    10c2:	88 85       	ldd	r24, Y+8	; 0x08
    10c4:	99 85       	ldd	r25, Y+9	; 0x09
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	99 87       	std	Y+9, r25	; 0x09
    10ca:	88 87       	std	Y+8, r24	; 0x08
    10cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	9c 87       	std	Y+12, r25	; 0x0c
    10d2:	ec 85       	ldd	r30, Y+12	; 0x0c
    10d4:	ee 23       	and	r30, r30
    10d6:	51 f7       	brne	.-44     	; 0x10ac <APP_passwordMismatchHandling_HMI_MCU+0x28>

	g_mismatch++;
    10d8:	80 91 5e 01 	lds	r24, 0x015E
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 5e 01 	sts	0x015E, r24

	/*	If the Wrong trials is equal to Max number of trial and Alarm is set ON */
	if(g_mismatch == MAX_NUM_OF_MISMATCH)
    10e2:	80 91 5e 01 	lds	r24, 0x015E
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	01 f5       	brne	.+64     	; 0x112a <APP_passwordMismatchHandling_HMI_MCU+0xa6>
	{
		/*	Before Timer initialization we must clear the flag to know the effect of
		 *  Call back function
		 */
		g_timerHasFinishedCounting60seconds = FALSE ;
    10ea:	10 92 5c 01 	sts	0x015C, r1
		/*	Set the Call back Function */
		TIMER_setCallBackFunction(TIMER1 , APP_timer1_60sec_CallBackFunction_HMI_MCU);
    10ee:	2e e9       	ldi	r18, 0x9E	; 158
    10f0:	38 e0       	ldi	r19, 0x08	; 8
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	b9 01       	movw	r22, r18
    10f6:	0e 94 b4 14 	call	0x2968	; 0x2968 <TIMER_setCallBackFunction>
		/* Display EEROR MSG for 1 MIN */
		LCD_clearScreen();
    10fa:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_clearScreen>
		LCD_displayStringAtRowColumn(0,0,"  !!! ERROR !!! ");
    10fe:	24 e1       	ldi	r18, 0x14	; 20
    1100:	31 e0       	ldi	r19, 0x01	; 1
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
		LCD_displayStringAtRowColumn(1,0,"  !!! Thief !!! ");
    110c:	25 e2       	ldi	r18, 0x25	; 37
    110e:	31 e0       	ldi	r19, 0x01	; 1
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	0e 94 9e 11 	call	0x233c	; 0x233c <LCD_displayStringAtRowColumn>
		/*	Timer1 ON */
		TIMER_init(&L_timerConfig60sec);
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 8b 14 	call	0x2916	; 0x2916 <TIMER_init>
		/*	Wait until 60 seconds passes */
		while(!g_timerHasFinishedCounting60seconds);
    1122:	80 91 5c 01 	lds	r24, 0x015C
    1126:	88 23       	and	r24, r24
    1128:	e1 f3       	breq	.-8      	; 0x1122 <APP_passwordMismatchHandling_HMI_MCU+0x9e>

	}
}
    112a:	2c 96       	adiw	r28, 0x0c	; 12
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <APP_timer1_60sec_CallBackFunction_HMI_MCU>:
 * Description :
 * This function is Called when Timer1 trigger interrupt. used when the timer
 * is set to count 60 seconds.
 */
void APP_timer1_60sec_CallBackFunction_HMI_MCU(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	/*	Increment The Global which count the number of Interrupts */
	g_tick++;
    1144:	80 91 5d 01 	lds	r24, 0x015D
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	80 93 5d 01 	sts	0x015D, r24

	if(g_tick == NUMBER_OF_INTERRUPTS_TO_COUNT_60_SEC)
    114e:	80 91 5d 01 	lds	r24, 0x015D
    1152:	88 30       	cpi	r24, 0x08	; 8
    1154:	41 f4       	brne	.+16     	; 0x1166 <APP_timer1_60sec_CallBackFunction_HMI_MCU+0x2a>
	{
		g_timerHasFinishedCounting60seconds = TRUE;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 5c 01 	sts	0x015C, r24

		/*	Turn OFF Timer 1*/
		TIMER_deInit(TIMER1);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <TIMER_deInit>

		/*	Clear the number of Interrupts */
		g_tick = 0;
    1162:	10 92 5d 01 	sts	0x015D, r1
	}
}
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <GPIO_setupPinDirection>:
 *
 * If the input port number or pin number are not correct, The function will
 * not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portNumber ,uint8 a_pinNumber ,PinDirectionType a_direction)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <GPIO_setupPinDirection+0x6>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <GPIO_setupPinDirection+0x8>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
    117e:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 *  If the input port number or pin number are not correct, The function will
	 *  not handle the request.
	 */
	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ) )
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	08 f0       	brcs	.+2      	; 0x1188 <GPIO_setupPinDirection+0x1c>
    1186:	d5 c0       	rjmp	.+426    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	08 f0       	brcs	.+2      	; 0x1190 <GPIO_setupPinDirection+0x24>
    118e:	d1 c0       	rjmp	.+418    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
		/*	Do nothing	*/
	}
	else
	{
		/*	set the pin direction as input or output	*/
		switch(a_portNumber)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3d 83       	std	Y+5, r19	; 0x05
    1198:	2c 83       	std	Y+4, r18	; 0x04
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <GPIO_setupPinDirection+0x3a>
    11a4:	43 c0       	rjmp	.+134    	; 0x122c <GPIO_setupPinDirection+0xc0>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <GPIO_setupPinDirection+0x4e>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	71 f0       	breq	.+28     	; 0x11d4 <GPIO_setupPinDirection+0x68>
    11b8:	bc c0       	rjmp	.+376    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
    11ba:	2c 81       	ldd	r18, Y+4	; 0x04
    11bc:	3d 81       	ldd	r19, Y+5	; 0x05
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <GPIO_setupPinDirection+0x5a>
    11c4:	5f c0       	rjmp	.+190    	; 0x1284 <GPIO_setupPinDirection+0x118>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <GPIO_setupPinDirection+0x66>
    11d0:	85 c0       	rjmp	.+266    	; 0x12dc <GPIO_setupPinDirection+0x170>
    11d2:	af c0       	rjmp	.+350    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_INPUT)
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 23       	and	r24, r24
    11d8:	a9 f4       	brne	.+42     	; 0x1204 <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,a_pinNumber);
    11da:	aa e3       	ldi	r26, 0x3A	; 58
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ea e3       	ldi	r30, 0x3A	; 58
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <GPIO_setupPinDirection+0x8c>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <GPIO_setupPinDirection+0x88>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	97 c0       	rjmp	.+302    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,a_pinNumber);
    1204:	aa e3       	ldi	r26, 0x3A	; 58
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <GPIO_setupPinDirection+0xb6>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <GPIO_setupPinDirection+0xb2>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	83 c0       	rjmp	.+262    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_direction == PIN_INPUT)
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	88 23       	and	r24, r24
    1230:	a9 f4       	brne	.+42     	; 0x125c <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,a_pinNumber);
    1232:	a7 e3       	ldi	r26, 0x37	; 55
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e7 e3       	ldi	r30, 0x37	; 55
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_setupPinDirection+0xe4>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_setupPinDirection+0xe0>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	6b c0       	rjmp	.+214    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,a_pinNumber);
    125c:	a7 e3       	ldi	r26, 0x37	; 55
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e7 e3       	ldi	r30, 0x37	; 55
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <GPIO_setupPinDirection+0x10e>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <GPIO_setupPinDirection+0x10a>
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	57 c0       	rjmp	.+174    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_direction == PIN_INPUT)
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	88 23       	and	r24, r24
    1288:	a9 f4       	brne	.+42     	; 0x12b4 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,a_pinNumber);
    128a:	a4 e3       	ldi	r26, 0x34	; 52
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e4 e3       	ldi	r30, 0x34	; 52
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_setupPinDirection+0x13c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_setupPinDirection+0x138>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	3f c0       	rjmp	.+126    	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,a_pinNumber);
    12b4:	a4 e3       	ldi	r26, 0x34	; 52
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e4 e3       	ldi	r30, 0x34	; 52
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_setupPinDirection+0x166>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_setupPinDirection+0x162>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	2b c0       	rjmp	.+86     	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_direction == PIN_INPUT)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 23       	and	r24, r24
    12e0:	a9 f4       	brne	.+42     	; 0x130c <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,a_pinNumber);
    12e2:	a1 e3       	ldi	r26, 0x31	; 49
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e1 e3       	ldi	r30, 0x31	; 49
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_setupPinDirection+0x194>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_setupPinDirection+0x190>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,a_pinNumber);
    130c:	a1 e3       	ldi	r26, 0x31	; 49
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e1 e3       	ldi	r30, 0x31	; 49
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <GPIO_setupPinDirection+0x1be>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <GPIO_setupPinDirection+0x1ba>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <GPIO_writePin>:
 * not handle the request.
 * IF the value is not Logic High or Logic Low the function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 a_portNumber ,uint8 a_pinNumber ,uint8 a_value)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <GPIO_writePin+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <GPIO_writePin+0x8>
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	6a 83       	std	Y+2, r22	; 0x02
    1354:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 *  If the input port number or pin number are not correct, The function will
	 *  not handle the request.
	 *  IF the value is not Logic High or Logic Low the function will not handle the request
	 */
	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ) || (a_value > 1))
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	08 f0       	brcs	.+2      	; 0x135e <GPIO_writePin+0x1c>
    135c:	d9 c0       	rjmp	.+434    	; 0x1510 <GPIO_writePin+0x1ce>
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	08 f0       	brcs	.+2      	; 0x1366 <GPIO_writePin+0x24>
    1364:	d5 c0       	rjmp	.+426    	; 0x1510 <GPIO_writePin+0x1ce>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	08 f0       	brcs	.+2      	; 0x136e <GPIO_writePin+0x2c>
    136c:	d1 c0       	rjmp	.+418    	; 0x1510 <GPIO_writePin+0x1ce>
		/*	Do nothing	*/
	}
	else
	{
		/*	Writes 1 or 0  in the pin	*/
		switch(a_portNumber)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3d 83       	std	Y+5, r19	; 0x05
    1376:	2c 83       	std	Y+4, r18	; 0x04
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <GPIO_writePin+0x42>
    1382:	43 c0       	rjmp	.+134    	; 0x140a <GPIO_writePin+0xc8>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <GPIO_writePin+0x56>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	71 f0       	breq	.+28     	; 0x13b2 <GPIO_writePin+0x70>
    1396:	bc c0       	rjmp	.+376    	; 0x1510 <GPIO_writePin+0x1ce>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <GPIO_writePin+0x62>
    13a2:	5f c0       	rjmp	.+190    	; 0x1462 <GPIO_writePin+0x120>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <GPIO_writePin+0x6e>
    13ae:	85 c0       	rjmp	.+266    	; 0x14ba <GPIO_writePin+0x178>
    13b0:	af c0       	rjmp	.+350    	; 0x1510 <GPIO_writePin+0x1ce>
		{
		case PORTA_ID:
			if(a_value == LOGIC_LOW)
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 23       	and	r24, r24
    13b6:	a9 f4       	brne	.+42     	; 0x13e2 <GPIO_writePin+0xa0>
			{
				CLEAR_BIT(PORTA,a_pinNumber);
    13b8:	ab e3       	ldi	r26, 0x3B	; 59
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e3       	ldi	r30, 0x3B	; 59
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_writePin+0x94>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_writePin+0x90>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	97 c0       	rjmp	.+302    	; 0x1510 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTA,a_pinNumber);
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_writePin+0xbe>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_writePin+0xba>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	83 c0       	rjmp	.+262    	; 0x1510 <GPIO_writePin+0x1ce>
			}
			break;

		case PORTB_ID:
			if(a_value == LOGIC_LOW)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 23       	and	r24, r24
    140e:	a9 f4       	brne	.+42     	; 0x143a <GPIO_writePin+0xf8>
			{
				CLEAR_BIT(PORTB,a_pinNumber);
    1410:	a8 e3       	ldi	r26, 0x38	; 56
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e8 e3       	ldi	r30, 0x38	; 56
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_writePin+0xec>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_writePin+0xe8>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	6b c0       	rjmp	.+214    	; 0x1510 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTB,a_pinNumber);
    143a:	a8 e3       	ldi	r26, 0x38	; 56
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e8 e3       	ldi	r30, 0x38	; 56
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_writePin+0x116>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_writePin+0x112>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	57 c0       	rjmp	.+174    	; 0x1510 <GPIO_writePin+0x1ce>
			}
			break;

		case PORTC_ID:
			if(a_value == LOGIC_LOW)
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 23       	and	r24, r24
    1466:	a9 f4       	brne	.+42     	; 0x1492 <GPIO_writePin+0x150>
			{
				CLEAR_BIT(PORTC,a_pinNumber);
    1468:	a5 e3       	ldi	r26, 0x35	; 53
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e3       	ldi	r30, 0x35	; 53
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_writePin+0x144>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_writePin+0x140>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	3f c0       	rjmp	.+126    	; 0x1510 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTC,a_pinNumber);
    1492:	a5 e3       	ldi	r26, 0x35	; 53
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e3       	ldi	r30, 0x35	; 53
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_writePin+0x16e>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_writePin+0x16a>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	2b c0       	rjmp	.+86     	; 0x1510 <GPIO_writePin+0x1ce>
			}
			break;

		case PORTD_ID:
			if(a_value == LOGIC_LOW)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 23       	and	r24, r24
    14be:	a9 f4       	brne	.+42     	; 0x14ea <GPIO_writePin+0x1a8>
			{
				CLEAR_BIT(PORTD,a_pinNumber);
    14c0:	a2 e3       	ldi	r26, 0x32	; 50
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e2 e3       	ldi	r30, 0x32	; 50
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_writePin+0x19c>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_writePin+0x198>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	13 c0       	rjmp	.+38     	; 0x1510 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTD,a_pinNumber);
    14ea:	a2 e3       	ldi	r26, 0x32	; 50
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e2 e3       	ldi	r30, 0x32	; 50
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <GPIO_writePin+0x1c6>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <GPIO_writePin+0x1c2>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <GPIO_readPin>:
 *
 * If the input port number or pin number are not correct, The function will
 * return LOGIC_LOW.
 */
uint8 GPIO_readPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <GPIO_readPin+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <GPIO_readPin+0x8>
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	6b 83       	std	Y+3, r22	; 0x03
	uint8 L_pinValue = LOGIC_LOW;
    1532:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * If the input port number or pin number are not correct, The function will
	 * not handle the request.
     */

	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ))
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	08 f0       	brcs	.+2      	; 0x153c <GPIO_readPin+0x1c>
    153a:	84 c0       	rjmp	.+264    	; 0x1644 <GPIO_readPin+0x124>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	08 f0       	brcs	.+2      	; 0x1544 <GPIO_readPin+0x24>
    1542:	80 c0       	rjmp	.+256    	; 0x1644 <GPIO_readPin+0x124>
		/*	Do nothing	*/
	}
	else
	{
		/*	 Read the value of a specific pin if it is Logic High or Logic Low.	*/
		switch(a_portNumber)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3d 83       	std	Y+5, r19	; 0x05
    154c:	2c 83       	std	Y+4, r18	; 0x04
    154e:	4c 81       	ldd	r20, Y+4	; 0x04
    1550:	5d 81       	ldd	r21, Y+5	; 0x05
    1552:	41 30       	cpi	r20, 0x01	; 1
    1554:	51 05       	cpc	r21, r1
    1556:	79 f1       	breq	.+94     	; 0x15b6 <GPIO_readPin+0x96>
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	34 f4       	brge	.+12     	; 0x156e <GPIO_readPin+0x4e>
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	21 15       	cp	r18, r1
    1568:	31 05       	cpc	r19, r1
    156a:	69 f0       	breq	.+26     	; 0x1586 <GPIO_readPin+0x66>
    156c:	6b c0       	rjmp	.+214    	; 0x1644 <GPIO_readPin+0x124>
    156e:	4c 81       	ldd	r20, Y+4	; 0x04
    1570:	5d 81       	ldd	r21, Y+5	; 0x05
    1572:	42 30       	cpi	r20, 0x02	; 2
    1574:	51 05       	cpc	r21, r1
    1576:	b9 f1       	breq	.+110    	; 0x15e6 <GPIO_readPin+0xc6>
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <GPIO_readPin+0x64>
    1582:	49 c0       	rjmp	.+146    	; 0x1616 <GPIO_readPin+0xf6>
    1584:	5f c0       	rjmp	.+190    	; 0x1644 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,a_pinNumber) )
    1586:	e9 e3       	ldi	r30, 0x39	; 57
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a9 01       	movw	r20, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_readPin+0x7e>
    159a:	55 95       	asr	r21
    159c:	47 95       	ror	r20
    159e:	8a 95       	dec	r24
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_readPin+0x7a>
    15a2:	ca 01       	movw	r24, r20
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	90 70       	andi	r25, 0x00	; 0
    15a8:	88 23       	and	r24, r24
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <GPIO_readPin+0x92>
			{
				L_pinValue = LOGIC_HIGH;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	49 c0       	rjmp	.+146    	; 0x1644 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	47 c0       	rjmp	.+142    	; 0x1644 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB,a_pinNumber) )
    15b6:	e6 e3       	ldi	r30, 0x36	; 54
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a9 01       	movw	r20, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <GPIO_readPin+0xae>
    15ca:	55 95       	asr	r21
    15cc:	47 95       	ror	r20
    15ce:	8a 95       	dec	r24
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <GPIO_readPin+0xaa>
    15d2:	ca 01       	movw	r24, r20
    15d4:	81 70       	andi	r24, 0x01	; 1
    15d6:	90 70       	andi	r25, 0x00	; 0
    15d8:	88 23       	and	r24, r24
    15da:	19 f0       	breq	.+6      	; 0x15e2 <GPIO_readPin+0xc2>
			{
				L_pinValue = LOGIC_HIGH;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	31 c0       	rjmp	.+98     	; 0x1644 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	2f c0       	rjmp	.+94     	; 0x1644 <GPIO_readPin+0x124>
			}			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC,a_pinNumber) )
    15e6:	e3 e3       	ldi	r30, 0x33	; 51
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a9 01       	movw	r20, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <GPIO_readPin+0xde>
    15fa:	55 95       	asr	r21
    15fc:	47 95       	ror	r20
    15fe:	8a 95       	dec	r24
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <GPIO_readPin+0xda>
    1602:	ca 01       	movw	r24, r20
    1604:	81 70       	andi	r24, 0x01	; 1
    1606:	90 70       	andi	r25, 0x00	; 0
    1608:	88 23       	and	r24, r24
    160a:	19 f0       	breq	.+6      	; 0x1612 <GPIO_readPin+0xf2>
			{
				L_pinValue = LOGIC_HIGH;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	19 c0       	rjmp	.+50     	; 0x1644 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	17 c0       	rjmp	.+46     	; 0x1644 <GPIO_readPin+0x124>
			}
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND,a_pinNumber) )
    1616:	e0 e3       	ldi	r30, 0x30	; 48
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_readPin+0x10e>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_readPin+0x10a>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	88 23       	and	r24, r24
    163a:	19 f0       	breq	.+6      	; 0x1642 <GPIO_readPin+0x122>
			{
				L_pinValue = LOGIC_HIGH;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1642:	19 82       	std	Y+1, r1	; 0x01
		default:
			/*	Do Nothing	*/
			break;
		}
	}
	return L_pinValue;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <GPIO_setupPortDirection>:
 *  direction will be set.
 *
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 a_portNumber ,PortDirectionType a_direction)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <GPIO_setupPortDirection+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <GPIO_setupPortDirection+0x8>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	6a 83       	std	Y+2, r22	; 0x02

	/*	If the input port number is greater than NUM_OF_PORTS  The function will
	 * not handle the request.   */
	if( a_portNumber >= NUM_OF_PORTS )
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	84 30       	cpi	r24, 0x04	; 4
    166a:	90 f5       	brcc	.+100    	; 0x16d0 <GPIO_setupPortDirection+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/*	set the direction of all pins of a specific port */
		switch(a_portNumber)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3c 83       	std	Y+4, r19	; 0x04
    1674:	2b 83       	std	Y+3, r18	; 0x03
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	d1 f0       	breq	.+52     	; 0x16b4 <GPIO_setupPortDirection+0x5e>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	2c f4       	brge	.+10     	; 0x1694 <GPIO_setupPortDirection+0x3e>
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	61 f0       	breq	.+24     	; 0x16aa <GPIO_setupPortDirection+0x54>
    1692:	1e c0       	rjmp	.+60     	; 0x16d0 <GPIO_setupPortDirection+0x7a>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	81 f0       	breq	.+32     	; 0x16be <GPIO_setupPortDirection+0x68>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	91 05       	cpc	r25, r1
    16a6:	81 f0       	breq	.+32     	; 0x16c8 <GPIO_setupPortDirection+0x72>
    16a8:	13 c0       	rjmp	.+38     	; 0x16d0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = a_direction;
    16aa:	ea e3       	ldi	r30, 0x3A	; 58
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	80 83       	st	Z, r24
    16b2:	0e c0       	rjmp	.+28     	; 0x16d0 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID:
			DDRB = a_direction;
    16b4:	e7 e3       	ldi	r30, 0x37	; 55
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	80 83       	st	Z, r24
    16bc:	09 c0       	rjmp	.+18     	; 0x16d0 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID:
			DDRC = a_direction;
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	80 83       	st	Z, r24
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID:
			DDRD = a_direction;
    16c8:	e1 e3       	ldi	r30, 0x31	; 49
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	80 83       	st	Z, r24
			/*	Do Nothing	*/
			break;
		}
	}

}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <GPIO_writePort>:
 * If the port direction is input it activate/deactivate the internal Pull-Up resistor.
 *
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 a_portNumber ,uint8 a_value)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <GPIO_writePort+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_writePort+0x8>
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	6a 83       	std	Y+2, r22	; 0x02

	/*	If the input port number  is greater than NUM_OF_PORTS The function will
	 * not handle the request.
	 */
	if( a_portNumber >= NUM_OF_PORTS )
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	90 f5       	brcc	.+100    	; 0x1758 <GPIO_writePort+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/* Write the port value as required */
		switch(a_portNumber)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3c 83       	std	Y+4, r19	; 0x04
    16fc:	2b 83       	std	Y+3, r18	; 0x03
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	d1 f0       	breq	.+52     	; 0x173c <GPIO_writePort+0x5e>
    1708:	2b 81       	ldd	r18, Y+3	; 0x03
    170a:	3c 81       	ldd	r19, Y+4	; 0x04
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <GPIO_writePort+0x3e>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 f0       	breq	.+24     	; 0x1732 <GPIO_writePort+0x54>
    171a:	1e c0       	rjmp	.+60     	; 0x1758 <GPIO_writePort+0x7a>
    171c:	2b 81       	ldd	r18, Y+3	; 0x03
    171e:	3c 81       	ldd	r19, Y+4	; 0x04
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	81 f0       	breq	.+32     	; 0x1746 <GPIO_writePort+0x68>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <GPIO_writePort+0x72>
    1730:	13 c0       	rjmp	.+38     	; 0x1758 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_value;
    1732:	eb e3       	ldi	r30, 0x3B	; 59
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	80 83       	st	Z, r24
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = a_value;
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	80 83       	st	Z, r24
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = a_value;
    1746:	e5 e3       	ldi	r30, 0x35	; 53
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	80 83       	st	Z, r24
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = a_value;
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	80 83       	st	Z, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <GPIO_readPort>:
 * This function return the value of the required port register.
 *
 * If the input port number is not correct, The function will return 0 value.
 */
uint8 GPIO_readPort(uint8 a_portNumber)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_readPort+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_readPort+0x8>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	8a 83       	std	Y+2, r24	; 0x02
	uint8 L_portValue = 0;
    1774:	19 82       	std	Y+1, r1	; 0x01

	/*	 If the input port number is not correct, The function will return 0 value.	*/
	if( a_portNumber >= NUM_OF_PORTS )
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	90 f5       	brcc	.+100    	; 0x17e0 <GPIO_readPort+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/* Return the value of the required port register */
		switch(a_portNumber)
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3c 83       	std	Y+4, r19	; 0x04
    1784:	2b 83       	std	Y+3, r18	; 0x03
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	d1 f0       	breq	.+52     	; 0x17c4 <GPIO_readPort+0x5e>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	2c f4       	brge	.+10     	; 0x17a4 <GPIO_readPort+0x3e>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	61 f0       	breq	.+24     	; 0x17ba <GPIO_readPort+0x54>
    17a2:	1e c0       	rjmp	.+60     	; 0x17e0 <GPIO_readPort+0x7a>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <GPIO_readPort+0x68>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	91 05       	cpc	r25, r1
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <GPIO_readPort+0x72>
    17b8:	13 c0       	rjmp	.+38     	; 0x17e0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			L_portValue = PINA;
    17ba:	e9 e3       	ldi	r30, 0x39	; 57
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	0e c0       	rjmp	.+28     	; 0x17e0 <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			L_portValue = PINB;
    17c4:	e6 e3       	ldi	r30, 0x36	; 54
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			L_portValue = PINC;
    17ce:	e3 e3       	ldi	r30, 0x33	; 51
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			L_portValue = PIND;
    17d8:	e0 e3       	ldi	r30, 0x30	; 48
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	89 83       	std	Y+1, r24	; 0x01
		default:
			/*	Do Nothing	*/
			break;
		}
	}
	return L_portValue;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <GPIO_activate_intenalPUR_forPin>:
 *
 * If the direction of the pin is output it won't activate the internal PUR
 * it will be write 1 on the pin
 */
void GPIO_activate_intenalPUR_forPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_activate_intenalPUR_forPin+0x6>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(a_portNumber , a_pinNumber , LOGIC_HIGH);
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	6a 81       	ldd	r22, Y+2	; 0x02
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <GPIO_deactivate_intenalPUR_forPin>:
 *
 * If the direction of the pin is output it won't deactivate the internal PUR
 * it will be write 0 on the pin
 */
void GPIO_deactivate_intenalPUR_forPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <GPIO_deactivate_intenalPUR_forPin+0x6>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(a_portNumber , a_pinNumber , LOGIC_LOW);
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	6a 81       	ldd	r22, Y+2	; 0x02
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <KEYPAD_getPressedKey>:
 * Description:
 * This is Synchronous function in which it won't exit from function until it get
 * only one reading from the keypad [read only one input from keypad]
 */
uint8 KEYPAD_getPressedKey(void)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <KEYPAD_getPressedKey+0x6>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	 *  Press the value save it and break the while 1
	 */
	while(1)
	{
		/* loop for columns */
		for(L_col = 0 ; L_col < KEYPAD_NUM_OF_COLUMNS ; L_col++)
    183e:	1a 82       	std	Y+2, r1	; 0x02
    1840:	49 c0       	rjmp	.+146    	; 0x18d4 <KEYPAD_getPressedKey+0xa0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID , PORT_INPUT);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID + L_col ,PIN_OUTPUT);
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	98 2f       	mov	r25, r24
    184e:	9c 5f       	subi	r25, 0xFC	; 252
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	69 2f       	mov	r22, r25
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 b6 08 	call	0x116c	; 0x116c <GPIO_setupPinDirection>
			 */
			#if ( (THIS_MCU_SUPPORT_INTERNAL_PUR == TRUE ) && (SET_KEYPAD_USING_INTERNAL_PUR == TRUE) )
					/*	in case of internal pull up resistor we will loop on
					 *  them for activation
					 */
					for(L_row=0 ; L_row < KEYPAD_NUM_OF_ROWS ; L_row++)
    185a:	19 82       	std	Y+1, r1	; 0x01
    185c:	07 c0       	rjmp	.+14     	; 0x186c <KEYPAD_getPressedKey+0x38>
					{
						GPIO_activate_intenalPUR_forPin(KEYPAD_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+L_row);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	69 81       	ldd	r22, Y+1	; 0x01
    1862:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <GPIO_activate_intenalPUR_forPin>
			 */
			#if ( (THIS_MCU_SUPPORT_INTERNAL_PUR == TRUE ) && (SET_KEYPAD_USING_INTERNAL_PUR == TRUE) )
					/*	in case of internal pull up resistor we will loop on
					 *  them for activation
					 */
					for(L_row=0 ; L_row < KEYPAD_NUM_OF_ROWS ; L_row++)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	b0 f3       	brcs	.-20     	; 0x185e <KEYPAD_getPressedKey+0x2a>
					{
						GPIO_activate_intenalPUR_forPin(KEYPAD_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+L_row);
					}

					GPIO_writePin(KEYPAD_PORT_ID , KEYPAD_FIRST_COLUMN_PIN_ID + L_col ,LOGIC_LOW);
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	98 2f       	mov	r25, r24
    1876:	9c 5f       	subi	r25, 0xFC	; 252
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	69 2f       	mov	r22, r25
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
						GPIO_writePort(KEYPAD_PORT_ID , (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+L_col)));
					#endif
			#endif

			/* loop for Rows and read them */
			for(L_row =0 ; L_row < KEYPAD_NUM_OF_ROWS ; L_row++)
    1882:	19 82       	std	Y+1, r1	; 0x01
    1884:	21 c0       	rjmp	.+66     	; 0x18c8 <KEYPAD_getPressedKey+0x94>
			{
				/*	We will loop upon all the column with its corresponding pins if the user
				 *  press any key we will enter */
				if(  GPIO_readPin( KEYPAD_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+L_row ) == KEYPAD_BUTTON_PRESSED  )
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	69 81       	ldd	r22, Y+1	; 0x01
    188a:	0e 94 90 0a 	call	0x1520	; 0x1520 <GPIO_readPin>
    188e:	88 23       	and	r24, r24
    1890:	c1 f4       	brne	.+48     	; 0x18c2 <KEYPAD_getPressedKey+0x8e>
					 *  leave the key , without the loop the function will return the value
					 *  more than once and this not what we want so this while will make
					 *  function won't return a value until the user remove his finger
					 *  from the keypad
					 */
					while(  GPIO_readPin( KEYPAD_PORT_ID , KEYPAD_FIRST_ROW_PIN_ID+L_row ) == KEYPAD_BUTTON_PRESSED  );
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	69 81       	ldd	r22, Y+1	; 0x01
    1896:	0e 94 90 0a 	call	0x1520	; 0x1520 <GPIO_readPin>
    189a:	88 23       	and	r24, r24
    189c:	d1 f3       	breq	.-12     	; 0x1892 <KEYPAD_getPressedKey+0x5e>
					 * and return the ASCII of this symbol.
					 */
					#if (KEYPAD_NUM_OF_COLUMNS == 3)
						return KEYPAD_4x3_adjustKeyNumber( (L_row*KEYPAD_NUM_OF_COLUMNS) + L_col + 1 );
					#elif (KEYPAD_NUM_OF_COLUMNS == 4)
						return KEYPAD_4x4_adjustKeyNumber( (L_row*KEYPAD_NUM_OF_COLUMNS) + L_col + 1);
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	98 2f       	mov	r25, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	89 0f       	add	r24, r25
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	0e 94 6f 0c 	call	0x18de	; 0x18de <KEYPAD_4x4_adjustKeyNumber>
			#endif
			*/
		}
	}
	return 0;
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret
						GPIO_writePort(KEYPAD_PORT_ID , (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+L_col)));
					#endif
			#endif

			/* loop for Rows and read them */
			for(L_row =0 ; L_row < KEYPAD_NUM_OF_ROWS ; L_row++)
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	e0 f2       	brcs	.-72     	; 0x1886 <KEYPAD_getPressedKey+0x52>
	 *  Press the value save it and break the while 1
	 */
	while(1)
	{
		/* loop for columns */
		for(L_col = 0 ; L_col < KEYPAD_NUM_OF_COLUMNS ; L_col++)
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	8f 5f       	subi	r24, 0xFF	; 255
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <KEYPAD_getPressedKey+0xa8>
    18da:	b3 cf       	rjmp	.-154    	; 0x1842 <KEYPAD_getPressedKey+0xe>
    18dc:	b0 cf       	rjmp	.-160    	; 0x183e <KEYPAD_getPressedKey+0xa>

000018de <KEYPAD_4x4_adjustKeyNumber>:
 * This function update the value of keypad button pressed according to keypad
 * which is used in real life or in simulator , Here this is the values in
 * 4x4 Keypad in Proteus
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 a_keyNumber)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 L_keyValue = 0;
    18ec:	19 82       	std	Y+1, r1	; 0x01

	switch(a_keyNumber)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3c 83       	std	Y+4, r19	; 0x04
    18f6:	2b 83       	std	Y+3, r18	; 0x03
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	88 30       	cpi	r24, 0x08	; 8
    18fe:	91 05       	cpc	r25, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1902:	70 c0       	rjmp	.+224    	; 0x19e4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1904:	2b 81       	ldd	r18, Y+3	; 0x03
    1906:	3c 81       	ldd	r19, Y+4	; 0x04
    1908:	29 30       	cpi	r18, 0x09	; 9
    190a:	31 05       	cpc	r19, r1
    190c:	5c f5       	brge	.+86     	; 0x1964 <KEYPAD_4x4_adjustKeyNumber+0x86>
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1918:	59 c0       	rjmp	.+178    	; 0x19cc <KEYPAD_4x4_adjustKeyNumber+0xee>
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	25 30       	cpi	r18, 0x05	; 5
    1920:	31 05       	cpc	r19, r1
    1922:	9c f4       	brge	.+38     	; 0x194a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	91 05       	cpc	r25, r1
    192c:	09 f4       	brne	.+2      	; 0x1930 <KEYPAD_4x4_adjustKeyNumber+0x52>
    192e:	48 c0       	rjmp	.+144    	; 0x19c0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	23 30       	cpi	r18, 0x03	; 3
    1936:	31 05       	cpc	r19, r1
    1938:	0c f0       	brlt	.+2      	; 0x193c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    193a:	45 c0       	rjmp	.+138    	; 0x19c6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1946:	39 c0       	rjmp	.+114    	; 0x19ba <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1948:	67 c0       	rjmp	.+206    	; 0x1a18 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	26 30       	cpi	r18, 0x06	; 6
    1950:	31 05       	cpc	r19, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1954:	41 c0       	rjmp	.+130    	; 0x19d8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	87 30       	cpi	r24, 0x07	; 7
    195c:	91 05       	cpc	r25, r1
    195e:	0c f0       	brlt	.+2      	; 0x1962 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1960:	3e c0       	rjmp	.+124    	; 0x19de <KEYPAD_4x4_adjustKeyNumber+0x100>
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	2c 30       	cpi	r18, 0x0C	; 12
    196a:	31 05       	cpc	r19, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <KEYPAD_4x4_adjustKeyNumber+0x92>
    196e:	46 c0       	rjmp	.+140    	; 0x19fc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	8d 30       	cpi	r24, 0x0D	; 13
    1976:	91 05       	cpc	r25, r1
    1978:	5c f4       	brge	.+22     	; 0x1990 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	2a 30       	cpi	r18, 0x0A	; 10
    1980:	31 05       	cpc	r19, r1
    1982:	b1 f1       	breq	.+108    	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	8b 30       	cpi	r24, 0x0B	; 11
    198a:	91 05       	cpc	r25, r1
    198c:	a4 f5       	brge	.+104    	; 0x19f6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    198e:	2d c0       	rjmp	.+90     	; 0x19ea <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1990:	2b 81       	ldd	r18, Y+3	; 0x03
    1992:	3c 81       	ldd	r19, Y+4	; 0x04
    1994:	2e 30       	cpi	r18, 0x0E	; 14
    1996:	31 05       	cpc	r19, r1
    1998:	b9 f1       	breq	.+110    	; 0x1a08 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	8e 30       	cpi	r24, 0x0E	; 14
    19a0:	91 05       	cpc	r25, r1
    19a2:	7c f1       	brlt	.+94     	; 0x1a02 <KEYPAD_4x4_adjustKeyNumber+0x124>
    19a4:	2b 81       	ldd	r18, Y+3	; 0x03
    19a6:	3c 81       	ldd	r19, Y+4	; 0x04
    19a8:	2f 30       	cpi	r18, 0x0F	; 15
    19aa:	31 05       	cpc	r19, r1
    19ac:	79 f1       	breq	.+94     	; 0x1a0c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	80 31       	cpi	r24, 0x10	; 16
    19b4:	91 05       	cpc	r25, r1
    19b6:	69 f1       	breq	.+90     	; 0x1a12 <KEYPAD_4x4_adjustKeyNumber+0x134>
    19b8:	2f c0       	rjmp	.+94     	; 0x1a18 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1:
			L_keyValue = 7;
    19ba:	87 e0       	ldi	r24, 0x07	; 7
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	2e c0       	rjmp	.+92     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 2:
			L_keyValue = 8;
    19c0:	88 e0       	ldi	r24, 0x08	; 8
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	2b c0       	rjmp	.+86     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 3:
			L_keyValue = 9;
    19c6:	89 e0       	ldi	r24, 0x09	; 9
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	28 c0       	rjmp	.+80     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 4:
			L_keyValue = '/'; /* We return the ASCI of / as a value */
    19cc:	8f e2       	ldi	r24, 0x2F	; 47
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	25 c0       	rjmp	.+74     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 5:
			L_keyValue = 4;
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	22 c0       	rjmp	.+68     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 6:
			L_keyValue = 5;
    19d8:	85 e0       	ldi	r24, 0x05	; 5
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	1f c0       	rjmp	.+62     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 7:
			L_keyValue = 6;
    19de:	86 e0       	ldi	r24, 0x06	; 6
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	1c c0       	rjmp	.+56     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 8:
			L_keyValue = '*'; /* We return the ASCI of * as a value */
    19e4:	8a e2       	ldi	r24, 0x2A	; 42
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	19 c0       	rjmp	.+50     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 9:
			L_keyValue = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 10:
			L_keyValue = 2;
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	13 c0       	rjmp	.+38     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 11:
			L_keyValue = 3;
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	10 c0       	rjmp	.+32     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 12:
			L_keyValue = '-';  /* We return the ASCI of - as a value */
    19fc:	8d e2       	ldi	r24, 0x2D	; 45
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	0d c0       	rjmp	.+26     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 13:
			L_keyValue = 13;  /* this value represent ENTER */
    1a02:	8d e0       	ldi	r24, 0x0D	; 13
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	0a c0       	rjmp	.+20     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 14:
			L_keyValue = 0;
    1a08:	19 82       	std	Y+1, r1	; 0x01
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 15:
			L_keyValue = '='; /* We return the ASCI of = as a value */
    1a0c:	8d e3       	ldi	r24, 0x3D	; 61
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;

		case 16:
			L_keyValue = '+'; /* We return the ASCI of + as a value */
    1a12:	8b e2       	ldi	r24, 0x2B	; 43
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		default:
			/* we supposed to make a case for each value but this is for debugging
			 * in KEYPAD_getPressedKey to know if the function has a input parameter
			 *  value bigger than the range.
			 */
			L_keyValue = a_keyNumber;
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return L_keyValue;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <LCD_init>:
 * Description:
 * This function initialize the required pins to be output for LCD and send the
 * needed commands to the LCD MCU to initialize it.
 */
void LCD_init(void)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
#if	((LCD_DATA_PIN_MODE == 4))
	uint8 i ;
#endif

	/*	Initialize RS , RW , E as Output	*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID , LCD_RS_PIN_ID , PIN_OUTPUT);
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	65 e0       	ldi	r22, 0x05	; 5
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 b6 08 	call	0x116c	; 0x116c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID , LCD_RW_PIN_ID , PIN_OUTPUT);
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	66 e0       	ldi	r22, 0x06	; 6
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 b6 08 	call	0x116c	; 0x116c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID , LCD_E_PIN_ID , PIN_OUTPUT);
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	67 e0       	ldi	r22, 0x07	; 7
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 b6 08 	call	0x116c	; 0x116c <GPIO_setupPinDirection>

	/*	Send Command to Choose 4 bits data mode		*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#else
	/*	Initialize the all the data port as output 	*/
	GPIO_setupPortDirection( LCD_DATA_PORT_ID , PORT_OUTPUT);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	6f ef       	ldi	r22, 0xFF	; 255
    1a56:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_setupPortDirection>

	/*	Send Command return home for  cursor to home position (address 0)	*/
	LCD_sendCommand(LCD_RETURN_HOME);
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>

	/*	Send Command to Choose 8 bits data mode		*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a60:	88 e3       	ldi	r24, 0x38	; 56
    1a62:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>

#endif

	/*	Send Command to turn Display on and make cursor blinking	*/
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1a66:	8c e0       	ldi	r24, 0x0C	; 12
    1a68:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>

	/*	Send Command to clear all the screen DDRAM data	*/
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <LCD_sendCommand>:
 * In this function we will send the command to the LCD MCU following the steps
 * and rules of AC/Timing characteristics of the LCD in data sheet and the LCD
 * will do the required command.
 */
void LCD_sendCommand(uint8 a_command)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	e9 97       	sbiw	r28, 0x39	; 57
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	89 af       	std	Y+57, r24	; 0x39
	uint8 L_portValue = 0;
	uint8 L_savingBitsMask = 0xF0;
#endif

	/*	RS = 0 to write in Command register	*/
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_LOW);
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	65 e0       	ldi	r22, 0x05	; 5
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
	/*	RW = 0 to write not read	*/
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	66 e0       	ldi	r22, 0x06	; 6
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e8       	ldi	r26, 0x80	; 128
    1aa8:	bf e3       	ldi	r27, 0x3F	; 63
    1aaa:	8d ab       	std	Y+53, r24	; 0x35
    1aac:	9e ab       	std	Y+54, r25	; 0x36
    1aae:	af ab       	std	Y+55, r26	; 0x37
    1ab0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a ef       	ldi	r20, 0xFA	; 250
    1ac0:	54 e4       	ldi	r21, 0x44	; 68
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	89 ab       	std	Y+49, r24	; 0x31
    1acc:	9a ab       	std	Y+50, r25	; 0x32
    1ace:	ab ab       	std	Y+51, r26	; 0x33
    1ad0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1af4:	69 a9       	ldd	r22, Y+49	; 0x31
    1af6:	7a a9       	ldd	r23, Y+50	; 0x32
    1af8:	8b a9       	ldd	r24, Y+51	; 0x33
    1afa:	9c a9       	ldd	r25, Y+52	; 0x34
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_sendCommand+0xdc>
    1b36:	88 ec       	ldi	r24, 0xC8	; 200
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e a7       	std	Y+46, r25	; 0x2e
    1b3c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_sendCommand+0xca>
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	98 a9       	ldd	r25, Y+48	; 0x30
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_sendCommand+0xbe>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b60:	7a a9       	ldd	r23, Y+50	; 0x32
    1b62:	8b a9       	ldd	r24, Y+51	; 0x33
    1b64:	9c a9       	ldd	r25, Y+52	; 0x34
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	98 ab       	std	Y+48, r25	; 0x30
    1b70:	8f a7       	std	Y+47, r24	; 0x2f
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	9c a7       	std	Y+44, r25	; 0x2c
    1b78:	8b a7       	std	Y+43, r24	; 0x2b
    1b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_sendCommand+0x106>
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b

	/*  Delay for Processing Tas = 50 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Enable LCD E = 1	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH);
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	67 e0       	ldi	r22, 0x07	; 7
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8f a3       	std	Y+39, r24	; 0x27
    1b9a:	98 a7       	std	Y+40, r25	; 0x28
    1b9c:	a9 a7       	std	Y+41, r26	; 0x29
    1b9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8b a3       	std	Y+35, r24	; 0x23
    1bba:	9c a3       	std	Y+36, r25	; 0x24
    1bbc:	ad a3       	std	Y+37, r26	; 0x25
    1bbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9a a3       	std	Y+34, r25	; 0x22
    1bde:	89 a3       	std	Y+33, r24	; 0x21
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1be2:	6b a1       	ldd	r22, Y+35	; 0x23
    1be4:	7c a1       	ldd	r23, Y+36	; 0x24
    1be6:	8d a1       	ldd	r24, Y+37	; 0x25
    1be8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9a a3       	std	Y+34, r25	; 0x22
    1c20:	89 a3       	std	Y+33, r24	; 0x21
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_sendCommand+0x1ca>
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	98 a3       	std	Y+32, r25	; 0x20
    1c2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_sendCommand+0x1b8>
    1c34:	98 a3       	std	Y+32, r25	; 0x20
    1c36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9a a3       	std	Y+34, r25	; 0x22
    1c40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	89 a1       	ldd	r24, Y+33	; 0x21
    1c44:	9a a1       	ldd	r25, Y+34	; 0x22
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_sendCommand+0x1ac>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c50:	8d a1       	ldd	r24, Y+37	; 0x25
    1c52:	9e a1       	ldd	r25, Y+38	; 0x26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9a a3       	std	Y+34, r25	; 0x22
    1c5e:	89 a3       	std	Y+33, r24	; 0x21
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	9e 8f       	std	Y+30, r25	; 0x1e
    1c66:	8d 8f       	std	Y+29, r24	; 0x1d
    1c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_sendCommand+0x1f4>
    1c70:	9e 8f       	std	Y+30, r25	; 0x1e
    1c72:	8d 8f       	std	Y+29, r24	; 0x1d
	L_savingBitsMask = 0xF0;
	L_portValue = L_portValue & ROL(L_savingBitsMask,LCD_FIRST_DATA_PIN_ID) ;

#else
	/*	Write the Command in all 8 data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , a_command );
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	69 ad       	ldd	r22, Y+57	; 0x39
    1c78:	0e 94 6f 0b 	call	0x16de	; 0x16de <GPIO_writePort>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	89 8f       	std	Y+25, r24	; 0x19
    1c86:	9a 8f       	std	Y+26, r25	; 0x1a
    1c88:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8d 8b       	std	Y+21, r24	; 0x15
    1ca6:	9e 8b       	std	Y+22, r25	; 0x16
    1ca8:	af 8b       	std	Y+23, r26	; 0x17
    1caa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_sendCommand+0x256>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1cce:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9c 8b       	std	Y+20, r25	; 0x14
    1d0c:	8b 8b       	std	Y+19, r24	; 0x13
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_sendCommand+0x2b6>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	89 8b       	std	Y+17, r24	; 0x11
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0x2a4>
    1d20:	9a 8b       	std	Y+18, r25	; 0x12
    1d22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_sendCommand+0x298>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	98 8b       	std	Y+16, r25	; 0x10
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_sendCommand+0x2e0>
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f

	/*  Delay for Processing Tdsw = 100 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Disable LCD E = 0	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW);
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	67 e0       	ldi	r22, 0x07	; 7
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
    1d74:	9c 87       	std	Y+12, r25	; 0x0c
    1d76:	ad 87       	std	Y+13, r26	; 0x0d
    1d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8f 83       	std	Y+7, r24	; 0x07
    1d94:	98 87       	std	Y+8, r25	; 0x08
    1d96:	a9 87       	std	Y+9, r26	; 0x09
    1d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_sendCommand+0x344>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbe:	78 85       	ldd	r23, Y+8	; 0x08
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_sendCommand+0x3a4>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x392>
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_sendCommand+0x386>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_sendCommand+0x3ce>
    1e4a:	9a 83       	std	Y+2, r25	; 0x02
    1e4c:	89 83       	std	Y+1, r24	; 0x01

	/*  Delay for Processing Th = 13 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Write 0 to the 8 bits of Data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , LOGIC_LOW );
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	0e 94 6f 0b 	call	0x16de	; 0x16de <GPIO_writePort>

#endif
}
    1e56:	e9 96       	adiw	r28, 0x39	; 57
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <LCD_displayCharacter>:
 * In this function we will send the data to the LCD MCU following the steps
 * and rules of AC/Timing characteristics of the LCD in data sheet and The LCD
 * will display it on the screen.
 */
void LCD_displayCharacter(char a_character)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	e9 97       	sbiw	r28, 0x39	; 57
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	89 af       	std	Y+57, r24	; 0x39
	uint8 L_portValue = 0;
	uint8 L_savingBitsMask = 0xF0;
#endif

	/*	RS = 1 to write in Data register	*/
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_HIGH);
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	65 e0       	ldi	r22, 0x05	; 5
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
	/*	RW = 0 to write not read	*/
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	66 e0       	ldi	r22, 0x06	; 6
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e8       	ldi	r26, 0x80	; 128
    1e98:	bf e3       	ldi	r27, 0x3F	; 63
    1e9a:	8d ab       	std	Y+53, r24	; 0x35
    1e9c:	9e ab       	std	Y+54, r25	; 0x36
    1e9e:	af ab       	std	Y+55, r26	; 0x37
    1ea0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a ef       	ldi	r20, 0xFA	; 250
    1eb0:	54 e4       	ldi	r21, 0x44	; 68
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	89 ab       	std	Y+49, r24	; 0x31
    1ebc:	9a ab       	std	Y+50, r25	; 0x32
    1ebe:	ab ab       	std	Y+51, r26	; 0x33
    1ec0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	98 ab       	std	Y+48, r25	; 0x30
    1ee0:	8f a7       	std	Y+47, r24	; 0x2f
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eea:	9c a9       	ldd	r25, Y+52	; 0x34
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6d a9       	ldd	r22, Y+53	; 0x35
    1efe:	7e a9       	ldd	r23, Y+54	; 0x36
    1f00:	8f a9       	ldd	r24, Y+55	; 0x37
    1f02:	98 ad       	ldd	r25, Y+56	; 0x38
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	98 ab       	std	Y+48, r25	; 0x30
    1f22:	8f a7       	std	Y+47, r24	; 0x2f
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_displayCharacter+0xdc>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e a7       	std	Y+46, r25	; 0x2e
    1f2c:	8d a7       	std	Y+45, r24	; 0x2d
    1f2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_displayCharacter+0xca>
    1f36:	9e a7       	std	Y+46, r25	; 0x2e
    1f38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f46:	98 a9       	ldd	r25, Y+48	; 0x30
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_displayCharacter+0xbe>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	9c a7       	std	Y+44, r25	; 0x2c
    1f68:	8b a7       	std	Y+43, r24	; 0x2b
    1f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_displayCharacter+0x106>
    1f72:	9c a7       	std	Y+44, r25	; 0x2c
    1f74:	8b a7       	std	Y+43, r24	; 0x2b

	/*  Delay for Processing Tas = 50 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Enable LCD E = 1	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	67 e0       	ldi	r22, 0x07	; 7
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e8       	ldi	r26, 0x80	; 128
    1f86:	bf e3       	ldi	r27, 0x3F	; 63
    1f88:	8f a3       	std	Y+39, r24	; 0x27
    1f8a:	98 a7       	std	Y+40, r25	; 0x28
    1f8c:	a9 a7       	std	Y+41, r26	; 0x29
    1f8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f90:	6f a1       	ldd	r22, Y+39	; 0x27
    1f92:	78 a5       	ldd	r23, Y+40	; 0x28
    1f94:	89 a5       	ldd	r24, Y+41	; 0x29
    1f96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a ef       	ldi	r20, 0xFA	; 250
    1f9e:	54 e4       	ldi	r21, 0x44	; 68
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	8b a3       	std	Y+35, r24	; 0x23
    1faa:	9c a3       	std	Y+36, r25	; 0x24
    1fac:	ad a3       	std	Y+37, r26	; 0x25
    1fae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e8       	ldi	r20, 0x80	; 128
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc4:	88 23       	and	r24, r24
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
    1fd0:	3f c0       	rjmp	.+126    	; 0x2050 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1fd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	57 e4       	ldi	r21, 0x47	; 71
    1fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	4c f5       	brge	.+82     	; 0x203c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fea:	6f a1       	ldd	r22, Y+39	; 0x27
    1fec:	78 a5       	ldd	r23, Y+40	; 0x28
    1fee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e2       	ldi	r20, 0x20	; 32
    1ff8:	51 e4       	ldi	r21, 0x41	; 65
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9a a3       	std	Y+34, r25	; 0x22
    2010:	89 a3       	std	Y+33, r24	; 0x21
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <LCD_displayCharacter+0x1ca>
    2014:	88 ec       	ldi	r24, 0xC8	; 200
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	98 a3       	std	Y+32, r25	; 0x20
    201a:	8f 8f       	std	Y+31, r24	; 0x1f
    201c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    201e:	98 a1       	ldd	r25, Y+32	; 0x20
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_displayCharacter+0x1b8>
    2024:	98 a3       	std	Y+32, r25	; 0x20
    2026:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2028:	89 a1       	ldd	r24, Y+33	; 0x21
    202a:	9a a1       	ldd	r25, Y+34	; 0x22
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	89 a1       	ldd	r24, Y+33	; 0x21
    2034:	9a a1       	ldd	r25, Y+34	; 0x22
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	69 f7       	brne	.-38     	; 0x2014 <LCD_displayCharacter+0x1ac>
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203c:	6b a1       	ldd	r22, Y+35	; 0x23
    203e:	7c a1       	ldd	r23, Y+36	; 0x24
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9a a3       	std	Y+34, r25	; 0x22
    204e:	89 a3       	std	Y+33, r24	; 0x21
    2050:	89 a1       	ldd	r24, Y+33	; 0x21
    2052:	9a a1       	ldd	r25, Y+34	; 0x22
    2054:	9e 8f       	std	Y+30, r25	; 0x1e
    2056:	8d 8f       	std	Y+29, r24	; 0x1d
    2058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    205a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <LCD_displayCharacter+0x1f4>
    2060:	9e 8f       	std	Y+30, r25	; 0x1e
    2062:	8d 8f       	std	Y+29, r24	; 0x1d
	L_savingBitsMask = 0xF0;
	L_portValue = L_portValue & ROL(L_savingBitsMask,LCD_FIRST_DATA_PIN_ID) ;

#else
	/*	Write the Command in all 8 data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , a_character );
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	69 ad       	ldd	r22, Y+57	; 0x39
    2068:	0e 94 6f 0b 	call	0x16de	; 0x16de <GPIO_writePort>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	89 8f       	std	Y+25, r24	; 0x19
    2076:	9a 8f       	std	Y+26, r25	; 0x1a
    2078:	ab 8f       	std	Y+27, r26	; 0x1b
    207a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8d 8b       	std	Y+21, r24	; 0x15
    2096:	9e 8b       	std	Y+22, r25	; 0x16
    2098:	af 8b       	std	Y+23, r26	; 0x17
    209a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_displayCharacter+0x256>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_displayCharacter+0x2b6>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	9a 89       	ldd	r25, Y+18	; 0x12
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_displayCharacter+0x2a4>
    2110:	9a 8b       	std	Y+18, r25	; 0x12
    2112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_displayCharacter+0x298>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    2144:	8f 85       	ldd	r24, Y+15	; 0x0f
    2146:	98 89       	ldd	r25, Y+16	; 0x10
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_displayCharacter+0x2e0>
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f

	/*  Delay for Processing Tdsw = 100 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Disable LCD E = 0	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW);
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	67 e0       	ldi	r22, 0x07	; 7
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 a1 09 	call	0x1342	; 0x1342 <GPIO_writePin>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e8       	ldi	r26, 0x80	; 128
    2160:	bf e3       	ldi	r27, 0x3F	; 63
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    2164:	9c 87       	std	Y+12, r25	; 0x0c
    2166:	ad 87       	std	Y+13, r26	; 0x0d
    2168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6b 85       	ldd	r22, Y+11	; 0x0b
    216c:	7c 85       	ldd	r23, Y+12	; 0x0c
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a ef       	ldi	r20, 0xFA	; 250
    2178:	54 e4       	ldi	r21, 0x44	; 68
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	98 87       	std	Y+8, r25	; 0x08
    2186:	a9 87       	std	Y+9, r26	; 0x09
    2188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <LCD_displayCharacter+0x344>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <LCD_displayCharacter+0x3a4>
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_displayCharacter+0x392>
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <LCD_displayCharacter+0x386>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_displayCharacter+0x3ce>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01

	/*  Delay for Processing Th = 13 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Write 0 to the 8 bits of Data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , LOGIC_LOW );
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	0e 94 6f 0b 	call	0x16de	; 0x16de <GPIO_writePort>

#endif

}
    2246:	e9 96       	adiw	r28, 0x39	; 57
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <LCD_moveCursor>:
 * dimension of the LCD.
 * If the row or column of the input is larger than the dimension of the LCD
 * the function won't move the cursor.
 */
void LCD_moveCursor(uint8 a_row , uint8 a_col)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <LCD_moveCursor+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <LCD_moveCursor+0x8>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	8a 83       	std	Y+2, r24	; 0x02
    2268:	6b 83       	std	Y+3, r22	; 0x03
	uint8	L_memoryAddress = 0;
    226a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 *  If the row or column of the input is larger than the dimension of the LCD
	 * the function won't move the cursor.
	 */
	if( (a_row >= LCD_NUM_OF_ROW) || (a_col >= LCD_NUM_OF_COLUMN))
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	84 30       	cpi	r24, 0x04	; 4
    2270:	80 f5       	brcc	.+96     	; 0x22d2 <LCD_moveCursor+0x7a>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	80 31       	cpi	r24, 0x10	; 16
    2276:	68 f5       	brcc	.+90     	; 0x22d2 <LCD_moveCursor+0x7a>
		/*	In order to access a location in DDRAM we must do this
		 *  We must send a command of 8 bit =  0x80  |  [address you want]
		 *  we calculate the address by using the data sheet and know the
		 *  Mapped registers of each row.
		 */
		switch(a_row)
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	3d 83       	std	Y+5, r19	; 0x05
    2280:	2c 83       	std	Y+4, r18	; 0x04
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	9d 81       	ldd	r25, Y+5	; 0x05
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	91 05       	cpc	r25, r1
    228a:	c1 f0       	breq	.+48     	; 0x22bc <LCD_moveCursor+0x64>
    228c:	2c 81       	ldd	r18, Y+4	; 0x04
    228e:	3d 81       	ldd	r19, Y+5	; 0x05
    2290:	22 30       	cpi	r18, 0x02	; 2
    2292:	31 05       	cpc	r19, r1
    2294:	2c f4       	brge	.+10     	; 0x22a0 <LCD_moveCursor+0x48>
    2296:	8c 81       	ldd	r24, Y+4	; 0x04
    2298:	9d 81       	ldd	r25, Y+5	; 0x05
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	61 f0       	breq	.+24     	; 0x22b6 <LCD_moveCursor+0x5e>
    229e:	19 c0       	rjmp	.+50     	; 0x22d2 <LCD_moveCursor+0x7a>
    22a0:	2c 81       	ldd	r18, Y+4	; 0x04
    22a2:	3d 81       	ldd	r19, Y+5	; 0x05
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	69 f0       	breq	.+26     	; 0x22c4 <LCD_moveCursor+0x6c>
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	9d 81       	ldd	r25, Y+5	; 0x05
    22ae:	83 30       	cpi	r24, 0x03	; 3
    22b0:	91 05       	cpc	r25, r1
    22b2:	61 f0       	breq	.+24     	; 0x22cc <LCD_moveCursor+0x74>
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <LCD_moveCursor+0x7a>
		{
			case 0:
				L_memoryAddress = a_col;
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	0b c0       	rjmp	.+22     	; 0x22d2 <LCD_moveCursor+0x7a>
				break;
			case 1:
				L_memoryAddress = a_col + 0x40;
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	80 5c       	subi	r24, 0xC0	; 192
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <LCD_moveCursor+0x7a>
				break;
			case 2:
				L_memoryAddress = a_col + 0x10;
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	80 5f       	subi	r24, 0xF0	; 240
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <LCD_moveCursor+0x7a>
				break;
			case 3:
				L_memoryAddress = a_col + 0x50;
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	80 5b       	subi	r24, 0xB0	; 176
    22d0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*	Access the memory address in DDRAM by orring the memory address with 0x80
	 *	and send the result as command
	 */
	LCD_sendCommand( LCD_SET_CURSOR_LOCATION | L_memoryAddress );
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	80 68       	ori	r24, 0x80	; 128
    22d6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <LCD_displayString>:
 *    in the screen
 * 2) If the size of the string is larger than the remaining position at the line
 * 	  your string will be cut and only part of it will be displayed
 */
void LCD_displayString(const char *a_str)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <LCD_displayString+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22fa:	19 82       	std	Y+1, r1	; 0x01
    22fc:	0e c0       	rjmp	.+28     	; 0x231a <LCD_displayString+0x30>

	/*	Loop though the array and each time display only one character	*/
	while( a_str[i] != '\0')
	{
		LCD_displayCharacter(a_str[i]);
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	80 81       	ld	r24, Z
    2310:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayCharacter>
		i++;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	89 83       	std	Y+1, r24	; 0x01
void LCD_displayString(const char *a_str)
{
	uint8 i = 0;

	/*	Loop though the array and each time display only one character	*/
	while( a_str[i] != '\0')
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	80 81       	ld	r24, Z
    232c:	88 23       	and	r24, r24
    232e:	39 f7       	brne	.-50     	; 0x22fe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(a_str[i]);
		i++;
	}
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LCD_displayStringAtRowColumn>:
 * This function display a whole string in the Screen at specified row and column.
 * If the size of the string is larger than the remaining position at the Line
 * your string will be cut and only part of it will be displayed.
 */
void LCD_displayStringAtRowColumn(uint8 a_row , uint8 a_col , const char *a_str)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <LCD_displayStringAtRowColumn+0x6>
    2342:	00 d0       	rcall	.+0      	; 0x2344 <LCD_displayStringAtRowColumn+0x8>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	6a 83       	std	Y+2, r22	; 0x02
    234c:	5c 83       	std	Y+4, r21	; 0x04
    234e:	4b 83       	std	Y+3, r20	; 0x03
	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	6a 81       	ldd	r22, Y+2	; 0x02
    2354:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>
	/*	Display the String	*/
	LCD_displayString(a_str);
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	0e 94 75 11 	call	0x22ea	; 0x22ea <LCD_displayString>
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <LCD_displayNumber>:
 *    in the screen
 * 2) If the size of the Number is larger than the remaining position at the line
 * 	  your Number will be cut and only part of it will be displayed
 */
void LCD_displayNumber(sint32 a_number)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	64 97       	sbiw	r28, 0x14	; 20
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	69 8b       	std	Y+17, r22	; 0x11
    2384:	7a 8b       	std	Y+18, r23	; 0x12
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	9c 8b       	std	Y+20, r25	; 0x14
	/*	Buffer to save the ASCI values of the number	*/
	char L_buff [16] = {0};
    238a:	80 e1       	ldi	r24, 0x10	; 16
    238c:	fe 01       	movw	r30, r28
    238e:	31 96       	adiw	r30, 0x01	; 1
    2390:	df 01       	movw	r26, r30
    2392:	98 2f       	mov	r25, r24
    2394:	1d 92       	st	X+, r1
    2396:	9a 95       	dec	r25
    2398:	e9 f7       	brne	.-6      	; 0x2394 <LCD_displayNumber+0x26>

	/*	Function convert each separate number to ASCI value and save it to L_buff
	 *  10 is to tell the function to convert a_number to ASCI of number with base
	 *  10.
	 */
	itoa(a_number , L_buff , 10);
    239a:	89 89       	ldd	r24, Y+17	; 0x11
    239c:	9a 89       	ldd	r25, Y+18	; 0x12
    239e:	9e 01       	movw	r18, r28
    23a0:	2f 5f       	subi	r18, 0xFF	; 255
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	b9 01       	movw	r22, r18
    23a6:	4a e0       	ldi	r20, 0x0A	; 10
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	0e 94 ef 16 	call	0x2dde	; 0x2dde <itoa>

	/*	Display the String	*/
	LCD_displayString(L_buff);
    23ae:	ce 01       	movw	r24, r28
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	0e 94 75 11 	call	0x22ea	; 0x22ea <LCD_displayString>
}
    23b6:	64 96       	adiw	r28, 0x14	; 20
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <LCD_displayNumberAtRowColumn>:
 * This function display a whole Number in the Screen at specified row and column.
 * If the size of the Number is larger than the remaining position at the Line
 * your Number will be cut and only part of it will be displayed.
 */
void LCD_displayNumberAtRowColumn(uint8 a_row , uint8 a_col , sint32 a_number)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <LCD_displayNumberAtRowColumn+0x6>
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <LCD_displayNumberAtRowColumn+0x8>
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <LCD_displayNumberAtRowColumn+0xa>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	6a 83       	std	Y+2, r22	; 0x02
    23da:	2b 83       	std	Y+3, r18	; 0x03
    23dc:	3c 83       	std	Y+4, r19	; 0x04
    23de:	4d 83       	std	Y+5, r20	; 0x05
    23e0:	5e 83       	std	Y+6, r21	; 0x06
	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	6a 81       	ldd	r22, Y+2	; 0x02
    23e6:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_moveCursor>
	/*	Display the String	*/
	LCD_displayNumber(a_number);
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	ad 81       	ldd	r26, Y+5	; 0x05
    23f0:	be 81       	ldd	r27, Y+6	; 0x06
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 b7 11 	call	0x236e	; 0x236e <LCD_displayNumber>
}
    23fa:	26 96       	adiw	r28, 0x06	; 6
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <LCD_clearScreen>:
/*
 * Description:
 * This function Clears display and returns cursor to the home position (address 0).
 */
void LCD_clearScreen(void)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <LCD_shiftLeftEntireDisplayByOnePosition>:
 * This function shift all 2 Lines by one position to left
 * You may lose data if you shift left to a location that exceed the dimension
 * of the LCD
 */
void LCD_shiftLeftEntireDisplayByOnePosition(void)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_LEFT_ENTIRE_DISPLAY);
    2428:	88 e1       	ldi	r24, 0x18	; 24
    242a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <LCD_shiftRightEntireDisplayByOnePosition>:
 * This function shift all 2 Lines by one position to right
 * You may lose data if you shift right to a location that exceed the dimension
 * of the LCD
 */
void LCD_shiftRightEntireDisplayByOnePosition(void)
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_RIGHT_ENTIRE_DISPLAY);
    243c:	8c e1       	ldi	r24, 0x1C	; 28
    243e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <LCD_displayOff>:
 * [it don't clear the DDRAM content] which mean if you call this function it
 * appear the LCD is cleared but when it you call function display On the content
 * of the old data will appear again.
 */
void LCD_displayOff(void)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_DISPLAY_OFF_CURSOR_OFF);
    2450:	88 e0       	ldi	r24, 0x08	; 8
    2452:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <LCD_displayOn>:
 * Description:
 * This function will turn on display and any character exists on the DDRAM of
 * the LCD will appear in the screen
 */
void LCD_displayOn(void)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING);
    2464:	8f e0       	ldi	r24, 0x0F	; 15
    2466:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <LCD_sendCommand>
}
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <TIMER0_init>:
 * Description :
 * This function Helps The TIMER_init function Where it is only responsible for
 * initializing Timer0 according to the Dynamic Configurations set by the user.
 */
static void TIMER0_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <TIMER0_init+0x6>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01

	/*	Let the Timer0 start Counting from the initial value that is given */
	TCNT0 = (uint8) a_configuration_Ptr->s_initialValue ;
    247e:	a2 e5       	ldi	r26, 0x52	; 82
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e9 81       	ldd	r30, Y+1	; 0x01
    2484:	fa 81       	ldd	r31, Y+2	; 0x02
    2486:	83 81       	ldd	r24, Z+3	; 0x03
    2488:	94 81       	ldd	r25, Z+4	; 0x04
    248a:	8c 93       	st	X, r24


	/*	If we are working at CTC mode only we should set Compare value as give */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    248c:	e9 81       	ldd	r30, Y+1	; 0x01
    248e:	fa 81       	ldd	r31, Y+2	; 0x02
    2490:	81 81       	ldd	r24, Z+1	; 0x01
    2492:	82 30       	cpi	r24, 0x02	; 2
    2494:	39 f4       	brne	.+14     	; 0x24a4 <TIMER0_init+0x34>
	{
		OCR0 = (uint8) a_configuration_Ptr->s_compareValue;
    2496:	ac e5       	ldi	r26, 0x5C	; 92
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	fa 81       	ldd	r31, Y+2	; 0x02
    249e:	85 81       	ldd	r24, Z+5	; 0x05
    24a0:	96 81       	ldd	r25, Z+6	; 0x06
    24a2:	8c 93       	st	X, r24


	/*	Enable The CTC mode Interrupt Or Normal Mode Interrupt accoridng to
	 *  Mode selected by the user
	 */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	81 81       	ldd	r24, Z+1	; 0x01
    24aa:	82 30       	cpi	r24, 0x02	; 2
    24ac:	41 f4       	brne	.+16     	; 0x24be <TIMER0_init+0x4e>
	{
		/*	Enable CTC mode interrupt from TIMSK register	*/
		TIMSK |= (1<<OCIE0);
    24ae:	a9 e5       	ldi	r26, 0x59	; 89
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e9 e5       	ldi	r30, 0x59	; 89
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	82 60       	ori	r24, 0x02	; 2
    24ba:	8c 93       	st	X, r24
    24bc:	0c c0       	rjmp	.+24     	; 0x24d6 <TIMER0_init+0x66>
	}
	else if(a_configuration_Ptr->s_timerMode  == NORMAL_MODE)
    24be:	e9 81       	ldd	r30, Y+1	; 0x01
    24c0:	fa 81       	ldd	r31, Y+2	; 0x02
    24c2:	81 81       	ldd	r24, Z+1	; 0x01
    24c4:	88 23       	and	r24, r24
    24c6:	39 f4       	brne	.+14     	; 0x24d6 <TIMER0_init+0x66>
	{
		/*	Enable Normal mode interrupt from TIMSK register	*/
		TIMSK |= (1<<TOIE0);
    24c8:	a9 e5       	ldi	r26, 0x59	; 89
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e9 e5       	ldi	r30, 0x59	; 89
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	81 60       	ori	r24, 0x01	; 1
    24d4:	8c 93       	st	X, r24
	 *  			   any of them in the configurations
	 *  CS0 2:0      : They are set according to the Prescaler chosen by the
	 *  			   used at the dynamic configurations.
	 */

	TCCR0 = (1<<FOC0) |  (a_configuration_Ptr->s_prescaler) \
    24d6:	a3 e5       	ldi	r26, 0x53	; 83
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e9 81       	ldd	r30, Y+1	; 0x01
    24dc:	fa 81       	ldd	r31, Y+2	; 0x02
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	80 68       	ori	r24, 0x80	; 128
    24e2:	28 2f       	mov	r18, r24
    24e4:	e9 81       	ldd	r30, Y+1	; 0x01
    24e6:	fa 81       	ldd	r31, Y+2	; 0x02
    24e8:	81 81       	ldd	r24, Z+1	; 0x01
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	81 70       	andi	r24, 0x01	; 1
    24f0:	90 70       	andi	r25, 0x00	; 0
    24f2:	00 24       	eor	r0, r0
    24f4:	96 95       	lsr	r25
    24f6:	87 95       	ror	r24
    24f8:	07 94       	ror	r0
    24fa:	96 95       	lsr	r25
    24fc:	87 95       	ror	r24
    24fe:	07 94       	ror	r0
    2500:	98 2f       	mov	r25, r24
    2502:	80 2d       	mov	r24, r0
    2504:	28 2b       	or	r18, r24
    2506:	e9 81       	ldd	r30, Y+1	; 0x01
    2508:	fa 81       	ldd	r31, Y+2	; 0x02
    250a:	81 81       	ldd	r24, Z+1	; 0x01
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	82 70       	andi	r24, 0x02	; 2
    2512:	90 70       	andi	r25, 0x00	; 0
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	82 2b       	or	r24, r18
    251e:	8c 93       	st	X, r24
					  |( (a_configuration_Ptr->s_timerMode & 0x01) << WGM00) \
					  |( (a_configuration_Ptr->s_timerMode & 0x02) <<(WGM01-1)) ;
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <TIMER1_init>:
 * Description :
 * This function Helps The TIMER_init function Where it is only responsible for
 * initializing Timer1 according to the Dynamic Configurations set by the user.
 */
static void TIMER1_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <TIMER1_init+0x6>
    2530:	0f 92       	push	r0
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9b 83       	std	Y+3, r25	; 0x03
    2538:	8a 83       	std	Y+2, r24	; 0x02

	uint8 L_sreg = SREG;
    253a:	ef e5       	ldi	r30, 0x5F	; 95
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	89 83       	std	Y+1, r24	; 0x01
	 * register, and the interrupt code updates the temporary register by accessing
	 * the same or any other of the 16-bit Timer Registers, then the result of
	 * the access outside the interrupt will be corrupted.
	 *  So we must do Atomic read/Write operations.
	 */
	SREG &= ~(1<<7); /*	Disable interrupts	*/
    2542:	af e5       	ldi	r26, 0x5F	; 95
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	ef e5       	ldi	r30, 0x5F	; 95
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8f 77       	andi	r24, 0x7F	; 127
    254e:	8c 93       	st	X, r24

	TCNT1 = a_configuration_Ptr->s_initialValue ;  /* Set initial value of timer */
    2550:	ac e4       	ldi	r26, 0x4C	; 76
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	ea 81       	ldd	r30, Y+2	; 0x02
    2556:	fb 81       	ldd	r31, Y+3	; 0x03
    2558:	83 81       	ldd	r24, Z+3	; 0x03
    255a:	94 81       	ldd	r25, Z+4	; 0x04
    255c:	11 96       	adiw	r26, 0x01	; 1
    255e:	9c 93       	st	X, r25
    2560:	8e 93       	st	-X, r24

	/*	If we are working at CTC mode only we should set Compare value as give */
	if(a_configuration_Ptr->s_timerMode  == T1_CTC_MODE)
    2562:	ea 81       	ldd	r30, Y+2	; 0x02
    2564:	fb 81       	ldd	r31, Y+3	; 0x03
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	84 30       	cpi	r24, 0x04	; 4
    256a:	51 f4       	brne	.+20     	; 0x2580 <TIMER1_init+0x56>
	{
		OCR1A = a_configuration_Ptr->s_compareValue;
    256c:	ea e4       	ldi	r30, 0x4A	; 74
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	aa 81       	ldd	r26, Y+2	; 0x02
    2572:	bb 81       	ldd	r27, Y+3	; 0x03
    2574:	15 96       	adiw	r26, 0x05	; 5
    2576:	8d 91       	ld	r24, X+
    2578:	9c 91       	ld	r25, X
    257a:	16 97       	sbiw	r26, 0x06	; 6
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
	}

	SREG = L_sreg; 	/*	Return to the default status control register values  */
    2580:	ef e5       	ldi	r30, 0x5F	; 95
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	80 83       	st	Z, r24

	/*	Enable The CTC mode Interrupt Or Normal Mode Interrupt accoridng to
	 *  Mode selected by the user
	 */
	if(a_configuration_Ptr->s_timerMode  == T1_CTC_MODE)
    2588:	ea 81       	ldd	r30, Y+2	; 0x02
    258a:	fb 81       	ldd	r31, Y+3	; 0x03
    258c:	81 81       	ldd	r24, Z+1	; 0x01
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	41 f4       	brne	.+16     	; 0x25a2 <TIMER1_init+0x78>
	{
		/*	Enable CTC mode interrupt from TIMSK register	*/
		TIMSK |= (1<<OCIE1A);
    2592:	a9 e5       	ldi	r26, 0x59	; 89
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e9 e5       	ldi	r30, 0x59	; 89
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 61       	ori	r24, 0x10	; 16
    259e:	8c 93       	st	X, r24
    25a0:	0c c0       	rjmp	.+24     	; 0x25ba <TIMER1_init+0x90>
	}
	else if(a_configuration_Ptr->s_timerMode  == NORMAL_MODE)
    25a2:	ea 81       	ldd	r30, Y+2	; 0x02
    25a4:	fb 81       	ldd	r31, Y+3	; 0x03
    25a6:	81 81       	ldd	r24, Z+1	; 0x01
    25a8:	88 23       	and	r24, r24
    25aa:	39 f4       	brne	.+14     	; 0x25ba <TIMER1_init+0x90>
	{
		/*	Enable Normal mode interrupt from TIMSK register	*/
		TIMSK |= (1<<TOIE1);
    25ac:	a9 e5       	ldi	r26, 0x59	; 89
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e9 e5       	ldi	r30, 0x59	; 89
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	84 60       	ori	r24, 0x04	; 4
    25b8:	8c 93       	st	X, r24
	 *  FOC1B = 1	  : NON PWM mode.
	 *  WGM1 1:0      : They are set according to the parameter Mode used, it
	 *  			    will set the mode to CTC or Normal if the user choose
	 *  			    any of them in the configurations
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) | (a_configuration_Ptr->s_timerMode & 0x03);
    25ba:	af e4       	ldi	r26, 0x4F	; 79
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	ea 81       	ldd	r30, Y+2	; 0x02
    25c0:	fb 81       	ldd	r31, Y+3	; 0x03
    25c2:	81 81       	ldd	r24, Z+1	; 0x01
    25c4:	83 70       	andi	r24, 0x03	; 3
    25c6:	8c 60       	ori	r24, 0x0C	; 12
    25c8:	8c 93       	st	X, r24
	 *  ICNC1 = 0  : Has not effect we are Disabling ICU
	 *  WGM1 3:2   : They are set according to the parameter Mode used, it
	 *  			 will set the mode to CTC or Normal if the user choose
	 *  			 any of them in the configurations
	 */
	TCCR1B  =       (a_configuration_Ptr->s_prescaler)  \
    25ca:	ae e4       	ldi	r26, 0x4E	; 78
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	ea 81       	ldd	r30, Y+2	; 0x02
    25d0:	fb 81       	ldd	r31, Y+3	; 0x03
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	ea 81       	ldd	r30, Y+2	; 0x02
    25d8:	fb 81       	ldd	r31, Y+3	; 0x03
    25da:	81 81       	ldd	r24, Z+1	; 0x01
    25dc:	88 2f       	mov	r24, r24
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	8c 70       	andi	r24, 0x0C	; 12
    25e2:	90 70       	andi	r25, 0x00	; 0
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	82 2b       	or	r24, r18
    25ea:	8c 93       	st	X, r24
			     | ((a_configuration_Ptr->s_timerMode & 0x0C) << 1);
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <TIMER2_init>:
 * Description :
 * This function Helps The TIMER_init function Where it is only responsible for
 * initializing Timer2 according to the Dynamic Configurations set by the user.
 */
static void TIMER2_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <TIMER2_init+0x6>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01

	/*	Let the Timer2 start Counting from the initial value that is given */
	TCNT2 = (uint8) a_configuration_Ptr->s_initialValue ;
    2606:	a4 e4       	ldi	r26, 0x44	; 68
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e9 81       	ldd	r30, Y+1	; 0x01
    260c:	fa 81       	ldd	r31, Y+2	; 0x02
    260e:	83 81       	ldd	r24, Z+3	; 0x03
    2610:	94 81       	ldd	r25, Z+4	; 0x04
    2612:	8c 93       	st	X, r24


	/*	If we are working at CTC mode only we should set Compare value as give */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    2614:	e9 81       	ldd	r30, Y+1	; 0x01
    2616:	fa 81       	ldd	r31, Y+2	; 0x02
    2618:	81 81       	ldd	r24, Z+1	; 0x01
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	39 f4       	brne	.+14     	; 0x262c <TIMER2_init+0x34>
	{
		OCR2 = (uint8) a_configuration_Ptr->s_compareValue;
    261e:	a3 e4       	ldi	r26, 0x43	; 67
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e9 81       	ldd	r30, Y+1	; 0x01
    2624:	fa 81       	ldd	r31, Y+2	; 0x02
    2626:	85 81       	ldd	r24, Z+5	; 0x05
    2628:	96 81       	ldd	r25, Z+6	; 0x06
    262a:	8c 93       	st	X, r24


	/*	Enable The CTC mode Interrupt Or Normal Mode Interrupt according to
	 *  Mode selected by the user
	 */
	if(a_configuration_Ptr->s_timerMode  == T0_T2_CTC_MODE)
    262c:	e9 81       	ldd	r30, Y+1	; 0x01
    262e:	fa 81       	ldd	r31, Y+2	; 0x02
    2630:	81 81       	ldd	r24, Z+1	; 0x01
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	41 f4       	brne	.+16     	; 0x2646 <TIMER2_init+0x4e>
	{
		/*	Enable CTC mode interrupt from TIMSK register	*/
		TIMSK |= (1<<OCIE2);
    2636:	a9 e5       	ldi	r26, 0x59	; 89
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e9 e5       	ldi	r30, 0x59	; 89
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 68       	ori	r24, 0x80	; 128
    2642:	8c 93       	st	X, r24
    2644:	0c c0       	rjmp	.+24     	; 0x265e <TIMER2_init+0x66>
	}
	else if(a_configuration_Ptr->s_timerMode  == NORMAL_MODE)
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	81 81       	ldd	r24, Z+1	; 0x01
    264c:	88 23       	and	r24, r24
    264e:	39 f4       	brne	.+14     	; 0x265e <TIMER2_init+0x66>
	{
		/*	Enable Normal mode interrupt from TIMSK register	*/
		TIMSK |= (1<<TOIE2);
    2650:	a9 e5       	ldi	r26, 0x59	; 89
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e9 e5       	ldi	r30, 0x59	; 89
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	80 64       	ori	r24, 0x40	; 64
    265c:	8c 93       	st	X, r24
	 *  			   any of them in the configurations
	 *  CS2 2:0      : They are set according to the Prescaler chosen by the
	 *  			   used at the dynamic configurations.
	 */

	TCCR2 = (1<<FOC2) |  (a_configuration_Ptr->s_prescaler) \
    265e:	a5 e4       	ldi	r26, 0x45	; 69
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e9 81       	ldd	r30, Y+1	; 0x01
    2664:	fa 81       	ldd	r31, Y+2	; 0x02
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	28 2f       	mov	r18, r24
    266c:	e9 81       	ldd	r30, Y+1	; 0x01
    266e:	fa 81       	ldd	r31, Y+2	; 0x02
    2670:	81 81       	ldd	r24, Z+1	; 0x01
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	00 24       	eor	r0, r0
    267c:	96 95       	lsr	r25
    267e:	87 95       	ror	r24
    2680:	07 94       	ror	r0
    2682:	96 95       	lsr	r25
    2684:	87 95       	ror	r24
    2686:	07 94       	ror	r0
    2688:	98 2f       	mov	r25, r24
    268a:	80 2d       	mov	r24, r0
    268c:	28 2b       	or	r18, r24
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	fa 81       	ldd	r31, Y+2	; 0x02
    2692:	81 81       	ldd	r24, Z+1	; 0x01
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	82 70       	andi	r24, 0x02	; 2
    269a:	90 70       	andi	r25, 0x00	; 0
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	82 2b       	or	r24, r18
    26a6:	8c 93       	st	X, r24
					  |( (a_configuration_Ptr->s_timerMode & 0x01) << WGM20) \
					  |( (a_configuration_Ptr->s_timerMode & 0x02) <<(WGM21-1)) ;


}
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <__vector_9>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer0 finishes counting at Normal mode
 */
ISR(TIMER0_OVF_vect)
{
    26b2:	1f 92       	push	r1
    26b4:	0f 92       	push	r0
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	0f 92       	push	r0
    26ba:	11 24       	eor	r1, r1
    26bc:	2f 93       	push	r18
    26be:	3f 93       	push	r19
    26c0:	4f 93       	push	r20
    26c2:	5f 93       	push	r21
    26c4:	6f 93       	push	r22
    26c6:	7f 93       	push	r23
    26c8:	8f 93       	push	r24
    26ca:	9f 93       	push	r25
    26cc:	af 93       	push	r26
    26ce:	bf 93       	push	r27
    26d0:	ef 93       	push	r30
    26d2:	ff 93       	push	r31
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer0_Ptr != NULL_PTR)
    26dc:	80 91 5f 01 	lds	r24, 0x015F
    26e0:	90 91 60 01 	lds	r25, 0x0160
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	29 f0       	breq	.+10     	; 0x26f2 <__vector_9+0x40>
	{
		(* g_callBackFunctionforTimer0_Ptr)();
    26e8:	e0 91 5f 01 	lds	r30, 0x015F
    26ec:	f0 91 60 01 	lds	r31, 0x0160
    26f0:	09 95       	icall
	}
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	ff 91       	pop	r31
    26f8:	ef 91       	pop	r30
    26fa:	bf 91       	pop	r27
    26fc:	af 91       	pop	r26
    26fe:	9f 91       	pop	r25
    2700:	8f 91       	pop	r24
    2702:	7f 91       	pop	r23
    2704:	6f 91       	pop	r22
    2706:	5f 91       	pop	r21
    2708:	4f 91       	pop	r20
    270a:	3f 91       	pop	r19
    270c:	2f 91       	pop	r18
    270e:	0f 90       	pop	r0
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	0f 90       	pop	r0
    2714:	1f 90       	pop	r1
    2716:	18 95       	reti

00002718 <__vector_19>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer0 finishes counting at CTC mode
 */
ISR(TIMER0_COMP_vect)
{
    2718:	1f 92       	push	r1
    271a:	0f 92       	push	r0
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	0f 92       	push	r0
    2720:	11 24       	eor	r1, r1
    2722:	2f 93       	push	r18
    2724:	3f 93       	push	r19
    2726:	4f 93       	push	r20
    2728:	5f 93       	push	r21
    272a:	6f 93       	push	r22
    272c:	7f 93       	push	r23
    272e:	8f 93       	push	r24
    2730:	9f 93       	push	r25
    2732:	af 93       	push	r26
    2734:	bf 93       	push	r27
    2736:	ef 93       	push	r30
    2738:	ff 93       	push	r31
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer0_Ptr != NULL_PTR)
    2742:	80 91 5f 01 	lds	r24, 0x015F
    2746:	90 91 60 01 	lds	r25, 0x0160
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	29 f0       	breq	.+10     	; 0x2758 <__vector_19+0x40>
	{
		(* g_callBackFunctionforTimer0_Ptr)();
    274e:	e0 91 5f 01 	lds	r30, 0x015F
    2752:	f0 91 60 01 	lds	r31, 0x0160
    2756:	09 95       	icall
	}
}
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	ff 91       	pop	r31
    275e:	ef 91       	pop	r30
    2760:	bf 91       	pop	r27
    2762:	af 91       	pop	r26
    2764:	9f 91       	pop	r25
    2766:	8f 91       	pop	r24
    2768:	7f 91       	pop	r23
    276a:	6f 91       	pop	r22
    276c:	5f 91       	pop	r21
    276e:	4f 91       	pop	r20
    2770:	3f 91       	pop	r19
    2772:	2f 91       	pop	r18
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <__vector_8>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer1 finishes counting at Normal mode
 */
ISR(TIMER1_OVF_vect)
{
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	11 24       	eor	r1, r1
    2788:	2f 93       	push	r18
    278a:	3f 93       	push	r19
    278c:	4f 93       	push	r20
    278e:	5f 93       	push	r21
    2790:	6f 93       	push	r22
    2792:	7f 93       	push	r23
    2794:	8f 93       	push	r24
    2796:	9f 93       	push	r25
    2798:	af 93       	push	r26
    279a:	bf 93       	push	r27
    279c:	ef 93       	push	r30
    279e:	ff 93       	push	r31
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer1_Ptr != NULL_PTR)
    27a8:	80 91 61 01 	lds	r24, 0x0161
    27ac:	90 91 62 01 	lds	r25, 0x0162
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	29 f0       	breq	.+10     	; 0x27be <__vector_8+0x40>
	{
		(* g_callBackFunctionforTimer1_Ptr)();
    27b4:	e0 91 61 01 	lds	r30, 0x0161
    27b8:	f0 91 62 01 	lds	r31, 0x0162
    27bc:	09 95       	icall
	}
}
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	ff 91       	pop	r31
    27c4:	ef 91       	pop	r30
    27c6:	bf 91       	pop	r27
    27c8:	af 91       	pop	r26
    27ca:	9f 91       	pop	r25
    27cc:	8f 91       	pop	r24
    27ce:	7f 91       	pop	r23
    27d0:	6f 91       	pop	r22
    27d2:	5f 91       	pop	r21
    27d4:	4f 91       	pop	r20
    27d6:	3f 91       	pop	r19
    27d8:	2f 91       	pop	r18
    27da:	0f 90       	pop	r0
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	0f 90       	pop	r0
    27e0:	1f 90       	pop	r1
    27e2:	18 95       	reti

000027e4 <__vector_6>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer1 finishes counting at CTC mode
 */
ISR(TIMER1_COMPA_vect)
{
    27e4:	1f 92       	push	r1
    27e6:	0f 92       	push	r0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	0f 92       	push	r0
    27ec:	11 24       	eor	r1, r1
    27ee:	2f 93       	push	r18
    27f0:	3f 93       	push	r19
    27f2:	4f 93       	push	r20
    27f4:	5f 93       	push	r21
    27f6:	6f 93       	push	r22
    27f8:	7f 93       	push	r23
    27fa:	8f 93       	push	r24
    27fc:	9f 93       	push	r25
    27fe:	af 93       	push	r26
    2800:	bf 93       	push	r27
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer1_Ptr != NULL_PTR)
    280e:	80 91 61 01 	lds	r24, 0x0161
    2812:	90 91 62 01 	lds	r25, 0x0162
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	29 f0       	breq	.+10     	; 0x2824 <__vector_6+0x40>
	{
		(* g_callBackFunctionforTimer1_Ptr)();
    281a:	e0 91 61 01 	lds	r30, 0x0161
    281e:	f0 91 62 01 	lds	r31, 0x0162
    2822:	09 95       	icall
	}
}
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	ff 91       	pop	r31
    282a:	ef 91       	pop	r30
    282c:	bf 91       	pop	r27
    282e:	af 91       	pop	r26
    2830:	9f 91       	pop	r25
    2832:	8f 91       	pop	r24
    2834:	7f 91       	pop	r23
    2836:	6f 91       	pop	r22
    2838:	5f 91       	pop	r21
    283a:	4f 91       	pop	r20
    283c:	3f 91       	pop	r19
    283e:	2f 91       	pop	r18
    2840:	0f 90       	pop	r0
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	0f 90       	pop	r0
    2846:	1f 90       	pop	r1
    2848:	18 95       	reti

0000284a <__vector_4>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer2 finishes counting at Normal mode
 */
ISR(TIMER2_OVF_vect)
{
    284a:	1f 92       	push	r1
    284c:	0f 92       	push	r0
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	0f 92       	push	r0
    2852:	11 24       	eor	r1, r1
    2854:	2f 93       	push	r18
    2856:	3f 93       	push	r19
    2858:	4f 93       	push	r20
    285a:	5f 93       	push	r21
    285c:	6f 93       	push	r22
    285e:	7f 93       	push	r23
    2860:	8f 93       	push	r24
    2862:	9f 93       	push	r25
    2864:	af 93       	push	r26
    2866:	bf 93       	push	r27
    2868:	ef 93       	push	r30
    286a:	ff 93       	push	r31
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer2_Ptr != NULL_PTR)
    2874:	80 91 63 01 	lds	r24, 0x0163
    2878:	90 91 64 01 	lds	r25, 0x0164
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	29 f0       	breq	.+10     	; 0x288a <__vector_4+0x40>
	{
		(* g_callBackFunctionforTimer2_Ptr)();
    2880:	e0 91 63 01 	lds	r30, 0x0163
    2884:	f0 91 64 01 	lds	r31, 0x0164
    2888:	09 95       	icall
	}
}
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	ff 91       	pop	r31
    2890:	ef 91       	pop	r30
    2892:	bf 91       	pop	r27
    2894:	af 91       	pop	r26
    2896:	9f 91       	pop	r25
    2898:	8f 91       	pop	r24
    289a:	7f 91       	pop	r23
    289c:	6f 91       	pop	r22
    289e:	5f 91       	pop	r21
    28a0:	4f 91       	pop	r20
    28a2:	3f 91       	pop	r19
    28a4:	2f 91       	pop	r18
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	0f 90       	pop	r0
    28ac:	1f 90       	pop	r1
    28ae:	18 95       	reti

000028b0 <__vector_3>:
 * Description :
 * This function will call the call back function which the user provides form the
 * application. This ISR will be called when Timer2 finishes counting at CTC mode
 */
ISR(TIMER2_COMP_vect)
{
    28b0:	1f 92       	push	r1
    28b2:	0f 92       	push	r0
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	0f 92       	push	r0
    28b8:	11 24       	eor	r1, r1
    28ba:	2f 93       	push	r18
    28bc:	3f 93       	push	r19
    28be:	4f 93       	push	r20
    28c0:	5f 93       	push	r21
    28c2:	6f 93       	push	r22
    28c4:	7f 93       	push	r23
    28c6:	8f 93       	push	r24
    28c8:	9f 93       	push	r25
    28ca:	af 93       	push	r26
    28cc:	bf 93       	push	r27
    28ce:	ef 93       	push	r30
    28d0:	ff 93       	push	r31
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunctionforTimer2_Ptr != NULL_PTR)
    28da:	80 91 63 01 	lds	r24, 0x0163
    28de:	90 91 64 01 	lds	r25, 0x0164
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	29 f0       	breq	.+10     	; 0x28f0 <__vector_3+0x40>
	{
		(* g_callBackFunctionforTimer2_Ptr)();
    28e6:	e0 91 63 01 	lds	r30, 0x0163
    28ea:	f0 91 64 01 	lds	r31, 0x0164
    28ee:	09 95       	icall
	}
}
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	ff 91       	pop	r31
    28f6:	ef 91       	pop	r30
    28f8:	bf 91       	pop	r27
    28fa:	af 91       	pop	r26
    28fc:	9f 91       	pop	r25
    28fe:	8f 91       	pop	r24
    2900:	7f 91       	pop	r23
    2902:	6f 91       	pop	r22
    2904:	5f 91       	pop	r21
    2906:	4f 91       	pop	r20
    2908:	3f 91       	pop	r19
    290a:	2f 91       	pop	r18
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	0f 90       	pop	r0
    2912:	1f 90       	pop	r1
    2914:	18 95       	reti

00002916 <TIMER_init>:
 * 	2. Set the Operating Mode
 * 	3. Put initial value to start counting
 * 	4. Put a compare value in case of using CTC Mode
 */
void TIMER_init(const DynamicConfiguration_TIMER * a_configuration_Ptr)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	00 d0       	rcall	.+0      	; 0x291c <TIMER_init+0x6>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
	if( a_configuration_Ptr->s_timerID == TIMER0)
    2924:	e9 81       	ldd	r30, Y+1	; 0x01
    2926:	fa 81       	ldd	r31, Y+2	; 0x02
    2928:	80 81       	ld	r24, Z
    292a:	88 23       	and	r24, r24
    292c:	29 f4       	brne	.+10     	; 0x2938 <TIMER_init+0x22>
	{
		/*	Initializing Timer 0 according to the Dynamic configurations   */
		TIMER0_init(a_configuration_Ptr);
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	0e 94 38 12 	call	0x2470	; 0x2470 <TIMER0_init>
    2936:	13 c0       	rjmp	.+38     	; 0x295e <TIMER_init+0x48>
	}
	else if( a_configuration_Ptr->s_timerID == TIMER1)
    2938:	e9 81       	ldd	r30, Y+1	; 0x01
    293a:	fa 81       	ldd	r31, Y+2	; 0x02
    293c:	80 81       	ld	r24, Z
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	29 f4       	brne	.+10     	; 0x294c <TIMER_init+0x36>
	{
		/*	Initializing Timer 1 according to the Dynamic configurations   */
		TIMER1_init(a_configuration_Ptr);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	0e 94 95 12 	call	0x252a	; 0x252a <TIMER1_init>
    294a:	09 c0       	rjmp	.+18     	; 0x295e <TIMER_init+0x48>
	}
	else if( a_configuration_Ptr->s_timerID == TIMER2)
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	80 81       	ld	r24, Z
    2952:	82 30       	cpi	r24, 0x02	; 2
    2954:	21 f4       	brne	.+8      	; 0x295e <TIMER_init+0x48>
	{
		/*	Initializing Timer 2 according to the Dynamic configurations   */
		TIMER2_init(a_configuration_Ptr);
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <TIMER2_init>
	}
}
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <TIMER_setCallBackFunction>:
 * Timer finishes counting.
 * It save the argument address of the function in a Global one so that it can be
 * called from the ISR.
 */
void TIMER_setCallBackFunction(TimerSelect a_timerID ,void (* a_callBackfunction_Ptr)(void))
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	00 d0       	rcall	.+0      	; 0x296e <TIMER_setCallBackFunction+0x6>
    296e:	0f 92       	push	r0
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	7b 83       	std	Y+3, r23	; 0x03
    2978:	6a 83       	std	Y+2, r22	; 0x02
	if( a_timerID == TIMER0)
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	88 23       	and	r24, r24
    297e:	39 f4       	brne	.+14     	; 0x298e <TIMER_setCallBackFunction+0x26>
	{
		/* Save the address of the Call back function in a global variable of Timer0 */
		g_callBackFunctionforTimer0_Ptr = a_callBackfunction_Ptr;
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	9b 81       	ldd	r25, Y+3	; 0x03
    2984:	90 93 60 01 	sts	0x0160, r25
    2988:	80 93 5f 01 	sts	0x015F, r24
    298c:	13 c0       	rjmp	.+38     	; 0x29b4 <TIMER_setCallBackFunction+0x4c>
	}
	else if( a_timerID == TIMER1)
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	81 30       	cpi	r24, 0x01	; 1
    2992:	39 f4       	brne	.+14     	; 0x29a2 <TIMER_setCallBackFunction+0x3a>
	{
		/* Save the address of the Call back function in a global variable of Timer1 */
		g_callBackFunctionforTimer1_Ptr = a_callBackfunction_Ptr;
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	9b 81       	ldd	r25, Y+3	; 0x03
    2998:	90 93 62 01 	sts	0x0162, r25
    299c:	80 93 61 01 	sts	0x0161, r24
    29a0:	09 c0       	rjmp	.+18     	; 0x29b4 <TIMER_setCallBackFunction+0x4c>

	}
	else if( a_timerID == TIMER2)
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	31 f4       	brne	.+12     	; 0x29b4 <TIMER_setCallBackFunction+0x4c>
	{
		/* Save the address of the Call back function in a global variable of Timer2 */
		g_callBackFunctionforTimer2_Ptr = a_callBackfunction_Ptr;
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	90 93 64 01 	sts	0x0164, r25
    29b0:	80 93 63 01 	sts	0x0163, r24
	}
}
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <TIMER_deInit>:
/*
 * Description:
 * This function will Turn off the Timer which is selected by the user as an input.
 */
void TIMER_deInit(TimerSelect a_timerID)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <TIMER_deInit+0x6>
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	8a 83       	std	Y+2, r24	; 0x02
	if( a_timerID == TIMER0)
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	88 23       	and	r24, r24
    29d0:	c1 f4       	brne	.+48     	; 0x2a02 <TIMER_deInit+0x42>
	{
		/*	Turn Off Timer0 clock */
		TCCR0 = 0;
    29d2:	e3 e5       	ldi	r30, 0x53	; 83
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	10 82       	st	Z, r1
		/*	Resting the values of initial value and compare value  */
		TCNT0 = 0;
    29d8:	e2 e5       	ldi	r30, 0x52	; 82
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	10 82       	st	Z, r1
		OCR0  = 0;
    29de:	ec e5       	ldi	r30, 0x5C	; 92
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	10 82       	st	Z, r1
		/*	Disabling the Interrupts of CTC , Normal mode in Timer0  */
		TIMSK &= ~(1<<OCIE0);
    29e4:	a9 e5       	ldi	r26, 0x59	; 89
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e9 e5       	ldi	r30, 0x59	; 89
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8d 7f       	andi	r24, 0xFD	; 253
    29f0:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE0);
    29f2:	a9 e5       	ldi	r26, 0x59	; 89
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e9 e5       	ldi	r30, 0x59	; 89
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8e 7f       	andi	r24, 0xFE	; 254
    29fe:	8c 93       	st	X, r24
    2a00:	49 c0       	rjmp	.+146    	; 0x2a94 <TIMER_deInit+0xd4>
	}
	else if( a_timerID == TIMER1)
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	61 f5       	brne	.+88     	; 0x2a60 <TIMER_deInit+0xa0>
	{
		uint8 L_sreg = SREG;
    2a08:	ef e5       	ldi	r30, 0x5F	; 95
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	89 83       	std	Y+1, r24	; 0x01

		/* Turn Timer 1 OFF	*/
		TCCR1A = 0 ;
    2a10:	ef e4       	ldi	r30, 0x4F	; 79
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	10 82       	st	Z, r1
		TCCR1B = 0;
    2a16:	ee e4       	ldi	r30, 0x4E	; 78
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	10 82       	st	Z, r1
		* register, and the interrupt code updates the temporary register by accessing
		* the same or any other of the 16-bit Timer Registers, then the result of
		* the access outside the interrupt will be corrupted.
		*  So we must do Atomic read/Write operations.
		*/
		SREG &= ~(1<<7); /*	Disable interrupts	*/
    2a1c:	af e5       	ldi	r26, 0x5F	; 95
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	ef e5       	ldi	r30, 0x5F	; 95
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8f 77       	andi	r24, 0x7F	; 127
    2a28:	8c 93       	st	X, r24

		TCNT1 = 0 ;		/*	Clear the initial value register	*/
    2a2a:	ec e4       	ldi	r30, 0x4C	; 76
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	11 82       	std	Z+1, r1	; 0x01
    2a30:	10 82       	st	Z, r1
		OCR1A = 0 ;		/*	Clear the Compare value register	*/
    2a32:	ea e4       	ldi	r30, 0x4A	; 74
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	11 82       	std	Z+1, r1	; 0x01
    2a38:	10 82       	st	Z, r1
		SREG = L_sreg; 	/*	Return to the default status control register values  */
    2a3a:	ef e5       	ldi	r30, 0x5F	; 95
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	80 83       	st	Z, r24

		/*	Disabling the Interrupts of CTC , Normal mode in Timer1  */
		TIMSK &= ~(1<<OCIE1A);
    2a42:	a9 e5       	ldi	r26, 0x59	; 89
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e9 e5       	ldi	r30, 0x59	; 89
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8f 7e       	andi	r24, 0xEF	; 239
    2a4e:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE1);
    2a50:	a9 e5       	ldi	r26, 0x59	; 89
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e9 e5       	ldi	r30, 0x59	; 89
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8b 7f       	andi	r24, 0xFB	; 251
    2a5c:	8c 93       	st	X, r24
    2a5e:	1a c0       	rjmp	.+52     	; 0x2a94 <TIMER_deInit+0xd4>

	}
	else if( a_timerID == TIMER2)
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	82 30       	cpi	r24, 0x02	; 2
    2a64:	b9 f4       	brne	.+46     	; 0x2a94 <TIMER_deInit+0xd4>
	{
		/*	Turn Off Timer2 clock */
		TCCR2 = 0;
    2a66:	e5 e4       	ldi	r30, 0x45	; 69
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	10 82       	st	Z, r1
		/*	Resting the values of initial value and compare value  */
		TCNT2 = 0;
    2a6c:	e4 e4       	ldi	r30, 0x44	; 68
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	10 82       	st	Z, r1
		OCR2  = 0;
    2a72:	e3 e4       	ldi	r30, 0x43	; 67
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	10 82       	st	Z, r1
		/*	Disabling the Interrupts of CTC , Normal mode in Timer2  */
		TIMSK &= ~(1<<OCIE2);
    2a78:	a9 e5       	ldi	r26, 0x59	; 89
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e9 e5       	ldi	r30, 0x59	; 89
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 77       	andi	r24, 0x7F	; 127
    2a84:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE2);
    2a86:	a9 e5       	ldi	r26, 0x59	; 89
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e9 e5       	ldi	r30, 0x59	; 89
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	8f 7b       	andi	r24, 0xBF	; 191
    2a92:	8c 93       	st	X, r24

	}
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <UART_init>:
 * This function initialize the UART Module Dynamically according to the user
 * configuration : Number of stop bit, Number of data bit ,Parity status
 * and the baud rate.
 */
void UART_init(const DynamicConfiguration_UART *a_configuration_Ptr)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <UART_init+0x6>
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <UART_init+0x8>
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	9c 83       	std	Y+4, r25	; 0x04
    2aac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 L_ubrrValue = 0;
    2aae:	1a 82       	std	Y+2, r1	; 0x02
    2ab0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Always work in Double speed mode to decrease the change that UBRR register
	 * will have a negative value which we don't want to happen.
	 */
	UCSRA |= (1<< U2X);
    2ab2:	ab e2       	ldi	r26, 0x2B	; 43
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	eb e2       	ldi	r30, 0x2B	; 43
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	82 60       	ori	r24, 0x02	; 2
    2abe:	8c 93       	st	X, r24
	 * UCSZ2 = Bit2 from the structure variable  s_noOfDataBit [Decided Dynamically]
	 * RXB8 & TXB8 = 0  : It doesn't matter if we put them in zero because if
	 * 					  you use 9 bit mode this data will be set or read in
	 * 					  another function after calling the initialization function
 	 */
	UCSRB = (1<<RXEN) | (1<<TXEN) |  (a_configuration_Ptr->s_numOfDataBit  & 0x04);
    2ac0:	aa e2       	ldi	r26, 0x2A	; 42
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac8:	81 81       	ldd	r24, Z+1	; 0x01
    2aca:	84 70       	andi	r24, 0x04	; 4
    2acc:	88 61       	ori	r24, 0x18	; 24
    2ace:	8c 93       	st	X, r24
	* UCSZ1:0 = Bit1:0 from the structure variable  s_noOfDataBit [Decided Dynamically]
	* UCPOL   = 0 We don't care about it as we work with Asynchronous mode
	* 			not Synchronous
	*/

	UCSRC = (1<<URSEL) | ( ( a_configuration_Ptr->s_numOfStopBit  &0x01)   << USBS ) \
    2ad0:	a0 e4       	ldi	r26, 0x40	; 64
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	81 70       	andi	r24, 0x01	; 1
    2ae0:	90 70       	andi	r25, 0x00	; 0
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	28 2f       	mov	r18, r24
    2af0:	20 68       	ori	r18, 0x80	; 128
    2af2:	eb 81       	ldd	r30, Y+3	; 0x03
    2af4:	fc 81       	ldd	r31, Y+4	; 0x04
    2af6:	81 81       	ldd	r24, Z+1	; 0x01
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	83 70       	andi	r24, 0x03	; 3
    2afe:	90 70       	andi	r25, 0x00	; 0
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	28 2b       	or	r18, r24
    2b06:	eb 81       	ldd	r30, Y+3	; 0x03
    2b08:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	83 70       	andi	r24, 0x03	; 3
    2b12:	90 70       	andi	r25, 0x00	; 0
    2b14:	82 95       	swap	r24
    2b16:	92 95       	swap	r25
    2b18:	90 7f       	andi	r25, 0xF0	; 240
    2b1a:	98 27       	eor	r25, r24
    2b1c:	80 7f       	andi	r24, 0xF0	; 240
    2b1e:	98 27       	eor	r25, r24
    2b20:	82 2b       	or	r24, r18
    2b22:	8c 93       	st	X, r24
	 *  ( F_CPU / (a_configuration_Ptr->s_baudRate * 8) ) >= 1
	 *
	 * If a negative value is the result Overflow will happen and the data stored
	 * in UBRR will be rubbish to take care of baud rate calculations
	 */
	L_ubrrValue = (uint16)( ( F_CPU / (a_configuration_Ptr->s_baudRate * 8) ) - 1 );
    2b24:	eb 81       	ldd	r30, Y+3	; 0x03
    2b26:	fc 81       	ldd	r31, Y+4	; 0x04
    2b28:	83 81       	ldd	r24, Z+3	; 0x03
    2b2a:	94 81       	ldd	r25, Z+4	; 0x04
    2b2c:	a5 81       	ldd	r26, Z+5	; 0x05
    2b2e:	b6 81       	ldd	r27, Z+6	; 0x06
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	aa 1f       	adc	r26, r26
    2b36:	bb 1f       	adc	r27, r27
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	aa 1f       	adc	r26, r26
    2b3e:	bb 1f       	adc	r27, r27
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	aa 1f       	adc	r26, r26
    2b46:	bb 1f       	adc	r27, r27
    2b48:	9c 01       	movw	r18, r24
    2b4a:	ad 01       	movw	r20, r26
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	92 e1       	ldi	r25, 0x12	; 18
    2b50:	aa e7       	ldi	r26, 0x7A	; 122
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__udivmodsi4>
    2b5c:	da 01       	movw	r26, r20
    2b5e:	c9 01       	movw	r24, r18
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01

	/* Set the the last 4 bits in L_ubrrValue in UBRRH and URSEL = 0 to write
	 * in UBRRH register not USCRC register;
	 */
	UBRRH = L_ubrrValue >> 8 ;
    2b66:	e0 e4       	ldi	r30, 0x40	; 64
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	89 2f       	mov	r24, r25
    2b70:	99 27       	eor	r25, r25
    2b72:	80 83       	st	Z, r24

	/* Set the the first 8 bits in L_ubrrValue in UBRRH	*/
	UBRRL = (uint8)L_ubrrValue;
    2b74:	e9 e2       	ldi	r30, 0x29	; 41
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	80 83       	st	Z, r24
}
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <UART_sendData>:
 * Description :
 * This function will send the data -according to the number of data bit used-
 * serially to another UART device.
 */
void UART_sendData(uint8 a_data)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	0f 92       	push	r0
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	89 83       	std	Y+1, r24	; 0x01

	/* Polling until UDRE flag is Set where the UDR will be empty and ready to take
	 * new data to transmit it
	 */
	while( BIT_IS_CLEAR(UCSRA,UDRE) );
    2b96:	eb e2       	ldi	r30, 0x2B	; 43
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	80 72       	andi	r24, 0x20	; 32
    2ba2:	90 70       	andi	r25, 0x00	; 0
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	b9 f3       	breq	.-18     	; 0x2b96 <UART_sendData+0xc>

	/*
	 * In case of 9 bit mode we put the 9th bit in UCSRB register to be transmitted
	 * if any mode other than 9 mode is chosen the 9th bit will be ignored.
	 */
	UCSRB = (UCSRB & 0xFE) | ( (a_data & 0x0100) >>8 );
    2ba8:	aa e2       	ldi	r26, 0x2A	; 42
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	ea e2       	ldi	r30, 0x2A	; 42
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8e 7f       	andi	r24, 0xFE	; 254
    2bb4:	8c 93       	st	X, r24

	/* Send the 8 bit of the argument and according to the mode the needed bits
	 * will be taken and other will be ignored
	 */
	UDR = a_data;
    2bb6:	ec e2       	ldi	r30, 0x2C	; 44
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	80 83       	st	Z, r24
}
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <UART_receiveData>:
 * Description :
 * This function will Receive the data -according to the number of data bit used-
 * From another UART device.
 */
uint16 UART_receiveData(void)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <UART_receiveData+0x6>
    2bcc:	0f 92       	push	r0
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
	uint8 L_numOfDataBit=0;
    2bd2:	19 82       	std	Y+1, r1	; 0x01

	/* Loop until RXC will be set to 1 when the byte Which indicates
	 * that the incoming data has been received
	 */
	while( BIT_IS_CLEAR(UCSRA ,RXC )) ;
    2bd4:	eb e2       	ldi	r30, 0x2B	; 43
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	88 23       	and	r24, r24
    2bdc:	dc f7       	brge	.-10     	; 0x2bd4 <UART_receiveData+0xe>

	/*	Get the Configuration which tells me what is the number of data bit used  */
	L_numOfDataBit = (UCSRB & 0x04) | ( (UCSRC & 0x06) >> UCSZ0 ) ;
    2bde:	ea e2       	ldi	r30, 0x2A	; 42
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	28 2f       	mov	r18, r24
    2be6:	24 70       	andi	r18, 0x04	; 4
    2be8:	e0 e4       	ldi	r30, 0x40	; 64
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	86 70       	andi	r24, 0x06	; 6
    2bf4:	90 70       	andi	r25, 0x00	; 0
    2bf6:	95 95       	asr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	82 2b       	or	r24, r18
    2bfc:	89 83       	std	Y+1, r24	; 0x01


	if(L_numOfDataBit == _9_DATA_BIT )
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	87 30       	cpi	r24, 0x07	; 7
    2c02:	b1 f4       	brne	.+44     	; 0x2c30 <UART_receiveData+0x6a>
	{
		/*If the number of data send is 9 bit so return the 8 bit in UDR and teh
		 * 9th bit in RXB8 in UCSRB register
		 */
		return ( UDR | ((UCSRB & 0x02) << 7) ) ;
    2c04:	ec e2       	ldi	r30, 0x2C	; 44
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	ea e2       	ldi	r30, 0x2A	; 42
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	82 70       	andi	r24, 0x02	; 2
    2c1a:	90 70       	andi	r25, 0x00	; 0
    2c1c:	96 95       	lsr	r25
    2c1e:	98 2f       	mov	r25, r24
    2c20:	88 27       	eor	r24, r24
    2c22:	97 95       	ror	r25
    2c24:	87 95       	ror	r24
    2c26:	82 2b       	or	r24, r18
    2c28:	93 2b       	or	r25, r19
    2c2a:	9b 83       	std	Y+3, r25	; 0x03
    2c2c:	8a 83       	std	Y+2, r24	; 0x02
    2c2e:	07 c0       	rjmp	.+14     	; 0x2c3e <UART_receiveData+0x78>
	else
	{
		/*	If the number of data send is anything other than 9 bit mode return
		 *	the bits received in UDR register
		 */
		return UDR;
    2c30:	ec e2       	ldi	r30, 0x2C	; 44
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	3b 83       	std	Y+3, r19	; 0x03
    2c3c:	2a 83       	std	Y+2, r18	; 0x02
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <UART_sendString>:
 * We will choose a symbol[ # ] that is known to both devices the Transmitter will
 * send all the strings ended with specific symbol[#] and the Receiver will receive the
 * string and loop until he found the symbol[#] , when he finds it will stop reading.
 */
void UART_sendString(const uint8 *a_str)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <UART_sendString+0x6>
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	9b 83       	std	Y+3, r25	; 0x03
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
	/*	Counter to loop upon the coming String */
	uint8 i = 0 ;
    2c5e:	19 82       	std	Y+1, r1	; 0x01
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <UART_sendString+0x30>
	 * it found -String has ended- break out of the loop
	 */
	while( a_str[i] != '\0')
	{
		/*	Send the whole string character by character  */
		UART_sendData(a_str[i]);
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	80 81       	ld	r24, Z
    2c74:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_sendData>
		i++;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	8f 5f       	subi	r24, 0xFF	; 255
    2c7c:	89 83       	std	Y+1, r24	; 0x01

	/* By using the counter the loop with iterate the string characters
	 * and each time we will compare each character with the null character if
	 * it found -String has ended- break out of the loop
	 */
	while( a_str[i] != '\0')
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	fc 01       	movw	r30, r24
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 23       	and	r24, r24
    2c92:	39 f7       	brne	.-50     	; 0x2c62 <UART_sendString+0x14>
	}

	/* Always Send the symbol that we agree on as the last character so that in
	 * receive function we will stop taking input when the this symbol is detected
	 */
	UART_sendData('#');
    2c94:	83 e2       	ldi	r24, 0x23	; 35
    2c96:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_sendData>
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <UART_receiveString>:
 * We will choose a symbol[ # ] that is known to both devices the Transmitter will
 * send all the strings ended with specific symbol[#] and the Receiver will receive the
 * string and loop until he found the symbol[#] , when he finds it will stop reading.
 */
void UART_receiveString(uint8 *a_str)
{
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <UART_receiveString+0xa>
    2cb0:	0f 92       	push	r0
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	9b 83       	std	Y+3, r25	; 0x03
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
	/*	Counter to loop upon the coming String */
	uint8 i = 0 ;
    2cba:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte only so that we can have a value to be compared
	 * with the symbol
	 */
	a_str[i] = UART_receiveData();
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	8c 01       	movw	r16, r24
    2cc8:	02 0f       	add	r16, r18
    2cca:	13 1f       	adc	r17, r19
    2ccc:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	80 83       	st	Z, r24
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <UART_receiveString+0x4e>

	/* Receive the whole string until the symbol '#' is found	*/
	while( a_str[i] != '#')
	{
		i++;
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	8f 5f       	subi	r24, 0xFF	; 255
    2cda:	89 83       	std	Y+1, r24	; 0x01
		a_str[i] = UART_receiveData();
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce6:	8c 01       	movw	r16, r24
    2ce8:	02 0f       	add	r16, r18
    2cea:	13 1f       	adc	r17, r19
    2cec:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_receiveData>
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
	 * with the symbol
	 */
	a_str[i] = UART_receiveData();

	/* Receive the whole string until the symbol '#' is found	*/
	while( a_str[i] != '#')
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e2 0f       	add	r30, r18
    2d02:	f3 1f       	adc	r31, r19
    2d04:	80 81       	ld	r24, Z
    2d06:	83 32       	cpi	r24, 0x23	; 35
    2d08:	31 f7       	brne	.-52     	; 0x2cd6 <UART_receiveString+0x30>
		i++;
		a_str[i] = UART_receiveData();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	a_str[i] = '\0' ;
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	fc 01       	movw	r30, r24
    2d16:	e2 0f       	add	r30, r18
    2d18:	f3 1f       	adc	r31, r19
    2d1a:	10 82       	st	Z, r1

}
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	1f 91       	pop	r17
    2d28:	0f 91       	pop	r16
    2d2a:	08 95       	ret

00002d2c <__udivmodsi4>:
    2d2c:	a1 e2       	ldi	r26, 0x21	; 33
    2d2e:	1a 2e       	mov	r1, r26
    2d30:	aa 1b       	sub	r26, r26
    2d32:	bb 1b       	sub	r27, r27
    2d34:	fd 01       	movw	r30, r26
    2d36:	0d c0       	rjmp	.+26     	; 0x2d52 <__udivmodsi4_ep>

00002d38 <__udivmodsi4_loop>:
    2d38:	aa 1f       	adc	r26, r26
    2d3a:	bb 1f       	adc	r27, r27
    2d3c:	ee 1f       	adc	r30, r30
    2d3e:	ff 1f       	adc	r31, r31
    2d40:	a2 17       	cp	r26, r18
    2d42:	b3 07       	cpc	r27, r19
    2d44:	e4 07       	cpc	r30, r20
    2d46:	f5 07       	cpc	r31, r21
    2d48:	20 f0       	brcs	.+8      	; 0x2d52 <__udivmodsi4_ep>
    2d4a:	a2 1b       	sub	r26, r18
    2d4c:	b3 0b       	sbc	r27, r19
    2d4e:	e4 0b       	sbc	r30, r20
    2d50:	f5 0b       	sbc	r31, r21

00002d52 <__udivmodsi4_ep>:
    2d52:	66 1f       	adc	r22, r22
    2d54:	77 1f       	adc	r23, r23
    2d56:	88 1f       	adc	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	1a 94       	dec	r1
    2d5c:	69 f7       	brne	.-38     	; 0x2d38 <__udivmodsi4_loop>
    2d5e:	60 95       	com	r22
    2d60:	70 95       	com	r23
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	9b 01       	movw	r18, r22
    2d68:	ac 01       	movw	r20, r24
    2d6a:	bd 01       	movw	r22, r26
    2d6c:	cf 01       	movw	r24, r30
    2d6e:	08 95       	ret

00002d70 <__prologue_saves__>:
    2d70:	2f 92       	push	r2
    2d72:	3f 92       	push	r3
    2d74:	4f 92       	push	r4
    2d76:	5f 92       	push	r5
    2d78:	6f 92       	push	r6
    2d7a:	7f 92       	push	r7
    2d7c:	8f 92       	push	r8
    2d7e:	9f 92       	push	r9
    2d80:	af 92       	push	r10
    2d82:	bf 92       	push	r11
    2d84:	cf 92       	push	r12
    2d86:	df 92       	push	r13
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	ca 1b       	sub	r28, r26
    2d9a:	db 0b       	sbc	r29, r27
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	09 94       	ijmp

00002da8 <__epilogue_restores__>:
    2da8:	2a 88       	ldd	r2, Y+18	; 0x12
    2daa:	39 88       	ldd	r3, Y+17	; 0x11
    2dac:	48 88       	ldd	r4, Y+16	; 0x10
    2dae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2db0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2db8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dba:	b9 84       	ldd	r11, Y+9	; 0x09
    2dbc:	c8 84       	ldd	r12, Y+8	; 0x08
    2dbe:	df 80       	ldd	r13, Y+7	; 0x07
    2dc0:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc2:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc4:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc6:	1b 81       	ldd	r17, Y+3	; 0x03
    2dc8:	aa 81       	ldd	r26, Y+2	; 0x02
    2dca:	b9 81       	ldd	r27, Y+1	; 0x01
    2dcc:	ce 0f       	add	r28, r30
    2dce:	d1 1d       	adc	r29, r1
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	ed 01       	movw	r28, r26
    2ddc:	08 95       	ret

00002dde <itoa>:
    2dde:	fb 01       	movw	r30, r22
    2de0:	9f 01       	movw	r18, r30
    2de2:	e8 94       	clt
    2de4:	42 30       	cpi	r20, 0x02	; 2
    2de6:	c4 f0       	brlt	.+48     	; 0x2e18 <itoa+0x3a>
    2de8:	45 32       	cpi	r20, 0x25	; 37
    2dea:	b4 f4       	brge	.+44     	; 0x2e18 <itoa+0x3a>
    2dec:	4a 30       	cpi	r20, 0x0A	; 10
    2dee:	29 f4       	brne	.+10     	; 0x2dfa <itoa+0x1c>
    2df0:	97 fb       	bst	r25, 7
    2df2:	1e f4       	brtc	.+6      	; 0x2dfa <itoa+0x1c>
    2df4:	90 95       	com	r25
    2df6:	81 95       	neg	r24
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	64 2f       	mov	r22, r20
    2dfc:	77 27       	eor	r23, r23
    2dfe:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__udivmodhi4>
    2e02:	80 5d       	subi	r24, 0xD0	; 208
    2e04:	8a 33       	cpi	r24, 0x3A	; 58
    2e06:	0c f0       	brlt	.+2      	; 0x2e0a <itoa+0x2c>
    2e08:	89 5d       	subi	r24, 0xD9	; 217
    2e0a:	81 93       	st	Z+, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	a1 f7       	brne	.-24     	; 0x2dfa <itoa+0x1c>
    2e12:	16 f4       	brtc	.+4      	; 0x2e18 <itoa+0x3a>
    2e14:	5d e2       	ldi	r21, 0x2D	; 45
    2e16:	51 93       	st	Z+, r21
    2e18:	10 82       	st	Z, r1
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <strrev>

00002e20 <strrev>:
    2e20:	dc 01       	movw	r26, r24
    2e22:	fc 01       	movw	r30, r24
    2e24:	67 2f       	mov	r22, r23
    2e26:	71 91       	ld	r23, Z+
    2e28:	77 23       	and	r23, r23
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <strrev+0x4>
    2e2c:	32 97       	sbiw	r30, 0x02	; 2
    2e2e:	04 c0       	rjmp	.+8      	; 0x2e38 <strrev+0x18>
    2e30:	7c 91       	ld	r23, X
    2e32:	6d 93       	st	X+, r22
    2e34:	70 83       	st	Z, r23
    2e36:	62 91       	ld	r22, -Z
    2e38:	ae 17       	cp	r26, r30
    2e3a:	bf 07       	cpc	r27, r31
    2e3c:	c8 f3       	brcs	.-14     	; 0x2e30 <strrev+0x10>
    2e3e:	08 95       	ret

00002e40 <__udivmodhi4>:
    2e40:	aa 1b       	sub	r26, r26
    2e42:	bb 1b       	sub	r27, r27
    2e44:	51 e1       	ldi	r21, 0x11	; 17
    2e46:	07 c0       	rjmp	.+14     	; 0x2e56 <__udivmodhi4_ep>

00002e48 <__udivmodhi4_loop>:
    2e48:	aa 1f       	adc	r26, r26
    2e4a:	bb 1f       	adc	r27, r27
    2e4c:	a6 17       	cp	r26, r22
    2e4e:	b7 07       	cpc	r27, r23
    2e50:	10 f0       	brcs	.+4      	; 0x2e56 <__udivmodhi4_ep>
    2e52:	a6 1b       	sub	r26, r22
    2e54:	b7 0b       	sbc	r27, r23

00002e56 <__udivmodhi4_ep>:
    2e56:	88 1f       	adc	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	5a 95       	dec	r21
    2e5c:	a9 f7       	brne	.-22     	; 0x2e48 <__udivmodhi4_loop>
    2e5e:	80 95       	com	r24
    2e60:	90 95       	com	r25
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	08 95       	ret

00002e68 <_exit>:
    2e68:	f8 94       	cli

00002e6a <__stop_program>:
    2e6a:	ff cf       	rjmp	.-2      	; 0x2e6a <__stop_program>
