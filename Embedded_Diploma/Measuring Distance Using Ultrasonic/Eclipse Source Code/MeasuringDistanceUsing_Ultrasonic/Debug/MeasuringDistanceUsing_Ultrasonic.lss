
MeasuringDistanceUsing_Ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000026e6  0000277a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800196  00800196  000028b0  2**0
                  ALLOC
  3 .stab         00002160  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001191  00000000  00000000  00004a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000833d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000096b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a88c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ad3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b70d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e8       	ldi	r22, 0x8E	; 142
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ea 56       	subi	r30, 0x6A	; 106
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:

/*******************************************************************************
 *                          	Main Function			                       *
 *******************************************************************************/
int main (void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	60 97       	sbiw	r28, 0x10	; 16
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
	/*	The Distance sensed by ultrasonic	*/
	uint16 L_distance = 0 ;
     e0c:	18 8a       	std	Y+16, r1	; 0x10
     e0e:	1f 86       	std	Y+15, r1	; 0x0f

	/*	Enable the Global Interrupt bit	*/
	SREG |= (1<<7);
     e10:	af e5       	ldi	r26, 0x5F	; 95
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ef e5       	ldi	r30, 0x5F	; 95
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 68       	ori	r24, 0x80	; 128
     e1c:	8c 93       	st	X, r24

	/*	Initialization functions of the Modules */
	LCD_init();
     e1e:	0e 94 3f 0c 	call	0x187e	; 0x187e <LCD_init>
	Ultrasonic_init();
     e22:	0e 94 69 12 	call	0x24d2	; 0x24d2 <Ultrasonic_init>

	/*	Super Loop	*/
	while(1)
	{
		/*	Read the distance read by the Ultrasonic sensor	*/
		L_distance = Ultrasonic_readDistance();
     e26:	0e 94 84 12 	call	0x2508	; 0x2508 <Ultrasonic_readDistance>
     e2a:	98 8b       	std	Y+16, r25	; 0x10
     e2c:	8f 87       	std	Y+15, r24	; 0x0f

		/*	Display on LCD the Distance Sensed by Ultrasonic	*/
		APP_displayDistance(&L_distance);
     e2e:	ce 01       	movw	r24, r28
     e30:	0f 96       	adiw	r24, 0x0f	; 15
     e32:	0e 94 8e 07 	call	0xf1c	; 0xf1c <APP_displayDistance>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 e7       	ldi	r26, 0x70	; 112
     e3c:	b2 e4       	ldi	r27, 0x42	; 66
     e3e:	8b 87       	std	Y+11, r24	; 0x0b
     e40:	9c 87       	std	Y+12, r25	; 0x0c
     e42:	ad 87       	std	Y+13, r26	; 0x0d
     e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	6b 85       	ldd	r22, Y+11	; 0x0b
     e48:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a ef       	ldi	r20, 0xFA	; 250
     e54:	54 e4       	ldi	r21, 0x44	; 68
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8f 83       	std	Y+7, r24	; 0x07
     e60:	98 87       	std	Y+8, r25	; 0x08
     e62:	a9 87       	std	Y+9, r26	; 0x09
     e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e66:	6f 81       	ldd	r22, Y+7	; 0x07
     e68:	78 85       	ldd	r23, Y+8	; 0x08
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <main+0x90>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <main+0x10e>
	else if (__tmp > 65535)
     e88:	6f 81       	ldd	r22, Y+7	; 0x07
     e8a:	78 85       	ldd	r23, Y+8	; 0x08
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9e 83       	std	Y+6, r25	; 0x06
     ec6:	8d 83       	std	Y+5, r24	; 0x05
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <main+0xf0>
     eca:	88 ec       	ldi	r24, 0xC8	; 200
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <main+0xde>
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <main+0xd2>
     ef0:	9a cf       	rjmp	.-204    	; 0xe26 <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6f 81       	ldd	r22, Y+7	; 0x07
     ef4:	78 85       	ldd	r23, Y+8	; 0x08
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	8d 81       	ldd	r24, Y+5	; 0x05
     f08:	9e 81       	ldd	r25, Y+6	; 0x06
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <main+0x11a>
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	85 cf       	rjmp	.-246    	; 0xe26 <main+0x2e>

00000f1c <APP_displayDistance>:
/*
 * Description:
 * This function Display The distance sensed by the Ultrasonic sensor.
 */
void APP_displayDistance(uint16 *a_distance_Ptr)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <APP_displayDistance+0x6>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01

	/*	Always display the Distance in the screen	*/
	LCD_displayStringAtRowColumn(0,0,"Ultrasonic  Test");
     f2a:	20 e6       	ldi	r18, 0x60	; 96
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	a9 01       	movw	r20, r18
     f34:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(2,0,"Distance  Sensed");
     f38:	21 e7       	ldi	r18, 0x71	; 113
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	a9 01       	movw	r20, r18
     f42:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_displayStringAtRowColumn>
	LCD_displayStringAtRowColumn(3,0,"is : ");
     f46:	22 e8       	ldi	r18, 0x82	; 130
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_displayStringAtRowColumn>
	LCD_displayNumber(*a_distance_Ptr);
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	cc 01       	movw	r24, r24
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_displayNumber>
	LCD_displayString(" CM  ");
     f6a:	88 e8       	ldi	r24, 0x88	; 136
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_displayString>
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <GPIO_setupPinDirection>:
 *
 * If the input port number or pin number are not correct, The function will
 * not handle the request.
 */
void GPIO_setupPinDirection(uint8 a_portNumber ,uint8 a_pinNumber ,PinDirectionType a_direction)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <GPIO_setupPinDirection+0x6>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <GPIO_setupPinDirection+0x8>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	6a 83       	std	Y+2, r22	; 0x02
     f8e:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 *  If the input port number or pin number are not correct, The function will
	 *  not handle the request.
	 */
	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ) )
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	08 f0       	brcs	.+2      	; 0xf98 <GPIO_setupPinDirection+0x1c>
     f96:	d5 c0       	rjmp	.+426    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	88 30       	cpi	r24, 0x08	; 8
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <GPIO_setupPinDirection+0x24>
     f9e:	d1 c0       	rjmp	.+418    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
		/*	Do nothing	*/
	}
	else
	{
		/*	set the pin direction as input or output	*/
		switch(a_portNumber)
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3d 83       	std	Y+5, r19	; 0x05
     fa8:	2c 83       	std	Y+4, r18	; 0x04
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <GPIO_setupPinDirection+0x3a>
     fb4:	43 c0       	rjmp	.+134    	; 0x103c <GPIO_setupPinDirection+0xc0>
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	2c f4       	brge	.+10     	; 0xfca <GPIO_setupPinDirection+0x4e>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <GPIO_setupPinDirection+0x68>
     fc8:	bc c0       	rjmp	.+376    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <GPIO_setupPinDirection+0x5a>
     fd4:	5f c0       	rjmp	.+190    	; 0x1094 <GPIO_setupPinDirection+0x118>
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <GPIO_setupPinDirection+0x66>
     fe0:	85 c0       	rjmp	.+266    	; 0x10ec <GPIO_setupPinDirection+0x170>
     fe2:	af c0       	rjmp	.+350    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(a_direction == PIN_INPUT)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	a9 f4       	brne	.+42     	; 0x1014 <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,a_pinNumber);
     fea:	aa e3       	ldi	r26, 0x3A	; 58
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ea e3       	ldi	r30, 0x3A	; 58
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_setupPinDirection+0x8c>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_setupPinDirection+0x88>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	97 c0       	rjmp	.+302    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,a_pinNumber);
    1014:	aa e3       	ldi	r26, 0x3A	; 58
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ea e3       	ldi	r30, 0x3A	; 58
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_setupPinDirection+0xb6>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_setupPinDirection+0xb2>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	83 c0       	rjmp	.+262    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if(a_direction == PIN_INPUT)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	88 23       	and	r24, r24
    1040:	a9 f4       	brne	.+42     	; 0x106c <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,a_pinNumber);
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <GPIO_setupPinDirection+0xe4>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <GPIO_setupPinDirection+0xe0>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	6b c0       	rjmp	.+214    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,a_pinNumber);
    106c:	a7 e3       	ldi	r26, 0x37	; 55
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e7 e3       	ldi	r30, 0x37	; 55
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <GPIO_setupPinDirection+0x10e>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <GPIO_setupPinDirection+0x10a>
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	57 c0       	rjmp	.+174    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTC_ID:
			if(a_direction == PIN_INPUT)
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	88 23       	and	r24, r24
    1098:	a9 f4       	brne	.+42     	; 0x10c4 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,a_pinNumber);
    109a:	a4 e3       	ldi	r26, 0x34	; 52
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e4 e3       	ldi	r30, 0x34	; 52
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_setupPinDirection+0x13c>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_setupPinDirection+0x138>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	3f c0       	rjmp	.+126    	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,a_pinNumber);
    10c4:	a4 e3       	ldi	r26, 0x34	; 52
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_setupPinDirection+0x166>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_setupPinDirection+0x162>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	2b c0       	rjmp	.+86     	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTD_ID:
			if(a_direction == PIN_INPUT)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 23       	and	r24, r24
    10f0:	a9 f4       	brne	.+42     	; 0x111c <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,a_pinNumber);
    10f2:	a1 e3       	ldi	r26, 0x31	; 49
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e1 e3       	ldi	r30, 0x31	; 49
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_setupPinDirection+0x194>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_setupPinDirection+0x190>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	13 c0       	rjmp	.+38     	; 0x1142 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,a_pinNumber);
    111c:	a1 e3       	ldi	r26, 0x31	; 49
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e1 e3       	ldi	r30, 0x31	; 49
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_setupPinDirection+0x1be>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_setupPinDirection+0x1ba>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <GPIO_writePin>:
 * not handle the request.
 * IF the value is not Logic High or Logic Low the function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 a_portNumber ,uint8 a_pinNumber ,uint8 a_value)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	00 d0       	rcall	.+0      	; 0x1158 <GPIO_writePin+0x6>
    1158:	00 d0       	rcall	.+0      	; 0x115a <GPIO_writePin+0x8>
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	6a 83       	std	Y+2, r22	; 0x02
    1164:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 *  If the input port number or pin number are not correct, The function will
	 *  not handle the request.
	 *  IF the value is not Logic High or Logic Low the function will not handle the request
	 */
	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ) || (a_value > 1))
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	08 f0       	brcs	.+2      	; 0x116e <GPIO_writePin+0x1c>
    116c:	d9 c0       	rjmp	.+434    	; 0x1320 <GPIO_writePin+0x1ce>
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	08 f0       	brcs	.+2      	; 0x1176 <GPIO_writePin+0x24>
    1174:	d5 c0       	rjmp	.+426    	; 0x1320 <GPIO_writePin+0x1ce>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	08 f0       	brcs	.+2      	; 0x117e <GPIO_writePin+0x2c>
    117c:	d1 c0       	rjmp	.+418    	; 0x1320 <GPIO_writePin+0x1ce>
		/*	Do nothing	*/
	}
	else
	{
		/*	Writes 1 or 0  in the pin	*/
		switch(a_portNumber)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3d 83       	std	Y+5, r19	; 0x05
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <GPIO_writePin+0x42>
    1192:	43 c0       	rjmp	.+134    	; 0x121a <GPIO_writePin+0xc8>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <GPIO_writePin+0x56>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <GPIO_writePin+0x70>
    11a6:	bc c0       	rjmp	.+376    	; 0x1320 <GPIO_writePin+0x1ce>
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	3d 81       	ldd	r19, Y+5	; 0x05
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <GPIO_writePin+0x62>
    11b2:	5f c0       	rjmp	.+190    	; 0x1272 <GPIO_writePin+0x120>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <GPIO_writePin+0x6e>
    11be:	85 c0       	rjmp	.+266    	; 0x12ca <GPIO_writePin+0x178>
    11c0:	af c0       	rjmp	.+350    	; 0x1320 <GPIO_writePin+0x1ce>
		{
		case PORTA_ID:
			if(a_value == LOGIC_LOW)
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 23       	and	r24, r24
    11c6:	a9 f4       	brne	.+42     	; 0x11f2 <GPIO_writePin+0xa0>
			{
				CLEAR_BIT(PORTA,a_pinNumber);
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_writePin+0x94>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_writePin+0x90>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	97 c0       	rjmp	.+302    	; 0x1320 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTA,a_pinNumber);
    11f2:	ab e3       	ldi	r26, 0x3B	; 59
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	eb e3       	ldi	r30, 0x3B	; 59
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_writePin+0xbe>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_writePin+0xba>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	83 c0       	rjmp	.+262    	; 0x1320 <GPIO_writePin+0x1ce>
			}
			break;

		case PORTB_ID:
			if(a_value == LOGIC_LOW)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 23       	and	r24, r24
    121e:	a9 f4       	brne	.+42     	; 0x124a <GPIO_writePin+0xf8>
			{
				CLEAR_BIT(PORTB,a_pinNumber);
    1220:	a8 e3       	ldi	r26, 0x38	; 56
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_writePin+0xec>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_writePin+0xe8>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	6b c0       	rjmp	.+214    	; 0x1320 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTB,a_pinNumber);
    124a:	a8 e3       	ldi	r26, 0x38	; 56
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e8 e3       	ldi	r30, 0x38	; 56
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_writePin+0x116>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_writePin+0x112>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	57 c0       	rjmp	.+174    	; 0x1320 <GPIO_writePin+0x1ce>
			}
			break;

		case PORTC_ID:
			if(a_value == LOGIC_LOW)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	88 23       	and	r24, r24
    1276:	a9 f4       	brne	.+42     	; 0x12a2 <GPIO_writePin+0x150>
			{
				CLEAR_BIT(PORTC,a_pinNumber);
    1278:	a5 e3       	ldi	r26, 0x35	; 53
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_writePin+0x144>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_writePin+0x140>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTC,a_pinNumber);
    12a2:	a5 e3       	ldi	r26, 0x35	; 53
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e3       	ldi	r30, 0x35	; 53
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_writePin+0x16e>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_writePin+0x16a>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	2b c0       	rjmp	.+86     	; 0x1320 <GPIO_writePin+0x1ce>
			}
			break;

		case PORTD_ID:
			if(a_value == LOGIC_LOW)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 23       	and	r24, r24
    12ce:	a9 f4       	brne	.+42     	; 0x12fa <GPIO_writePin+0x1a8>
			{
				CLEAR_BIT(PORTD,a_pinNumber);
    12d0:	a2 e3       	ldi	r26, 0x32	; 50
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e2 e3       	ldi	r30, 0x32	; 50
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_writePin+0x19c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_writePin+0x198>
    12f2:	80 95       	com	r24
    12f4:	84 23       	and	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <GPIO_writePin+0x1ce>
			}
			else
			{
				SET_BIT(PORTD,a_pinNumber);
    12fa:	a2 e3       	ldi	r26, 0x32	; 50
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e2 e3       	ldi	r30, 0x32	; 50
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_writePin+0x1c6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_writePin+0x1c2>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <GPIO_readPin>:
 *
 * If the input port number or pin number are not correct, The function will
 * return LOGIC_LOW.
 */
uint8 GPIO_readPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_readPin+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPIO_readPin+0x8>
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	6b 83       	std	Y+3, r22	; 0x03
	uint8 L_pinValue = LOGIC_LOW;
    1342:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * If the input port number or pin number are not correct, The function will
	 * not handle the request.
     */

	if( (a_portNumber >= NUM_OF_PORTS) || (a_pinNumber >= NUM_OF_PINS_PER_PORT ))
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	08 f0       	brcs	.+2      	; 0x134c <GPIO_readPin+0x1c>
    134a:	84 c0       	rjmp	.+264    	; 0x1454 <GPIO_readPin+0x124>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	88 30       	cpi	r24, 0x08	; 8
    1350:	08 f0       	brcs	.+2      	; 0x1354 <GPIO_readPin+0x24>
    1352:	80 c0       	rjmp	.+256    	; 0x1454 <GPIO_readPin+0x124>
		/*	Do nothing	*/
	}
	else
	{
		/*	 Read the value of a specific pin if it is Logic High or Logic Low.	*/
		switch(a_portNumber)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3d 83       	std	Y+5, r19	; 0x05
    135c:	2c 83       	std	Y+4, r18	; 0x04
    135e:	4c 81       	ldd	r20, Y+4	; 0x04
    1360:	5d 81       	ldd	r21, Y+5	; 0x05
    1362:	41 30       	cpi	r20, 0x01	; 1
    1364:	51 05       	cpc	r21, r1
    1366:	79 f1       	breq	.+94     	; 0x13c6 <GPIO_readPin+0x96>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	91 05       	cpc	r25, r1
    1370:	34 f4       	brge	.+12     	; 0x137e <GPIO_readPin+0x4e>
    1372:	2c 81       	ldd	r18, Y+4	; 0x04
    1374:	3d 81       	ldd	r19, Y+5	; 0x05
    1376:	21 15       	cp	r18, r1
    1378:	31 05       	cpc	r19, r1
    137a:	69 f0       	breq	.+26     	; 0x1396 <GPIO_readPin+0x66>
    137c:	6b c0       	rjmp	.+214    	; 0x1454 <GPIO_readPin+0x124>
    137e:	4c 81       	ldd	r20, Y+4	; 0x04
    1380:	5d 81       	ldd	r21, Y+5	; 0x05
    1382:	42 30       	cpi	r20, 0x02	; 2
    1384:	51 05       	cpc	r21, r1
    1386:	b9 f1       	breq	.+110    	; 0x13f6 <GPIO_readPin+0xc6>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <GPIO_readPin+0x64>
    1392:	49 c0       	rjmp	.+146    	; 0x1426 <GPIO_readPin+0xf6>
    1394:	5f c0       	rjmp	.+190    	; 0x1454 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,a_pinNumber) )
    1396:	e9 e3       	ldi	r30, 0x39	; 57
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a9 01       	movw	r20, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_readPin+0x7e>
    13aa:	55 95       	asr	r21
    13ac:	47 95       	ror	r20
    13ae:	8a 95       	dec	r24
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_readPin+0x7a>
    13b2:	ca 01       	movw	r24, r20
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	90 70       	andi	r25, 0x00	; 0
    13b8:	88 23       	and	r24, r24
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <GPIO_readPin+0x92>
			{
				L_pinValue = LOGIC_HIGH;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	49 c0       	rjmp	.+146    	; 0x1454 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    13c2:	19 82       	std	Y+1, r1	; 0x01
    13c4:	47 c0       	rjmp	.+142    	; 0x1454 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB,a_pinNumber) )
    13c6:	e6 e3       	ldi	r30, 0x36	; 54
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_readPin+0xae>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_readPin+0xaa>
    13e2:	ca 01       	movw	r24, r20
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	90 70       	andi	r25, 0x00	; 0
    13e8:	88 23       	and	r24, r24
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <GPIO_readPin+0xc2>
			{
				L_pinValue = LOGIC_HIGH;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	31 c0       	rjmp	.+98     	; 0x1454 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    13f2:	19 82       	std	Y+1, r1	; 0x01
    13f4:	2f c0       	rjmp	.+94     	; 0x1454 <GPIO_readPin+0x124>
			}			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC,a_pinNumber) )
    13f6:	e3 e3       	ldi	r30, 0x33	; 51
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <GPIO_readPin+0xde>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <GPIO_readPin+0xda>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	90 70       	andi	r25, 0x00	; 0
    1418:	88 23       	and	r24, r24
    141a:	19 f0       	breq	.+6      	; 0x1422 <GPIO_readPin+0xf2>
			{
				L_pinValue = LOGIC_HIGH;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	19 c0       	rjmp	.+50     	; 0x1454 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	17 c0       	rjmp	.+46     	; 0x1454 <GPIO_readPin+0x124>
			}
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND,a_pinNumber) )
    1426:	e0 e3       	ldi	r30, 0x30	; 48
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_readPin+0x10e>
    143a:	55 95       	asr	r21
    143c:	47 95       	ror	r20
    143e:	8a 95       	dec	r24
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_readPin+0x10a>
    1442:	ca 01       	movw	r24, r20
    1444:	81 70       	andi	r24, 0x01	; 1
    1446:	90 70       	andi	r25, 0x00	; 0
    1448:	88 23       	and	r24, r24
    144a:	19 f0       	breq	.+6      	; 0x1452 <GPIO_readPin+0x122>
			{
				L_pinValue = LOGIC_HIGH;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <GPIO_readPin+0x124>
			}
			else
			{
				L_pinValue = LOGIC_LOW;
    1452:	19 82       	std	Y+1, r1	; 0x01
		default:
			/*	Do Nothing	*/
			break;
		}
	}
	return L_pinValue;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <GPIO_setupPortDirection>:
 *  direction will be set.
 *
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 a_portNumber ,PortDirectionType a_direction)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <GPIO_setupPortDirection+0x6>
    146c:	00 d0       	rcall	.+0      	; 0x146e <GPIO_setupPortDirection+0x8>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	6a 83       	std	Y+2, r22	; 0x02

	/*	If the input port number is greater than NUM_OF_PORTS  The function will
	 * not handle the request.   */
	if( a_portNumber >= NUM_OF_PORTS )
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	90 f5       	brcc	.+100    	; 0x14e0 <GPIO_setupPortDirection+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/*	set the direction of all pins of a specific port */
		switch(a_portNumber)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3c 83       	std	Y+4, r19	; 0x04
    1484:	2b 83       	std	Y+3, r18	; 0x03
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	9c 81       	ldd	r25, Y+4	; 0x04
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	d1 f0       	breq	.+52     	; 0x14c4 <GPIO_setupPortDirection+0x5e>
    1490:	2b 81       	ldd	r18, Y+3	; 0x03
    1492:	3c 81       	ldd	r19, Y+4	; 0x04
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <GPIO_setupPortDirection+0x3e>
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	61 f0       	breq	.+24     	; 0x14ba <GPIO_setupPortDirection+0x54>
    14a2:	1e c0       	rjmp	.+60     	; 0x14e0 <GPIO_setupPortDirection+0x7a>
    14a4:	2b 81       	ldd	r18, Y+3	; 0x03
    14a6:	3c 81       	ldd	r19, Y+4	; 0x04
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	81 f0       	breq	.+32     	; 0x14ce <GPIO_setupPortDirection+0x68>
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <GPIO_setupPortDirection+0x72>
    14b8:	13 c0       	rjmp	.+38     	; 0x14e0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = a_direction;
    14ba:	ea e3       	ldi	r30, 0x3A	; 58
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	80 83       	st	Z, r24
    14c2:	0e c0       	rjmp	.+28     	; 0x14e0 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTB_ID:
			DDRB = a_direction;
    14c4:	e7 e3       	ldi	r30, 0x37	; 55
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 83       	st	Z, r24
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTC_ID:
			DDRC = a_direction;
    14ce:	e4 e3       	ldi	r30, 0x34	; 52
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <GPIO_setupPortDirection+0x7a>
			break;

		case PORTD_ID:
			DDRD = a_direction;
    14d8:	e1 e3       	ldi	r30, 0x31	; 49
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	80 83       	st	Z, r24
			/*	Do Nothing	*/
			break;
		}
	}

}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <GPIO_writePort>:
 * If the port direction is input it activate/deactivate the internal Pull-Up resistor.
 *
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 a_portNumber ,uint8 a_value)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPIO_writePort+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_writePort+0x8>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	6a 83       	std	Y+2, r22	; 0x02

	/*	If the input port number  is greater than NUM_OF_PORTS The function will
	 * not handle the request.
	 */
	if( a_portNumber >= NUM_OF_PORTS )
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	90 f5       	brcc	.+100    	; 0x1568 <GPIO_writePort+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/* Write the port value as required */
		switch(a_portNumber)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3c 83       	std	Y+4, r19	; 0x04
    150c:	2b 83       	std	Y+3, r18	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	d1 f0       	breq	.+52     	; 0x154c <GPIO_writePort+0x5e>
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	3c 81       	ldd	r19, Y+4	; 0x04
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <GPIO_writePort+0x3e>
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <GPIO_writePort+0x54>
    152a:	1e c0       	rjmp	.+60     	; 0x1568 <GPIO_writePort+0x7a>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <GPIO_writePort+0x68>
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	81 f0       	breq	.+32     	; 0x1560 <GPIO_writePort+0x72>
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = a_value;
    1542:	eb e3       	ldi	r30, 0x3B	; 59
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = a_value;
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 83       	st	Z, r24
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = a_value;
    1556:	e5 e3       	ldi	r30, 0x35	; 53
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	80 83       	st	Z, r24
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = a_value;
    1560:	e2 e3       	ldi	r30, 0x32	; 50
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	80 83       	st	Z, r24
		default:
			/*	Do Nothing	*/
			break;
		}
	}
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <GPIO_readPort>:
 * This function return the value of the required port register.
 *
 * If the input port number is not correct, The function will return 0 value.
 */
uint8 GPIO_readPort(uint8 a_portNumber)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_readPort+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_readPort+0x8>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	8a 83       	std	Y+2, r24	; 0x02
	uint8 L_portValue = 0;
    1584:	19 82       	std	Y+1, r1	; 0x01

	/*	 If the input port number is not correct, The function will return 0 value.	*/
	if( a_portNumber >= NUM_OF_PORTS )
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	90 f5       	brcc	.+100    	; 0x15f0 <GPIO_readPort+0x7a>
		/*	Do nothing	*/
	}
	else
	{
		/* Return the value of the required port register */
		switch(a_portNumber)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <GPIO_readPort+0x5e>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <GPIO_readPort+0x3e>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <GPIO_readPort+0x54>
    15b2:	1e c0       	rjmp	.+60     	; 0x15f0 <GPIO_readPort+0x7a>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <GPIO_readPort+0x68>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <GPIO_readPort+0x72>
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			L_portValue = PINA;
    15ca:	e9 e3       	ldi	r30, 0x39	; 57
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <GPIO_readPort+0x7a>
			break;

		case PORTB_ID:
			L_portValue = PINB;
    15d4:	e6 e3       	ldi	r30, 0x36	; 54
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <GPIO_readPort+0x7a>
			break;

		case PORTC_ID:
			L_portValue = PINC;
    15de:	e3 e3       	ldi	r30, 0x33	; 51
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <GPIO_readPort+0x7a>
			break;

		case PORTD_ID:
			L_portValue = PIND;
    15e8:	e0 e3       	ldi	r30, 0x30	; 48
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	89 83       	std	Y+1, r24	; 0x01
		default:
			/*	Do Nothing	*/
			break;
		}
	}
	return L_portValue;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <GPIO_activate_intenalPUR_forPin>:
 *
 * If the direction of the pin is output it won't activate the internal PUR
 * it will be write 1 on the pin
 */
void GPIO_activate_intenalPUR_forPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_activate_intenalPUR_forPin+0x6>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(a_portNumber , a_pinNumber , LOGIC_HIGH);
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	6a 81       	ldd	r22, Y+2	; 0x02
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <GPIO_deactivate_intenalPUR_forPin>:
 *
 * If the direction of the pin is output it won't deactivate the internal PUR
 * it will be write 0 on the pin
 */
void GPIO_deactivate_intenalPUR_forPin(uint8 a_portNumber ,uint8 a_pinNumber)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <GPIO_deactivate_intenalPUR_forPin+0x6>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(a_portNumber , a_pinNumber , LOGIC_LOW);
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	6a 81       	ldd	r22, Y+2	; 0x02
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <__vector_5>:
 * Description :
 * This function will call the call back function in which the user provides form
 * the application.
 */
ISR(TIMER1_CAPT_vect)
{
    1644:	1f 92       	push	r1
    1646:	0f 92       	push	r0
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	0f 92       	push	r0
    164c:	11 24       	eor	r1, r1
    164e:	2f 93       	push	r18
    1650:	3f 93       	push	r19
    1652:	4f 93       	push	r20
    1654:	5f 93       	push	r21
    1656:	6f 93       	push	r22
    1658:	7f 93       	push	r23
    165a:	8f 93       	push	r24
    165c:	9f 93       	push	r25
    165e:	af 93       	push	r26
    1660:	bf 93       	push	r27
    1662:	ef 93       	push	r30
    1664:	ff 93       	push	r31
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFunction_Ptr != NULL_PTR)
    166e:	80 91 96 01 	lds	r24, 0x0196
    1672:	90 91 97 01 	lds	r25, 0x0197
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	29 f0       	breq	.+10     	; 0x1684 <__vector_5+0x40>
	{
		(* g_callBackFunction_Ptr)();
    167a:	e0 91 96 01 	lds	r30, 0x0196
    167e:	f0 91 97 01 	lds	r31, 0x0197
    1682:	09 95       	icall
	}
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	bf 91       	pop	r27
    168e:	af 91       	pop	r26
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	7f 91       	pop	r23
    1696:	6f 91       	pop	r22
    1698:	5f 91       	pop	r21
    169a:	4f 91       	pop	r20
    169c:	3f 91       	pop	r19
    169e:	2f 91       	pop	r18
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const DynamicConfiguration_ICU * a_configuration_Ptr)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <ICU_init+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	9b 83       	std	Y+3, r25	; 0x03
    16b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 L_sreg = SREG;
    16ba:	ef e5       	ldi	r30, 0x5F	; 95
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01

	/*	Configure ICP1/PD6 as input	*/
	GPIO_setupPinDirection(PORTD_ID , PIN6_ID , PIN_INPUT);
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	66 e0       	ldi	r22, 0x06	; 6
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	0e 94 be 07 	call	0xf7c	; 0xf7c <GPIO_setupPinDirection>
	 * register, and the interrupt code updates the temporary register by accessing
	 * the same or any other of the 16-bit Timer Registers, then the result of
	 * the access outside the interrupt will be corrupted.
	 *  So we must do Atomic read/Write operations.
	 */
	SREG &= ~(1<<7); /*	Disable interrupts	*/
    16cc:	af e5       	ldi	r26, 0x5F	; 95
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ef e5       	ldi	r30, 0x5F	; 95
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8f 77       	andi	r24, 0x7F	; 127
    16d8:	8c 93       	st	X, r24

	TCNT1 = 0 ;		/*	Initialize to Zero	*/
    16da:	ec e4       	ldi	r30, 0x4C	; 76
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	11 82       	std	Z+1, r1	; 0x01
    16e0:	10 82       	st	Z, r1
	ICR1  = 0 ;		/*	Initialize to Zero	*/
    16e2:	e6 e4       	ldi	r30, 0x46	; 70
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	11 82       	std	Z+1, r1	; 0x01
    16e8:	10 82       	st	Z, r1

	SREG = L_sreg; 	/*	Return to the default status control register values  */
    16ea:	ef e5       	ldi	r30, 0x5F	; 95
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	80 83       	st	Z, r24
	 *  COM1B 1:0 = 0 : Normal port operation, OC1B disconnected.
	 *  FOC1A = 0	  : NON PWM mode.
	 *  FOC1B = 0	  : NON PWM mode.
	 *  WGM1 1:0 = 0  : configure module to Normal mode.
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8c e0       	ldi	r24, 0x0C	; 12
    16f8:	80 83       	st	Z, r24
	 *  CS1  2:0 = The Prescaler exist in the dynamic configuration structure[s_prescaller]
	 *  ICES1    = The Event selected in the dynamic configuration structure [s_edge]
	 *  ICNC1 = 0 	  : Deactivate Input capture noise canceler.
	 *  WGM1 3:2 = 0  : configure module to Normal mode.
	 */
	TCCR1B = ( (a_configuration_Ptr ->s_edge) << ICES1 ) | (a_configuration_Ptr->s_prescaller);
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1700:	fb 81       	ldd	r31, Y+3	; 0x03
    1702:	81 81       	ldd	r24, Z+1	; 0x01
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	00 24       	eor	r0, r0
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	07 94       	ror	r0
    1710:	96 95       	lsr	r25
    1712:	87 95       	ror	r24
    1714:	07 94       	ror	r0
    1716:	98 2f       	mov	r25, r24
    1718:	80 2d       	mov	r24, r0
    171a:	98 2f       	mov	r25, r24
    171c:	ea 81       	ldd	r30, Y+2	; 0x02
    171e:	fb 81       	ldd	r31, Y+3	; 0x03
    1720:	80 81       	ld	r24, Z
    1722:	89 2b       	or	r24, r25
    1724:	8c 93       	st	X, r24

	/*	Enable Input Capture Interrupt Module [MIE]	to generate interrupt when
	 * detecting an edge.
	 */
	TIMSK |= (1<<TICIE1);
    1726:	a9 e5       	ldi	r26, 0x59	; 89
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 e5       	ldi	r30, 0x59	; 89
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 62       	ori	r24, 0x20	; 32
    1732:	8c 93       	st	X, r24
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <ICU_setCallBackFunction>:
 * Event is detected.
 * It save the argument address of the function in a Global one so that it can be
 * called from the ISR.
 */
void ICU_setCallBackFunction( void (* a_callBackfunction_Ptr)(void) )
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <ICU_setCallBackFunction+0x6>
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackFunction_Ptr = a_callBackfunction_Ptr;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	90 93 97 01 	sts	0x0197, r25
    1756:	80 93 96 01 	sts	0x0196, r24
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <ICU_setEdgeDetectionType>:
 * initialize register values , set the Control bits as the ICU Initialization function
 * do.
 * In order for this function to operate right, It must be called after ICU_init function.
 */
void ICU_setEdgeDetectionType( EdgeSelect_ICU a_edge )
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	89 83       	std	Y+1, r24	; 0x01
	/*	Change the Event configurations of the ICU driver according to the
	 *  input Parameter.
	 */
	TCCR1B = (TCCR1B & 0xBF) | ( a_edge << ICES1 );
    1770:	ae e4       	ldi	r26, 0x4E	; 78
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ee e4       	ldi	r30, 0x4E	; 78
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	28 2f       	mov	r18, r24
    177c:	2f 7b       	andi	r18, 0xBF	; 191
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	00 24       	eor	r0, r0
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	07 94       	ror	r0
    178c:	96 95       	lsr	r25
    178e:	87 95       	ror	r24
    1790:	07 94       	ror	r0
    1792:	98 2f       	mov	r25, r24
    1794:	80 2d       	mov	r24, r0
    1796:	82 2b       	or	r24, r18
    1798:	8c 93       	st	X, r24
}
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <ICU_getInputCaptureValue>:
 * Description:
 * This function return the value of TCNT1 at the time the event occur, This value
 * is saved in ICR1 register.
 */
uint16 ICU_getInputCaptureValue(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <ICU_getInputCaptureValue+0x6>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	uint16 L_ICR1Value = 0 ;
    17ae:	1b 82       	std	Y+3, r1	; 0x03
    17b0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 L_sreg = SREG;
    17b2:	ef e5       	ldi	r30, 0x5F	; 95
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	89 83       	std	Y+1, r24	; 0x01
	* register, and the interrupt code updates the temporary register by accessing
	* the same or any other of the 16-bit Timer Registers, then the result of
	* the access outside the interrupt will be corrupted.
	*  So we must do Atomic read/Write operations.
	*/
	SREG &= ~(1<<7); /*	Disable interrupts	*/
    17ba:	af e5       	ldi	r26, 0x5F	; 95
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ef e5       	ldi	r30, 0x5F	; 95
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 77       	andi	r24, 0x7F	; 127
    17c6:	8c 93       	st	X, r24

	L_ICR1Value = ICR1;
    17c8:	e6 e4       	ldi	r30, 0x46	; 70
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	9b 83       	std	Y+3, r25	; 0x03
    17d2:	8a 83       	std	Y+2, r24	; 0x02

	SREG = L_sreg; 	/*	Return to the default status control register values  */
    17d4:	ef e5       	ldi	r30, 0x5F	; 95
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	80 83       	st	Z, r24

	return L_ICR1Value;
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <ICU_clearTimerValue>:
/*
 * Description:
 * This value reset the TCNT1 register so that the counter can count from Zero
 */
void ICU_clearTimerValue(void)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	uint8 L_sreg = SREG;
    17f6:	ef e5       	ldi	r30, 0x5F	; 95
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	89 83       	std	Y+1, r24	; 0x01
	 * register, and the interrupt code updates the temporary register by accessing
	 * the same or any other of the 16-bit Timer Registers, then the result of
	 * the access outside the interrupt will be corrupted.
	 *  So we must do Atomic read/Write operations.
	 */
	SREG &= ~(1<<7); /*	Disable interrupts	*/
    17fe:	af e5       	ldi	r26, 0x5F	; 95
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ef e5       	ldi	r30, 0x5F	; 95
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8f 77       	andi	r24, 0x7F	; 127
    180a:	8c 93       	st	X, r24

	TCNT1 = 0 ;		/*	Initialize to Zero	*/
    180c:	ec e4       	ldi	r30, 0x4C	; 76
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	11 82       	std	Z+1, r1	; 0x01
    1812:	10 82       	st	Z, r1

	SREG = L_sreg; 	/*	Return to the default status control register values  */
    1814:	ef e5       	ldi	r30, 0x5F	; 95
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	80 83       	st	Z, r24

}
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <ICU_deInit>:
/*
 * Description:
 * This function will Turn off the Timer and stops the ICU driver
 */
void ICU_deInit(void)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	uint8 L_sreg = SREG;
    182e:	ef e5       	ldi	r30, 0x5F	; 95
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	89 83       	std	Y+1, r24	; 0x01

	/* Clear all timer control registers	*/
	TCCR1A = 0 ;
    1836:	ef e4       	ldi	r30, 0x4F	; 79
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	10 82       	st	Z, r1
	TCCR1B = 0;
    183c:	ee e4       	ldi	r30, 0x4E	; 78
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	10 82       	st	Z, r1
	* register, and the interrupt code updates the temporary register by accessing
	* the same or any other of the 16-bit Timer Registers, then the result of
	* the access outside the interrupt will be corrupted.
	*  So we must do Atomic read/Write operations.
	*/
	SREG &= ~(1<<7); /*	Disable interrupts	*/
    1842:	af e5       	ldi	r26, 0x5F	; 95
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e5       	ldi	r30, 0x5F	; 95
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 77       	andi	r24, 0x7F	; 127
    184e:	8c 93       	st	X, r24

	TCNT1 = 0 ;		/*	Clear the register	*/
    1850:	ec e4       	ldi	r30, 0x4C	; 76
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	11 82       	std	Z+1, r1	; 0x01
    1856:	10 82       	st	Z, r1
	ICR1  = 0 ;		/*	Clear the register	*/
    1858:	e6 e4       	ldi	r30, 0x46	; 70
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	11 82       	std	Z+1, r1	; 0x01
    185e:	10 82       	st	Z, r1
	SREG = L_sreg; 	/*	Return to the default status control register values  */
    1860:	ef e5       	ldi	r30, 0x5F	; 95
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	80 83       	st	Z, r24


	/*	Disable Input Capture Interrupt Module	*/
	TIMSK &= ~(1<<TICIE1);
    1868:	a9 e5       	ldi	r26, 0x59	; 89
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e9 e5       	ldi	r30, 0x59	; 89
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	8f 7d       	andi	r24, 0xDF	; 223
    1874:	8c 93       	st	X, r24
}
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <LCD_init>:
 * Description:
 * This function initialize the required pins to be output for LCD and send the
 * needed commands to the LCD MCU to initialize it.
 */
void LCD_init(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
#if	((LCD_DATA_PIN_MODE == 4))
	uint8 i ;
#endif

	/*	Initialize RS , RW , E as Output	*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID , LCD_RS_PIN_ID , PIN_OUTPUT);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 be 07 	call	0xf7c	; 0xf7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID , LCD_RW_PIN_ID , PIN_OUTPUT);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 be 07 	call	0xf7c	; 0xf7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID , LCD_E_PIN_ID , PIN_OUTPUT);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	62 e0       	ldi	r22, 0x02	; 2
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 be 07 	call	0xf7c	; 0xf7c <GPIO_setupPinDirection>

	/*	Send Command to Choose 4 bits data mode		*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#else
	/*	Initialize the all the data port as output 	*/
	GPIO_setupPortDirection( LCD_DATA_PORT_ID , PORT_OUTPUT);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	6f ef       	ldi	r22, 0xFF	; 255
    18a8:	0e 94 33 0a 	call	0x1466	; 0x1466 <GPIO_setupPortDirection>

	/*	Send Command return home for  cursor to home position (address 0)	*/
	LCD_sendCommand(LCD_RETURN_HOME);
    18ac:	82 e0       	ldi	r24, 0x02	; 2
    18ae:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>

	/*	Send Command to Choose 8 bits data mode		*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    18b2:	88 e3       	ldi	r24, 0x38	; 56
    18b4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>

#endif

	/*	Send Command to turn Display on and make cursor blinking	*/
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    18b8:	8c e0       	ldi	r24, 0x0C	; 12
    18ba:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>

	/*	Send Command to clear all the screen DDRAM data	*/
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <LCD_sendCommand>:
 * In this function we will send the command to the LCD MCU following the steps
 * and rules of AC/Timing characteristics of the LCD in data sheet and the LCD
 * will do the required command.
 */
void LCD_sendCommand(uint8 a_command)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	e9 97       	sbiw	r28, 0x39	; 57
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	89 af       	std	Y+57, r24	; 0x39
	uint8 L_portValue = 0;
	uint8 L_savingBitsMask = 0xF0;
#endif

	/*	RS = 0 to write in Command register	*/
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_LOW);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
	/*	RW = 0 to write not read	*/
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a0 e8       	ldi	r26, 0x80	; 128
    18fa:	bf e3       	ldi	r27, 0x3F	; 63
    18fc:	8d ab       	std	Y+53, r24	; 0x35
    18fe:	9e ab       	std	Y+54, r25	; 0x36
    1900:	af ab       	std	Y+55, r26	; 0x37
    1902:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6d a9       	ldd	r22, Y+53	; 0x35
    1906:	7e a9       	ldd	r23, Y+54	; 0x36
    1908:	8f a9       	ldd	r24, Y+55	; 0x37
    190a:	98 ad       	ldd	r25, Y+56	; 0x38
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	89 ab       	std	Y+49, r24	; 0x31
    191e:	9a ab       	std	Y+50, r25	; 0x32
    1920:	ab ab       	std	Y+51, r26	; 0x33
    1922:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1924:	69 a9       	ldd	r22, Y+49	; 0x31
    1926:	7a a9       	ldd	r23, Y+50	; 0x32
    1928:	8b a9       	ldd	r24, Y+51	; 0x33
    192a:	9c a9       	ldd	r25, Y+52	; 0x34
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <LCD_sendCommand+0x7c>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	98 ab       	std	Y+48, r25	; 0x30
    1942:	8f a7       	std	Y+47, r24	; 0x2f
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1946:	69 a9       	ldd	r22, Y+49	; 0x31
    1948:	7a a9       	ldd	r23, Y+50	; 0x32
    194a:	8b a9       	ldd	r24, Y+51	; 0x33
    194c:	9c a9       	ldd	r25, Y+52	; 0x34
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6d a9       	ldd	r22, Y+53	; 0x35
    1960:	7e a9       	ldd	r23, Y+54	; 0x36
    1962:	8f a9       	ldd	r24, Y+55	; 0x37
    1964:	98 ad       	ldd	r25, Y+56	; 0x38
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	98 ab       	std	Y+48, r25	; 0x30
    1984:	8f a7       	std	Y+47, r24	; 0x2f
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <LCD_sendCommand+0xdc>
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9e a7       	std	Y+46, r25	; 0x2e
    198e:	8d a7       	std	Y+45, r24	; 0x2d
    1990:	8d a5       	ldd	r24, Y+45	; 0x2d
    1992:	9e a5       	ldd	r25, Y+46	; 0x2e
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_sendCommand+0xca>
    1998:	9e a7       	std	Y+46, r25	; 0x2e
    199a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8f a5       	ldd	r24, Y+47	; 0x2f
    199e:	98 a9       	ldd	r25, Y+48	; 0x30
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	98 ab       	std	Y+48, r25	; 0x30
    19a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a8:	98 a9       	ldd	r25, Y+48	; 0x30
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <LCD_sendCommand+0xbe>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	69 a9       	ldd	r22, Y+49	; 0x31
    19b2:	7a a9       	ldd	r23, Y+50	; 0x32
    19b4:	8b a9       	ldd	r24, Y+51	; 0x33
    19b6:	9c a9       	ldd	r25, Y+52	; 0x34
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	98 ab       	std	Y+48, r25	; 0x30
    19c2:	8f a7       	std	Y+47, r24	; 0x2f
    19c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c6:	98 a9       	ldd	r25, Y+48	; 0x30
    19c8:	9c a7       	std	Y+44, r25	; 0x2c
    19ca:	8b a7       	std	Y+43, r24	; 0x2b
    19cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_sendCommand+0x106>
    19d4:	9c a7       	std	Y+44, r25	; 0x2c
    19d6:	8b a7       	std	Y+43, r24	; 0x2b

	/*  Delay for Processing Tas = 50 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Enable LCD E = 1	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e8       	ldi	r26, 0x80	; 128
    19e8:	bf e3       	ldi	r27, 0x3F	; 63
    19ea:	8f a3       	std	Y+39, r24	; 0x27
    19ec:	98 a7       	std	Y+40, r25	; 0x28
    19ee:	a9 a7       	std	Y+41, r26	; 0x29
    19f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6f a1       	ldd	r22, Y+39	; 0x27
    19f4:	78 a5       	ldd	r23, Y+40	; 0x28
    19f6:	89 a5       	ldd	r24, Y+41	; 0x29
    19f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a ef       	ldi	r20, 0xFA	; 250
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8b a3       	std	Y+35, r24	; 0x23
    1a0c:	9c a3       	std	Y+36, r25	; 0x24
    1a0e:	ad a3       	std	Y+37, r26	; 0x25
    1a10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a12:	6b a1       	ldd	r22, Y+35	; 0x23
    1a14:	7c a1       	ldd	r23, Y+36	; 0x24
    1a16:	8d a1       	ldd	r24, Y+37	; 0x25
    1a18:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9a a3       	std	Y+34, r25	; 0x22
    1a30:	89 a3       	std	Y+33, r24	; 0x21
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1a34:	6b a1       	ldd	r22, Y+35	; 0x23
    1a36:	7c a1       	ldd	r23, Y+36	; 0x24
    1a38:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a50:	89 a5       	ldd	r24, Y+41	; 0x29
    1a52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9a a3       	std	Y+34, r25	; 0x22
    1a72:	89 a3       	std	Y+33, r24	; 0x21
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <LCD_sendCommand+0x1ca>
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	98 a3       	std	Y+32, r25	; 0x20
    1a7c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a80:	98 a1       	ldd	r25, Y+32	; 0x20
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_sendCommand+0x1b8>
    1a86:	98 a3       	std	Y+32, r25	; 0x20
    1a88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9a a3       	std	Y+34, r25	; 0x22
    1a92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	89 a1       	ldd	r24, Y+33	; 0x21
    1a96:	9a a1       	ldd	r25, Y+34	; 0x22
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <LCD_sendCommand+0x1ac>
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9a a3       	std	Y+34, r25	; 0x22
    1ab0:	89 a3       	std	Y+33, r24	; 0x21
    1ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1abc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_sendCommand+0x1f4>
    1ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac4:	8d 8f       	std	Y+29, r24	; 0x1d
	L_savingBitsMask = 0xF0;
	L_portValue = L_portValue & ROL(L_savingBitsMask,LCD_FIRST_DATA_PIN_ID) ;

#else
	/*	Write the Command in all 8 data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , a_command );
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	69 ad       	ldd	r22, Y+57	; 0x39
    1aca:	0e 94 77 0a 	call	0x14ee	; 0x14ee <GPIO_writePort>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e8       	ldi	r26, 0x80	; 128
    1ad4:	bf e3       	ldi	r27, 0x3F	; 63
    1ad6:	89 8f       	std	Y+25, r24	; 0x19
    1ad8:	9a 8f       	std	Y+26, r25	; 0x1a
    1ada:	ab 8f       	std	Y+27, r26	; 0x1b
    1adc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a ef       	ldi	r20, 0xFA	; 250
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8d 8b       	std	Y+21, r24	; 0x15
    1af8:	9e 8b       	std	Y+22, r25	; 0x16
    1afa:	af 8b       	std	Y+23, r26	; 0x17
    1afc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1afe:	6d 89       	ldd	r22, Y+21	; 0x15
    1b00:	7e 89       	ldd	r23, Y+22	; 0x16
    1b02:	8f 89       	ldd	r24, Y+23	; 0x17
    1b04:	98 8d       	ldd	r25, Y+24	; 0x18
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <LCD_sendCommand+0x256>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9c 8b       	std	Y+20, r25	; 0x14
    1b1c:	8b 8b       	std	Y+19, r24	; 0x13
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	4c f5       	brge	.+82     	; 0x1b8a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e2       	ldi	r20, 0x20	; 32
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9c 8b       	std	Y+20, r25	; 0x14
    1b5e:	8b 8b       	std	Y+19, r24	; 0x13
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <LCD_sendCommand+0x2b6>
    1b62:	88 ec       	ldi	r24, 0xC8	; 200
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9a 8b       	std	Y+18, r25	; 0x12
    1b68:	89 8b       	std	Y+17, r24	; 0x11
    1b6a:	89 89       	ldd	r24, Y+17	; 0x11
    1b6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_sendCommand+0x2a4>
    1b72:	9a 8b       	std	Y+18, r25	; 0x12
    1b74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	8b 89       	ldd	r24, Y+19	; 0x13
    1b78:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	9c 8b       	std	Y+20, r25	; 0x14
    1b7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	8b 89       	ldd	r24, Y+19	; 0x13
    1b82:	9c 89       	ldd	r25, Y+20	; 0x14
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <LCD_sendCommand+0x298>
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9c 8b       	std	Y+20, r25	; 0x14
    1b9c:	8b 8b       	std	Y+19, r24	; 0x13
    1b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba2:	98 8b       	std	Y+16, r25	; 0x10
    1ba4:	8f 87       	std	Y+15, r24	; 0x0f
    1ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba8:	98 89       	ldd	r25, Y+16	; 0x10
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_sendCommand+0x2e0>
    1bae:	98 8b       	std	Y+16, r25	; 0x10
    1bb0:	8f 87       	std	Y+15, r24	; 0x0f

	/*  Delay for Processing Tdsw = 100 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Disable LCD E = 0	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	8b 87       	std	Y+11, r24	; 0x0b
    1bc6:	9c 87       	std	Y+12, r25	; 0x0c
    1bc8:	ad 87       	std	Y+13, r26	; 0x0d
    1bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8f 83       	std	Y+7, r24	; 0x07
    1be6:	98 87       	std	Y+8, r25	; 0x08
    1be8:	a9 87       	std	Y+9, r26	; 0x09
    1bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_sendCommand+0x344>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_sendCommand+0x3a4>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_sendCommand+0x392>
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_sendCommand+0x386>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_sendCommand+0x3ce>
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01

	/*  Delay for Processing Th = 13 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Write 0 to the 8 bits of Data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , LOGIC_LOW );
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <GPIO_writePort>

#endif
}
    1ca8:	e9 96       	adiw	r28, 0x39	; 57
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <LCD_displayCharacter>:
 * In this function we will send the data to the LCD MCU following the steps
 * and rules of AC/Timing characteristics of the LCD in data sheet and The LCD
 * will display it on the screen.
 */
void LCD_displayCharacter(uint8 a_character)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	e9 97       	sbiw	r28, 0x39	; 57
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	89 af       	std	Y+57, r24	; 0x39
	uint8 L_portValue = 0;
	uint8 L_savingBitsMask = 0xF0;
#endif

	/*	RS = 1 to write in Data register	*/
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_HIGH);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
	/*	RW = 0 to write not read	*/
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e8       	ldi	r26, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	8d ab       	std	Y+53, r24	; 0x35
    1cee:	9e ab       	std	Y+54, r25	; 0x36
    1cf0:	af ab       	std	Y+55, r26	; 0x37
    1cf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfa:	98 ad       	ldd	r25, Y+56	; 0x38
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	89 ab       	std	Y+49, r24	; 0x31
    1d0e:	9a ab       	std	Y+50, r25	; 0x32
    1d10:	ab ab       	std	Y+51, r26	; 0x33
    1d12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d14:	69 a9       	ldd	r22, Y+49	; 0x31
    1d16:	7a a9       	ldd	r23, Y+50	; 0x32
    1d18:	8b a9       	ldd	r24, Y+51	; 0x33
    1d1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	98 ab       	std	Y+48, r25	; 0x30
    1d32:	8f a7       	std	Y+47, r24	; 0x2f
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1d36:	69 a9       	ldd	r22, Y+49	; 0x31
    1d38:	7a a9       	ldd	r23, Y+50	; 0x32
    1d3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	98 ab       	std	Y+48, r25	; 0x30
    1d74:	8f a7       	std	Y+47, r24	; 0x2f
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_displayCharacter+0xdc>
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e a7       	std	Y+46, r25	; 0x2e
    1d7e:	8d a7       	std	Y+45, r24	; 0x2d
    1d80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_displayCharacter+0xca>
    1d88:	9e a7       	std	Y+46, r25	; 0x2e
    1d8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	98 ab       	std	Y+48, r25	; 0x30
    1d94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d98:	98 a9       	ldd	r25, Y+48	; 0x30
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_displayCharacter+0xbe>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	98 ab       	std	Y+48, r25	; 0x30
    1db2:	8f a7       	std	Y+47, r24	; 0x2f
    1db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db6:	98 a9       	ldd	r25, Y+48	; 0x30
    1db8:	9c a7       	std	Y+44, r25	; 0x2c
    1dba:	8b a7       	std	Y+43, r24	; 0x2b
    1dbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_displayCharacter+0x106>
    1dc4:	9c a7       	std	Y+44, r25	; 0x2c
    1dc6:	8b a7       	std	Y+43, r24	; 0x2b

	/*  Delay for Processing Tas = 50 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Enable LCD E = 1	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_HIGH);
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	62 e0       	ldi	r22, 0x02	; 2
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	8f a3       	std	Y+39, r24	; 0x27
    1ddc:	98 a7       	std	Y+40, r25	; 0x28
    1dde:	a9 a7       	std	Y+41, r26	; 0x29
    1de0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8b a3       	std	Y+35, r24	; 0x23
    1dfc:	9c a3       	std	Y+36, r25	; 0x24
    1dfe:	ad a3       	std	Y+37, r26	; 0x25
    1e00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e02:	6b a1       	ldd	r22, Y+35	; 0x23
    1e04:	7c a1       	ldd	r23, Y+36	; 0x24
    1e06:	8d a1       	ldd	r24, Y+37	; 0x25
    1e08:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1e24:	6b a1       	ldd	r22, Y+35	; 0x23
    1e26:	7c a1       	ldd	r23, Y+36	; 0x24
    1e28:	8d a1       	ldd	r24, Y+37	; 0x25
    1e2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e40:	89 a5       	ldd	r24, Y+41	; 0x29
    1e42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_displayCharacter+0x1ca>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	98 a3       	std	Y+32, r25	; 0x20
    1e6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e70:	98 a1       	ldd	r25, Y+32	; 0x20
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_displayCharacter+0x1b8>
    1e76:	98 a3       	std	Y+32, r25	; 0x20
    1e78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9a a3       	std	Y+34, r25	; 0x22
    1e82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	89 a1       	ldd	r24, Y+33	; 0x21
    1e86:	9a a1       	ldd	r25, Y+34	; 0x22
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_displayCharacter+0x1ac>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e90:	7c a1       	ldd	r23, Y+36	; 0x24
    1e92:	8d a1       	ldd	r24, Y+37	; 0x25
    1e94:	9e a1       	ldd	r25, Y+38	; 0x26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9a a3       	std	Y+34, r25	; 0x22
    1ea0:	89 a3       	std	Y+33, r24	; 0x21
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_displayCharacter+0x1f4>
    1eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb4:	8d 8f       	std	Y+29, r24	; 0x1d
	L_savingBitsMask = 0xF0;
	L_portValue = L_portValue & ROL(L_savingBitsMask,LCD_FIRST_DATA_PIN_ID) ;

#else
	/*	Write the Command in all 8 data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , a_character );
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	69 ad       	ldd	r22, Y+57	; 0x39
    1eba:	0e 94 77 0a 	call	0x14ee	; 0x14ee <GPIO_writePort>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e8       	ldi	r26, 0x80	; 128
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	89 8f       	std	Y+25, r24	; 0x19
    1ec8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eca:	ab 8f       	std	Y+27, r26	; 0x1b
    1ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8d 8b       	std	Y+21, r24	; 0x15
    1ee8:	9e 8b       	std	Y+22, r25	; 0x16
    1eea:	af 8b       	std	Y+23, r26	; 0x17
    1eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1f10:	6d 89       	ldd	r22, Y+21	; 0x15
    1f12:	7e 89       	ldd	r23, Y+22	; 0x16
    1f14:	8f 89       	ldd	r24, Y+23	; 0x17
    1f16:	98 8d       	ldd	r25, Y+24	; 0x18
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_displayCharacter+0x2b6>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9a 8b       	std	Y+18, r25	; 0x12
    1f58:	89 8b       	std	Y+17, r24	; 0x11
    1f5a:	89 89       	ldd	r24, Y+17	; 0x11
    1f5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_displayCharacter+0x2a4>
    1f62:	9a 8b       	std	Y+18, r25	; 0x12
    1f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_displayCharacter+0x298>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9c 8b       	std	Y+20, r25	; 0x14
    1f8c:	8b 8b       	std	Y+19, r24	; 0x13
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	98 8b       	std	Y+16, r25	; 0x10
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
    1f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f98:	98 89       	ldd	r25, Y+16	; 0x10
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_displayCharacter+0x2e0>
    1f9e:	98 8b       	std	Y+16, r25	; 0x10
    1fa0:	8f 87       	std	Y+15, r24	; 0x0f

	/*  Delay for Processing Tdsw = 100 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Disable LCD E = 0	*/
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_LOW);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8b 87       	std	Y+11, r24	; 0x0b
    1fb6:	9c 87       	std	Y+12, r25	; 0x0c
    1fb8:	ad 87       	std	Y+13, r26	; 0x0d
    1fba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8f 83       	std	Y+7, r24	; 0x07
    1fd6:	98 87       	std	Y+8, r25	; 0x08
    1fd8:	a9 87       	std	Y+9, r26	; 0x09
    1fda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fde:	78 85       	ldd	r23, Y+8	; 0x08
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_displayCharacter+0x344>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6b 85       	ldd	r22, Y+11	; 0x0b
    2018:	7c 85       	ldd	r23, Y+12	; 0x0c
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_displayCharacter+0x3a4>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_displayCharacter+0x392>
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_displayCharacter+0x386>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_displayCharacter+0x3ce>
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01

	/*  Delay for Processing Th = 13 ns  in AC characteristics in data sheet	*/
	_delay_ms(1);

	/*	Write 0 to the 8 bits of Data bits	*/
	GPIO_writePort(LCD_DATA_PORT_ID , LOGIC_LOW );
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	0e 94 77 0a 	call	0x14ee	; 0x14ee <GPIO_writePort>

#endif

}
    2098:	e9 96       	adiw	r28, 0x39	; 57
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <LCD_moveCursor>:
 * dimension of the LCD.
 * If the row or column of the input is larger than the dimension of the LCD
 * the function won't move the cursor.
 */
void LCD_moveCursor(uint8 a_row , uint8 a_col)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <LCD_moveCursor+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LCD_moveCursor+0x8>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	8a 83       	std	Y+2, r24	; 0x02
    20ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8	L_memoryAddress = 0;
    20bc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 *  If the row or column of the input is larger than the dimension of the LCD
	 * the function won't move the cursor.
	 */
	if( (a_row >= LCD_NUM_OF_ROW) || (a_col >= LCD_NUM_OF_COLUMN))
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	84 30       	cpi	r24, 0x04	; 4
    20c2:	80 f5       	brcc	.+96     	; 0x2124 <LCD_moveCursor+0x7a>
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	80 31       	cpi	r24, 0x10	; 16
    20c8:	68 f5       	brcc	.+90     	; 0x2124 <LCD_moveCursor+0x7a>
		/*	In order to access a location in DDRAM we must do this
		 *  We must send a command of 8 bit =  0x80  |  [address you want]
		 *  we calculate the address by using the data sheet and know the
		 *  Mapped registers of each row.
		 */
		switch(a_row)
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	3d 83       	std	Y+5, r19	; 0x05
    20d2:	2c 83       	std	Y+4, r18	; 0x04
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	9d 81       	ldd	r25, Y+5	; 0x05
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	91 05       	cpc	r25, r1
    20dc:	c1 f0       	breq	.+48     	; 0x210e <LCD_moveCursor+0x64>
    20de:	2c 81       	ldd	r18, Y+4	; 0x04
    20e0:	3d 81       	ldd	r19, Y+5	; 0x05
    20e2:	22 30       	cpi	r18, 0x02	; 2
    20e4:	31 05       	cpc	r19, r1
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_moveCursor+0x48>
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	61 f0       	breq	.+24     	; 0x2108 <LCD_moveCursor+0x5e>
    20f0:	19 c0       	rjmp	.+50     	; 0x2124 <LCD_moveCursor+0x7a>
    20f2:	2c 81       	ldd	r18, Y+4	; 0x04
    20f4:	3d 81       	ldd	r19, Y+5	; 0x05
    20f6:	22 30       	cpi	r18, 0x02	; 2
    20f8:	31 05       	cpc	r19, r1
    20fa:	69 f0       	breq	.+26     	; 0x2116 <LCD_moveCursor+0x6c>
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	83 30       	cpi	r24, 0x03	; 3
    2102:	91 05       	cpc	r25, r1
    2104:	61 f0       	breq	.+24     	; 0x211e <LCD_moveCursor+0x74>
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <LCD_moveCursor+0x7a>
		{
			case 0:
				L_memoryAddress = a_col;
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <LCD_moveCursor+0x7a>
				break;
			case 1:
				L_memoryAddress = a_col + 0x40;
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	80 5c       	subi	r24, 0xC0	; 192
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <LCD_moveCursor+0x7a>
				break;
			case 2:
				L_memoryAddress = a_col + 0x10;
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	80 5f       	subi	r24, 0xF0	; 240
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <LCD_moveCursor+0x7a>
				break;
			case 3:
				L_memoryAddress = a_col + 0x50;
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	80 5b       	subi	r24, 0xB0	; 176
    2122:	89 83       	std	Y+1, r24	; 0x01
	}

	/*	Access the memory address in DDRAM by orring the memory address with 0x80
	 *	and send the result as command
	 */
	LCD_sendCommand( LCD_SET_CURSOR_LOCATION | L_memoryAddress );
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <LCD_displayString>:
 *    in the screen
 * 2) If the size of the string is larger than the remaining position at the line
 * 	  your string will be cut and only part of it will be displayed
 */
void LCD_displayString(const char *a_str)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <LCD_displayString+0x6>
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9b 83       	std	Y+3, r25	; 0x03
    214a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	0e c0       	rjmp	.+28     	; 0x216c <LCD_displayString+0x30>

	/*	Loop though the array and each time display only one character	*/
	while( a_str[i] != '\0')
	{
		LCD_displayCharacter(a_str[i]);
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	9b 81       	ldd	r25, Y+3	; 0x03
    215a:	fc 01       	movw	r30, r24
    215c:	e2 0f       	add	r30, r18
    215e:	f3 1f       	adc	r31, r19
    2160:	80 81       	ld	r24, Z
    2162:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <LCD_displayCharacter>
		i++;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	89 83       	std	Y+1, r24	; 0x01
void LCD_displayString(const char *a_str)
{
	uint8 i = 0;

	/*	Loop though the array and each time display only one character	*/
	while( a_str[i] != '\0')
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	80 81       	ld	r24, Z
    217e:	88 23       	and	r24, r24
    2180:	39 f7       	brne	.-50     	; 0x2150 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(a_str[i]);
		i++;
	}
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <LCD_displayStringAtRowColumn>:
 * This function display a whole string in the Screen at specified row and column.
 * If the size of the string is larger than the remaining position at the Line
 * your string will be cut and only part of it will be displayed.
 */
void LCD_displayStringAtRowColumn(uint8 a_row , uint8 a_col , const char *a_str)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <LCD_displayStringAtRowColumn+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <LCD_displayStringAtRowColumn+0x8>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	6a 83       	std	Y+2, r22	; 0x02
    219e:	5c 83       	std	Y+4, r21	; 0x04
    21a0:	4b 83       	std	Y+3, r20	; 0x03
	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	6a 81       	ldd	r22, Y+2	; 0x02
    21a6:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_moveCursor>
	/*	Display the String	*/
	LCD_displayString(a_str);
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_displayString>
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_displayNumber>:
 *    in the screen
 * 2) If the size of the Number is larger than the remaining position at the line
 * 	  your Number will be cut and only part of it will be displayed
 */
void LCD_displayNumber(sint32 a_number)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	64 97       	sbiw	r28, 0x14	; 20
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	69 8b       	std	Y+17, r22	; 0x11
    21d6:	7a 8b       	std	Y+18, r23	; 0x12
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
    21da:	9c 8b       	std	Y+20, r25	; 0x14
	/*	Buffer to save the ASCI values of the number	*/
	char L_buff [16] = {0};
    21dc:	80 e1       	ldi	r24, 0x10	; 16
    21de:	fe 01       	movw	r30, r28
    21e0:	31 96       	adiw	r30, 0x01	; 1
    21e2:	df 01       	movw	r26, r30
    21e4:	98 2f       	mov	r25, r24
    21e6:	1d 92       	st	X+, r1
    21e8:	9a 95       	dec	r25
    21ea:	e9 f7       	brne	.-6      	; 0x21e6 <LCD_displayNumber+0x26>

	/*	Function convert each separate number to ASCI value and save it to L_buff
	 *  10 is to tell the function to convert a_number to ASCI of number with base
	 *  10.
	 */
	itoa(a_number , L_buff , 10);
    21ec:	89 89       	ldd	r24, Y+17	; 0x11
    21ee:	9a 89       	ldd	r25, Y+18	; 0x12
    21f0:	9e 01       	movw	r18, r28
    21f2:	2f 5f       	subi	r18, 0xFF	; 255
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	b9 01       	movw	r22, r18
    21f8:	4a e0       	ldi	r20, 0x0A	; 10
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	0e 94 2c 13 	call	0x2658	; 0x2658 <itoa>

	/*	Display the String	*/
	LCD_displayString(L_buff);
    2200:	ce 01       	movw	r24, r28
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_displayString>
}
    2208:	64 96       	adiw	r28, 0x14	; 20
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <LCD_displayNumberAtRowColumn>:
 * This function display a whole Number in the Screen at specified row and column.
 * If the size of the Number is larger than the remaining position at the Line
 * your Number will be cut and only part of it will be displayed.
 */
void LCD_displayNumberAtRowColumn(uint8 a_row , uint8 a_col , sint32 a_number)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <LCD_displayNumberAtRowColumn+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <LCD_displayNumberAtRowColumn+0x8>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <LCD_displayNumberAtRowColumn+0xa>
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	6a 83       	std	Y+2, r22	; 0x02
    222c:	2b 83       	std	Y+3, r18	; 0x03
    222e:	3c 83       	std	Y+4, r19	; 0x04
    2230:	4d 83       	std	Y+5, r20	; 0x05
    2232:	5e 83       	std	Y+6, r21	; 0x06
	/*	First move the Cursor to the required location	*/
	LCD_moveCursor(a_row , a_col);
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	6a 81       	ldd	r22, Y+2	; 0x02
    2238:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_moveCursor>
	/*	Display the String	*/
	LCD_displayNumber(a_number);
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	ad 81       	ldd	r26, Y+5	; 0x05
    2242:	be 81       	ldd	r27, Y+6	; 0x06
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_displayNumber>
}
    224c:	26 96       	adiw	r28, 0x06	; 6
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <LCD_clearScreen>:
/*
 * Description:
 * This function Clears display and returns cursor to the home position (address 0).
 */
void LCD_clearScreen(void)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <LCD_shiftLeftEntireDisplayByOnePosition>:
 * This function shift all 2 Lines by one position to left
 * You may lose data if you shift left to a location that exceed the dimension
 * of the LCD
 */
void LCD_shiftLeftEntireDisplayByOnePosition(void)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_LEFT_ENTIRE_DISPLAY);
    227a:	88 e1       	ldi	r24, 0x18	; 24
    227c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <LCD_shiftRightEntireDisplayByOnePosition>:
 * This function shift all 2 Lines by one position to right
 * You may lose data if you shift right to a location that exceed the dimension
 * of the LCD
 */
void LCD_shiftRightEntireDisplayByOnePosition(void)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_SHIFT_RIGHT_ENTIRE_DISPLAY);
    228e:	8c e1       	ldi	r24, 0x1C	; 28
    2290:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_displayOff>:
 * [it don't clear the DDRAM content] which mean if you call this function it
 * appear the LCD is cleared but when it you call function display On the content
 * of the old data will appear again.
 */
void LCD_displayOff(void)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_DISPLAY_OFF_CURSOR_OFF);
    22a2:	88 e0       	ldi	r24, 0x08	; 8
    22a4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <LCD_displayOn>:
 * Description:
 * This function will turn on display and any character exists on the DDRAM of
 * the LCD will appear in the screen
 */
void LCD_displayOn(void)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING);
    22b6:	8f e0       	ldi	r24, 0x0F	; 15
    22b8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_sendCommand>
}
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <Ultrasonic_trigger>:
 * Description:
 * This function is responsible for sending 10 usec pulse to Trigger the ultrasonic
 * sensor.
 */
static void Ultrasonic_trigger(void)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	68 97       	sbiw	r28, 0x18	; 24
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
	 * 	Trigger bit  = 0 : to make sure that when setting the bit a rising edge is triggered.
	 * 	Trigger bit  = 1 : Set high to make a rising edge
	 * 	delay 15 us to make the pulse
	 * 	Trigger bit  = 0
	 */
	GPIO_writePin(ULTRASONIC_TRIGGER_SIGNAL_PORT_ID , ULTRASONIC_TRIGGER_SIGNAL_PIN_ID , LOGIC_LOW);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	65 e0       	ldi	r22, 0x05	; 5
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
	GPIO_writePin(ULTRASONIC_TRIGGER_SIGNAL_PORT_ID , ULTRASONIC_TRIGGER_SIGNAL_PIN_ID , LOGIC_HIGH);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	65 e0       	ldi	r22, 0x05	; 5
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a0 e7       	ldi	r26, 0x70	; 112
    22f0:	b1 e4       	ldi	r27, 0x41	; 65
    22f2:	8d 8b       	std	Y+21, r24	; 0x15
    22f4:	9e 8b       	std	Y+22, r25	; 0x16
    22f6:	af 8b       	std	Y+23, r26	; 0x17
    22f8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22fa:	6d 89       	ldd	r22, Y+21	; 0x15
    22fc:	7e 89       	ldd	r23, Y+22	; 0x16
    22fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2300:	98 8d       	ldd	r25, Y+24	; 0x18
    2302:	2b ea       	ldi	r18, 0xAB	; 171
    2304:	3a ea       	ldi	r19, 0xAA	; 170
    2306:	4a e2       	ldi	r20, 0x2A	; 42
    2308:	50 e4       	ldi	r21, 0x40	; 64
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	89 8b       	std	Y+17, r24	; 0x11
    2314:	9a 8b       	std	Y+18, r25	; 0x12
    2316:	ab 8b       	std	Y+19, r26	; 0x13
    2318:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    231a:	69 89       	ldd	r22, Y+17	; 0x11
    231c:	7a 89       	ldd	r23, Y+18	; 0x12
    231e:	8b 89       	ldd	r24, Y+19	; 0x13
    2320:	9c 89       	ldd	r25, Y+20	; 0x14
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232e:	88 23       	and	r24, r24
    2330:	1c f4       	brge	.+6      	; 0x2338 <Ultrasonic_trigger+0x76>
		__ticks = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	88 8b       	std	Y+16, r24	; 0x10
    2336:	91 c0       	rjmp	.+290    	; 0x245a <Ultrasonic_trigger+0x198>
	else if (__tmp > 255)
    2338:	69 89       	ldd	r22, Y+17	; 0x11
    233a:	7a 89       	ldd	r23, Y+18	; 0x12
    233c:	8b 89       	ldd	r24, Y+19	; 0x13
    233e:	9c 89       	ldd	r25, Y+20	; 0x14
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	53 e4       	ldi	r21, 0x43	; 67
    2348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	0c f0       	brlt	.+2      	; 0x2352 <Ultrasonic_trigger+0x90>
    2350:	7b c0       	rjmp	.+246    	; 0x2448 <Ultrasonic_trigger+0x186>
	{
		_delay_ms(__us / 1000.0);
    2352:	6d 89       	ldd	r22, Y+21	; 0x15
    2354:	7e 89       	ldd	r23, Y+22	; 0x16
    2356:	8f 89       	ldd	r24, Y+23	; 0x17
    2358:	98 8d       	ldd	r25, Y+24	; 0x18
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a e7       	ldi	r20, 0x7A	; 122
    2360:	54 e4       	ldi	r21, 0x44	; 68
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8c 87       	std	Y+12, r24	; 0x0c
    236c:	9d 87       	std	Y+13, r25	; 0x0d
    236e:	ae 87       	std	Y+14, r26	; 0x0e
    2370:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6c 85       	ldd	r22, Y+12	; 0x0c
    2374:	7d 85       	ldd	r23, Y+13	; 0x0d
    2376:	8e 85       	ldd	r24, Y+14	; 0x0e
    2378:	9f 85       	ldd	r25, Y+15	; 0x0f
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a ef       	ldi	r20, 0xFA	; 250
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	88 87       	std	Y+8, r24	; 0x08
    238c:	99 87       	std	Y+9, r25	; 0x09
    238e:	aa 87       	std	Y+10, r26	; 0x0a
    2390:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2392:	68 85       	ldd	r22, Y+8	; 0x08
    2394:	79 85       	ldd	r23, Y+9	; 0x09
    2396:	8a 85       	ldd	r24, Y+10	; 0x0a
    2398:	9b 85       	ldd	r25, Y+11	; 0x0b
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <Ultrasonic_trigger+0xf2>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9f 83       	std	Y+7, r25	; 0x07
    23b0:	8e 83       	std	Y+6, r24	; 0x06
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <Ultrasonic_trigger+0x170>
	else if (__tmp > 65535)
    23b4:	68 85       	ldd	r22, Y+8	; 0x08
    23b6:	79 85       	ldd	r23, Y+9	; 0x09
    23b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <Ultrasonic_trigger+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    23d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9f 83       	std	Y+7, r25	; 0x07
    23f2:	8e 83       	std	Y+6, r24	; 0x06
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <Ultrasonic_trigger+0x152>
    23f6:	88 ec       	ldi	r24, 0xC8	; 200
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9d 83       	std	Y+5, r25	; 0x05
    23fc:	8c 83       	std	Y+4, r24	; 0x04
    23fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2400:	9d 81       	ldd	r25, Y+5	; 0x05
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <Ultrasonic_trigger+0x140>
    2406:	9d 83       	std	Y+5, r25	; 0x05
    2408:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8e 81       	ldd	r24, Y+6	; 0x06
    240c:	9f 81       	ldd	r25, Y+7	; 0x07
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9f 83       	std	Y+7, r25	; 0x07
    2412:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	9f 81       	ldd	r25, Y+7	; 0x07
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <Ultrasonic_trigger+0x134>
    241c:	24 c0       	rjmp	.+72     	; 0x2466 <Ultrasonic_trigger+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	68 85       	ldd	r22, Y+8	; 0x08
    2420:	79 85       	ldd	r23, Y+9	; 0x09
    2422:	8a 85       	ldd	r24, Y+10	; 0x0a
    2424:	9b 85       	ldd	r25, Y+11	; 0x0b
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9f 83       	std	Y+7, r25	; 0x07
    2430:	8e 83       	std	Y+6, r24	; 0x06
    2432:	8e 81       	ldd	r24, Y+6	; 0x06
    2434:	9f 81       	ldd	r25, Y+7	; 0x07
    2436:	9b 83       	std	Y+3, r25	; 0x03
    2438:	8a 83       	std	Y+2, r24	; 0x02
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <Ultrasonic_trigger+0x17c>
    2442:	9b 83       	std	Y+3, r25	; 0x03
    2444:	8a 83       	std	Y+2, r24	; 0x02
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <Ultrasonic_trigger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2448:	69 89       	ldd	r22, Y+17	; 0x11
    244a:	7a 89       	ldd	r23, Y+18	; 0x12
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	9c 89       	ldd	r25, Y+20	; 0x14
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	88 8b       	std	Y+16, r24	; 0x10
    245a:	88 89       	ldd	r24, Y+16	; 0x10
    245c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	8a 95       	dec	r24
    2462:	f1 f7       	brne	.-4      	; 0x2460 <Ultrasonic_trigger+0x19e>
    2464:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	GPIO_writePin(ULTRASONIC_TRIGGER_SIGNAL_PORT_ID , ULTRASONIC_TRIGGER_SIGNAL_PIN_ID , LOGIC_LOW);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	65 e0       	ldi	r22, 0x05	; 5
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 a9 08 	call	0x1152	; 0x1152 <GPIO_writePin>
}
    2470:	68 96       	adiw	r28, 0x18	; 24
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <Ultrasonic_edgeProcessing>:
 * This is the call back function called by the ICU driver, IT is used to
 * calculate the high time (pulse time) generated by the ultrasonic sensor which
 * is the time taken to travel and return from the object detected.
 */
static void Ultrasonic_edgeProcessing(void)
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	/*	Increment the counter each time ICU detect an edge and ISR is executed	*/
	g_edgeCount++;
    248a:	80 91 98 01 	lds	r24, 0x0198
    248e:	8f 5f       	subi	r24, 0xFF	; 255
    2490:	80 93 98 01 	sts	0x0198, r24


	if( 1 == g_edgeCount)	/*	Enter here after ICU detect Rising Edge	*/
    2494:	80 91 98 01 	lds	r24, 0x0198
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	31 f4       	brne	.+12     	; 0x24a8 <Ultrasonic_edgeProcessing+0x26>
	{
		/*	Clear the TCNT1 value so that it start count time form zero	*/
		ICU_clearTimerValue();
    249c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ICU_clearTimerValue>

		/*	Set ICU to Detect Falling edge so that when the ECHO bit is set to
		 *  zero we can calculate the time to travel and return form certain
		 *  object.
		 */
		ICU_setEdgeDetectionType(FALLING_EDGE);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <ICU_setEdgeDetectionType>
    24a6:	12 c0       	rjmp	.+36     	; 0x24cc <Ultrasonic_edgeProcessing+0x4a>
	}
	else if ( 2 == g_edgeCount)	/*	Enter here after ICU detect Falling Edge  */
    24a8:	80 91 98 01 	lds	r24, 0x0198
    24ac:	82 30       	cpi	r24, 0x02	; 2
    24ae:	71 f4       	brne	.+28     	; 0x24cc <Ultrasonic_edgeProcessing+0x4a>
	{
		/*	Save the Time where the sound wave travel and return from certain
		 * object.
		 */
		g_echoPinHighTime = ICU_getInputCaptureValue();
    24b0:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <ICU_getInputCaptureValue>
    24b4:	90 93 9a 01 	sts	0x019A, r25
    24b8:	80 93 99 01 	sts	0x0199, r24

		/*	High  time Calculation is finished	*/
		g_echoPinHighTimeFlag = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 93 9b 01 	sts	0x019B, r24

		/*	We need Set the edge count value to zero and make ICU detect rising
		 *  Edge so That when  calling the read function to read another distance
		 *  we start from the beginning.
		 */
		g_edgeCount = 0;
    24c2:	10 92 98 01 	sts	0x0198, r1
		ICU_setEdgeDetectionType(RISING_EDGE);
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <ICU_setEdgeDetectionType>
	}
}
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <Ultrasonic_init>:
 * 1)Initialize the ICU driver as required.
 * 2)Setup the ICU call back function.
 * 3)Setup the direction for the trigger pin as output pin through the GPIO driver.
 */
void Ultrasonic_init(void)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <Ultrasonic_init+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
	/*	Dynamic configuration for ICU	*/
	DynamicConfiguration_ICU	L_config = {F_CPU_DIV_BY_8 , RISING_EDGE};
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	8a 83       	std	Y+2, r24	; 0x02

	/*	Set the direction of the Trigger bit to Output	*/
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_SIGNAL_PORT_ID , ULTRASONIC_TRIGGER_SIGNAL_PIN_ID , PIN_OUTPUT);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	65 e0       	ldi	r22, 0x05	; 5
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 be 07 	call	0xf7c	; 0xf7c <GPIO_setupPinDirection>


	/*	Set the Call back function of the ICU driver to call when event occur	*/
	ICU_setCallBackFunction(Ultrasonic_edgeProcessing);
    24ee:	81 e4       	ldi	r24, 0x41	; 65
    24f0:	92 e1       	ldi	r25, 0x12	; 18
    24f2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <ICU_setCallBackFunction>

	/*	ICU Initialization	*/
	ICU_init(&L_config);
    24f6:	ce 01       	movw	r24, r28
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	0e 94 55 0b 	call	0x16aa	; 0x16aa <ICU_init>

}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <Ultrasonic_readDistance>:
 * return from the object and it Start the measurements by the ICU and return the
 * value of distance read.
 */

uint16 Ultrasonic_readDistance(void)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <Ultrasonic_readDistance+0x6>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	/*	Distance calculated is stored in here	*/
	uint16 L_distance = 0 ;
    2512:	1a 82       	std	Y+2, r1	; 0x02
    2514:	19 82       	std	Y+1, r1	; 0x01

	/*	Send the trigger pulse to the Ultrasonic Sensor	*/
	Ultrasonic_trigger();
    2516:	0e 94 61 11 	call	0x22c2	; 0x22c2 <Ultrasonic_trigger>

	/*	Polling until calculation of High time at ECHO PIN is finished	*/
	while( !g_echoPinHighTimeFlag ) ;
    251a:	80 91 9b 01 	lds	r24, 0x019B
    251e:	88 23       	and	r24, r24
    2520:	e1 f3       	breq	.-8      	; 0x251a <Ultrasonic_readDistance+0x12>

	/*	Clear the flag so that when reading another distance the Polling loop
	 *  execute successfully.
	 */
	g_echoPinHighTimeFlag = 0;
    2522:	10 92 9b 01 	sts	0x019B, r1
	 *
	 * OR
	 *
	 * Distance = (Sound velocity/2) * Timer Value * Timer step
	 */
	L_distance = SOUND_velocity_IN_cmPERs_DIV_BY_2 * g_echoPinHighTime * TIMER_STEP ;
    2526:	80 91 99 01 	lds	r24, 0x0199
    252a:	90 91 9a 01 	lds	r25, 0x019A
    252e:	cc 01       	movw	r24, r24
    2530:	a0 e0       	ldi	r26, 0x00	; 0
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	28 e6       	ldi	r18, 0x68	; 104
    2536:	32 e4       	ldi	r19, 0x42	; 66
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__mulsi3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	34 e2       	ldi	r19, 0x24	; 36
    2570:	44 ef       	ldi	r20, 0xF4	; 244
    2572:	5a e4       	ldi	r21, 0x4A	; 74
    2574:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01

	return L_distance;
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <Ultrasonic_deInit>:
 * Description:
 * This function turn off the Modules that is being used by Ultarsonic sensor
 * which is the Timer module.
 */
void Ultrasonic_deInit(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
	ICU_deInit();
    25a2:	0e 94 12 0c 	call	0x1824	; 0x1824 <ICU_deInit>
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <__mulsi3>:
    25ac:	62 9f       	mul	r22, r18
    25ae:	d0 01       	movw	r26, r0
    25b0:	73 9f       	mul	r23, r19
    25b2:	f0 01       	movw	r30, r0
    25b4:	82 9f       	mul	r24, r18
    25b6:	e0 0d       	add	r30, r0
    25b8:	f1 1d       	adc	r31, r1
    25ba:	64 9f       	mul	r22, r20
    25bc:	e0 0d       	add	r30, r0
    25be:	f1 1d       	adc	r31, r1
    25c0:	92 9f       	mul	r25, r18
    25c2:	f0 0d       	add	r31, r0
    25c4:	83 9f       	mul	r24, r19
    25c6:	f0 0d       	add	r31, r0
    25c8:	74 9f       	mul	r23, r20
    25ca:	f0 0d       	add	r31, r0
    25cc:	65 9f       	mul	r22, r21
    25ce:	f0 0d       	add	r31, r0
    25d0:	99 27       	eor	r25, r25
    25d2:	72 9f       	mul	r23, r18
    25d4:	b0 0d       	add	r27, r0
    25d6:	e1 1d       	adc	r30, r1
    25d8:	f9 1f       	adc	r31, r25
    25da:	63 9f       	mul	r22, r19
    25dc:	b0 0d       	add	r27, r0
    25de:	e1 1d       	adc	r30, r1
    25e0:	f9 1f       	adc	r31, r25
    25e2:	bd 01       	movw	r22, r26
    25e4:	cf 01       	movw	r24, r30
    25e6:	11 24       	eor	r1, r1
    25e8:	08 95       	ret

000025ea <__prologue_saves__>:
    25ea:	2f 92       	push	r2
    25ec:	3f 92       	push	r3
    25ee:	4f 92       	push	r4
    25f0:	5f 92       	push	r5
    25f2:	6f 92       	push	r6
    25f4:	7f 92       	push	r7
    25f6:	8f 92       	push	r8
    25f8:	9f 92       	push	r9
    25fa:	af 92       	push	r10
    25fc:	bf 92       	push	r11
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	ca 1b       	sub	r28, r26
    2614:	db 0b       	sbc	r29, r27
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	09 94       	ijmp

00002622 <__epilogue_restores__>:
    2622:	2a 88       	ldd	r2, Y+18	; 0x12
    2624:	39 88       	ldd	r3, Y+17	; 0x11
    2626:	48 88       	ldd	r4, Y+16	; 0x10
    2628:	5f 84       	ldd	r5, Y+15	; 0x0f
    262a:	6e 84       	ldd	r6, Y+14	; 0x0e
    262c:	7d 84       	ldd	r7, Y+13	; 0x0d
    262e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2630:	9b 84       	ldd	r9, Y+11	; 0x0b
    2632:	aa 84       	ldd	r10, Y+10	; 0x0a
    2634:	b9 84       	ldd	r11, Y+9	; 0x09
    2636:	c8 84       	ldd	r12, Y+8	; 0x08
    2638:	df 80       	ldd	r13, Y+7	; 0x07
    263a:	ee 80       	ldd	r14, Y+6	; 0x06
    263c:	fd 80       	ldd	r15, Y+5	; 0x05
    263e:	0c 81       	ldd	r16, Y+4	; 0x04
    2640:	1b 81       	ldd	r17, Y+3	; 0x03
    2642:	aa 81       	ldd	r26, Y+2	; 0x02
    2644:	b9 81       	ldd	r27, Y+1	; 0x01
    2646:	ce 0f       	add	r28, r30
    2648:	d1 1d       	adc	r29, r1
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	ed 01       	movw	r28, r26
    2656:	08 95       	ret

00002658 <itoa>:
    2658:	fb 01       	movw	r30, r22
    265a:	9f 01       	movw	r18, r30
    265c:	e8 94       	clt
    265e:	42 30       	cpi	r20, 0x02	; 2
    2660:	c4 f0       	brlt	.+48     	; 0x2692 <itoa+0x3a>
    2662:	45 32       	cpi	r20, 0x25	; 37
    2664:	b4 f4       	brge	.+44     	; 0x2692 <itoa+0x3a>
    2666:	4a 30       	cpi	r20, 0x0A	; 10
    2668:	29 f4       	brne	.+10     	; 0x2674 <itoa+0x1c>
    266a:	97 fb       	bst	r25, 7
    266c:	1e f4       	brtc	.+6      	; 0x2674 <itoa+0x1c>
    266e:	90 95       	com	r25
    2670:	81 95       	neg	r24
    2672:	9f 4f       	sbci	r25, 0xFF	; 255
    2674:	64 2f       	mov	r22, r20
    2676:	77 27       	eor	r23, r23
    2678:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodhi4>
    267c:	80 5d       	subi	r24, 0xD0	; 208
    267e:	8a 33       	cpi	r24, 0x3A	; 58
    2680:	0c f0       	brlt	.+2      	; 0x2684 <itoa+0x2c>
    2682:	89 5d       	subi	r24, 0xD9	; 217
    2684:	81 93       	st	Z+, r24
    2686:	cb 01       	movw	r24, r22
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	a1 f7       	brne	.-24     	; 0x2674 <itoa+0x1c>
    268c:	16 f4       	brtc	.+4      	; 0x2692 <itoa+0x3a>
    268e:	5d e2       	ldi	r21, 0x2D	; 45
    2690:	51 93       	st	Z+, r21
    2692:	10 82       	st	Z, r1
    2694:	c9 01       	movw	r24, r18
    2696:	0c 94 4d 13 	jmp	0x269a	; 0x269a <strrev>

0000269a <strrev>:
    269a:	dc 01       	movw	r26, r24
    269c:	fc 01       	movw	r30, r24
    269e:	67 2f       	mov	r22, r23
    26a0:	71 91       	ld	r23, Z+
    26a2:	77 23       	and	r23, r23
    26a4:	e1 f7       	brne	.-8      	; 0x269e <strrev+0x4>
    26a6:	32 97       	sbiw	r30, 0x02	; 2
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <strrev+0x18>
    26aa:	7c 91       	ld	r23, X
    26ac:	6d 93       	st	X+, r22
    26ae:	70 83       	st	Z, r23
    26b0:	62 91       	ld	r22, -Z
    26b2:	ae 17       	cp	r26, r30
    26b4:	bf 07       	cpc	r27, r31
    26b6:	c8 f3       	brcs	.-14     	; 0x26aa <strrev+0x10>
    26b8:	08 95       	ret

000026ba <__udivmodhi4>:
    26ba:	aa 1b       	sub	r26, r26
    26bc:	bb 1b       	sub	r27, r27
    26be:	51 e1       	ldi	r21, 0x11	; 17
    26c0:	07 c0       	rjmp	.+14     	; 0x26d0 <__udivmodhi4_ep>

000026c2 <__udivmodhi4_loop>:
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	a6 17       	cp	r26, r22
    26c8:	b7 07       	cpc	r27, r23
    26ca:	10 f0       	brcs	.+4      	; 0x26d0 <__udivmodhi4_ep>
    26cc:	a6 1b       	sub	r26, r22
    26ce:	b7 0b       	sbc	r27, r23

000026d0 <__udivmodhi4_ep>:
    26d0:	88 1f       	adc	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	5a 95       	dec	r21
    26d6:	a9 f7       	brne	.-22     	; 0x26c2 <__udivmodhi4_loop>
    26d8:	80 95       	com	r24
    26da:	90 95       	com	r25
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	08 95       	ret

000026e2 <_exit>:
    26e2:	f8 94       	cli

000026e4 <__stop_program>:
    26e4:	ff cf       	rjmp	.-2      	; 0x26e4 <__stop_program>
